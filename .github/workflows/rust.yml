name: Rust

on:
  push:
    branches: [main, extensions, devnet]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  diff:
    runs-on: [ubuntu-latest]
    outputs:
      isRust: ${{ steps.diff.outputs.isRust }}
      isMove: ${{ steps.diff.outputs.isMove }}
      isReleaseNotesEligible: ${{ steps.diff.outputs.isReleaseNotesEligible }}
    steps:
      - uses: actions/checkout@v3
      - name: Detect Changes
        uses: "./.github/actions/diffs"
        id: diff

  license-check:
    name: license-check
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: bmwill/rust-cache@v1 # Fork of 'Swatinem/rust-cache' which allows caching additional paths
      - name: Install cargo-hakari, and cache the binary
        uses: baptiste0928/cargo-install@30f432979e99f3ea66a8fa2eede53c07063995d8
        with:
          crate: cargo-hakari
          locked: true
      - run: cargo xlint
      - run: |
          cargo hakari generate --diff  # workspace-hack Cargo.toml is up-to-date
          cargo hakari manage-deps --dry-run  # all workspace crates depend on workspace-hack

  release-notes-description-check:
    name: release-notes-check
    needs: diff
    if: needs.diff.outputs.isReleaseNotesEligible == 'true'
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Check Pull Request Description
        shell: bash
        run: |
          export PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          export DESCRIPTION=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/MystenLabs/sui/pulls/${PR_NUMBER}" \
            | jq --raw-output .body)

          if [[ "${DESCRIPTION}" == *"[x]"*  ]]; then
            if [[ "${DESCRIPTION}" =~ Release[[:space:]]notes[[:space:]]+.* ]]; then
              exit 0
            else
              echo "At least one '[x]' was checked under 'Type of Change (Check all that apply)', you need to add a blob under the 'Release Notes' section."
              exit 1
            fi
          fi

  test:
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    timeout-minutes: 45
    env:
      # Tests written with #[sim_test] are often flaky if run as #[tokio::test] - this var
      # causes #[sim_test] to only run under the deterministic `simtest` job, and not the
      # non-deterministic `test` job.
      SUI_SKIP_SIMTESTS: 1
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - [ubuntu-ghcloud]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: taiki-e/install-action@nextest
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 256
      - name: Install python dependencies
        run: |
          pip install pyopenssl --upgrade
          if [ -f narwhal/benchmark/requirements.txt ]; then pip install -r narwhal/benchmark/requirements.txt; fi
      - name: cargo test
        run: |
          cargo nextest run --profile ci
      - name: benchmark (smoke)
        run: |
          cargo run --package sui-benchmark --bin stress -- --log-path /tmp/stress.log --num-client-threads 10 --num-server-threads 24 --num-transfer-accounts 2 bench --target-qps 100 --num-workers 10  --transfer-object 50 --shared-counter 50 --run-duration 10s --stress-stat-collection
          pushd narwhal/benchmark && fab smoke && popd
      - name: doctests
        run: |
          cargo test --doc
      - name: rustdoc
        run: |
          cargo doc --workspace --no-deps
      # Ensure there are no uncommitted changes in the repo after running tests
      - run: scripts/changed-files.sh
        shell: bash

  windows-build:
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    timeout-minutes: 45
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - [windows-ghcloud]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: taiki-e/install-action@nextest
      - uses: arduino/setup-protoc@v1
        # this avoids rate-limiting
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install postgres (Windows)
        shell: bash
        run: |
          choco install postgresql12 --force --params '/Password:root'
          echo "C:\Program Files\PostgreSQL\12\bin" >> $GITHUB_PATH
          echo "C:\Program Files\PostgreSQL\12\lib" >> $GITHUB_PATH
          echo "PQ_LIB_DIR=C:\Program Files\PostgreSQL\12\lib" >> $GITHUB_ENV
          echo "PG_DATABASE_URL=postgres://postgres:root@localhost/" >> $GITHUB_ENV
          echo "PG_EXAMPLE_DATABASE_URL=postgres://postgres:root@localhost/diesel_example" >> $GITHUB_ENV
      - name: cargo build
        run: |
          cargo build --all-features
        shell: bash

  simtest:
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    timeout-minutes: 45
    runs-on: [ubuntu-ghcloud]
    env:
      MSIM_WATCHDOG_TIMEOUT_MS: 60000
    steps:
      - uses: actions/checkout@v3
      - uses: taiki-e/install-action@nextest
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 256
      - name: cargo simtest
        run: |
          scripts/simtest/cargo-simtest simtest
      - name: check new tests for flakiness
        run: |
          scripts/simtest/stress-new-tests.sh

  rosetta-validation:
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    timeout-minutes: 45
    runs-on: [ubuntu-ghcloud]
    steps:
      - uses: actions/checkout@v3

      - name: Setup environment
        run: .github/scripts/rosetta/setup.sh
        shell: bash

      - name: Start local Sui network
        run: |
          sui start --no-full-node &
        shell: bash

      - name: Start Rosetta servers
        run: .github/scripts/rosetta/start_rosetta.sh
        shell: bash

      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash

      - name: Run check:construction test
        run: |
          ./bin/rosetta-cli --configuration-file rosetta_cli.json check:construction
        shell: bash

      - name: Run check:data test
        run: |
          ./bin/rosetta-cli --configuration-file rosetta_cli.json check:data
        shell: bash

  # This is a no-op job that allows the resulting action names to line up when
  # there are no rust changes in a given PR/commit. This ensures that we can
  # continue to block on the rust tests passing in the case of rust changes and
  # otherwise not block pushes to main.
  test-notrust:
    name: test
    needs: diff
    if: needs.diff.outputs.isRust == 'false'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - [ubuntu-ghcloud]
          - [windows-ghcloud]
      fail-fast: false
    steps:
      - run: 'echo "No build required" '

  clippy:
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    runs-on: [ubuntu-ghcloud]
    steps:
      - uses: arduino/setup-protoc@v1
        # this avoids rate-limiting
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
      - run: rustup component add clippy
      # TODO(bradh): debug and re-enable this; the caching is breaking the clippy build
      # Enable caching of the 'librocksdb-sys' crate by additionally caching the
      # 'librocksdb-sys' src directory which is managed by cargo
      # - uses: bmwill/rust-cache@v1 # Fork of 'Swatinem/rust-cache' which allows caching additional paths
      #   with:
      #     path: ~/.cargo/registry/src/**/librocksdb-sys-*

      # See '.cargo/config' for list of enabled/disappled clippy lints
      - name: cargo clippy
        run: cargo xclippy -D warnings

  rustfmt:
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - run: rustup component add rustfmt
      - name: rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check

  cargo-deny:
    name: cargo-deny (advisories, licenses, bans, ...)
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: mystenlabs/cargo-deny-action@main

  #indexer:
  #  name: indexer
  #  needs: diff
  #  if: needs.diff.outputs.isRust == 'true'
  #  timeout-minutes: 45
  #  runs-on: [ubuntu-ghcloud]
  #  services:
  #    postgres:
  #      image: postgres
  #      env:
  #        POSTGRES_PASSWORD: postgrespw
  #      options: >-
  #        --health-cmd pg_isready
  #        --health-interval 10s
  #        --health-timeout 5s
  #        --health-retries 5
  #      ports:
  #        - 5432:5432
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: integration-test-with-postgres
  #      #We only have 1 instance of postgres DB, can only run test in single thread
  #      run: |
  #        cargo test --package sui-indexer --test integration_tests --features pg_integration -- --test-threads=1
  #      env:
  #        POSTGRES_HOST: localhost
  #        POSTGRES_PORT: 5432
