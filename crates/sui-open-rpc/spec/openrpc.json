{
  "openrpc": "1.2.6",
  "info": {
    "title": "Sui JSON-RPC",
    "description": "Sui JSON-RPC API for interaction with Sui Full node.",
    "contact": {
      "name": "Mysten Labs",
      "url": "https://mystenlabs.com",
      "email": "build@mystenlabs.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"
    },
    "version": "0.28.0"
  },
  "methods": [
    {
      "name": "sui_batchTransaction",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned batched transaction.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "single_transaction_params",
          "description": "list of transaction request parameters",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RPCTransactionRequestParams"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "txn_builder_mode",
          "description": "Whether this is a regular transaction or a Dev Inspect Transaction",
          "schema": {
            "$ref": "#/components/schemas/SuiTransactionBuilderMode"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      },
      "examples": [
        {
          "name": "Create unsigned batch transaction data.",
          "params": [
            {
              "name": "signer",
              "value": "0x9b07815f04497e2e05d22cac3aa061410b20868cc619154c42a1c61be9902717"
            },
            {
              "name": "single_transaction_params",
              "value": [
                {
                  "moveCallRequestParams": {
                    "packageObjectId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                    "module": "devnet_nft",
                    "function": "mint",
                    "typeArguments": [],
                    "arguments": [
                      "Example NFT",
                      "An NFT created by the Sui Command Line Tool",
                      "ipfs://bafkreibngqhl3gaa7daob4i2vccziay2jjlp435cf66vhono7nrvww53ty"
                    ]
                  }
                },
                {
                  "transferObjectRequestParams": {
                    "recipient": "0xb24b8ec168fe4896f5b70ccb10f1a705e061d0fdfa189618d28b0d44efef92cb",
                    "objectId": "0x672f0dbe129f1e39113f9f6164ea2867f8deccf3c3c518f146de9554f03f27a8"
                  }
                }
              ]
            },
            {
              "name": "gas",
              "value": "0xf44b581f23222c10916b17a369b4da039d075952b58036f2a7b561446592403c"
            },
            {
              "name": "gas_budget",
              "value": 1000
            },
            {
              "name": "txn_builder_mode",
              "value": "Commit"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "txBytes": "AAAFAAtFeGFtcGxlIE5GVAArQW4gTkZUIGNyZWF0ZWQgYnkgdGhlIFN1aSBDb21tYW5kIExpbmUgVG9vbABCaXBmczovL2JhZmtyZWlibmdxaGwzZ2FhN2Rhb2I0aTJ2Y2N6aWF5MmpqbHA0MzVjZjY2dmhvbm83bnJ2d3c1M3R5ACCyS47BaP5IlvW3DMsQ8acF4GHQ/foYlhjSiw1E7++SywEAZy8NvhKfHjkRP59hZOooZ/jezPPDxRjxRt6VVPA/J6gBAAAAAAAAACA9WxGF855x7zV+K9nhOWJRawpBQDJ2Q3sl8P++iXz0dgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIKZGV2bmV0X25mdARtaW50AAMBAAABAQABAgABAQEEAAEDAJsHgV8ESX4uBdIsrDqgYUELIIaMxhkVTEKhxhvpkCcXAfRLWB8jIiwQkWsXo2m02gOdB1lStYA28qe1YURlkkA8AQAAAAAAAAAgwHd+nSRv85dKxfGzUKoWxC6g1xF7MMjIQ2znqSVLMNKbB4FfBEl+LgXSLKw6oGFBCyCGjMYZFUxCocYb6ZAnFwEAAAAAAAAA6AMAAAAAAAAA",
              "gas": [
                {
                  "objectId": "0xf44b581f23222c10916b17a369b4da039d075952b58036f2a7b561446592403c",
                  "version": 1,
                  "digest": "DxJxf3yJYN74x3saUWa3pxQ2HWETkpwv1pKWHjbZ3n2u"
                }
              ],
              "inputObjects": [
                {
                  "ImmOrOwnedMoveObject": {
                    "objectId": "0x672f0dbe129f1e39113f9f6164ea2867f8deccf3c3c518f146de9554f03f27a8",
                    "version": 1,
                    "digest": "58WQqUhrsHbxjkMtiiGtkJfCpBwufnJCDVr88hExPwFs"
                  }
                },
                {
                  "MovePackage": "0x0000000000000000000000000000000000000000000000000000000000000002"
                },
                {
                  "ImmOrOwnedMoveObject": {
                    "objectId": "0xf44b581f23222c10916b17a369b4da039d075952b58036f2a7b561446592403c",
                    "version": 1,
                    "digest": "DxJxf3yJYN74x3saUWa3pxQ2HWETkpwv1pKWHjbZ3n2u"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "sui_devInspectTransaction",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Runs the transaction in dev-inspect mode. Which allows for nearly any transaction (or Move call) with any arguments. Detailed results are provided, including both the transaction effects and any return values.",
      "params": [
        {
          "name": "sender_address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "tx_bytes",
          "description": "BCS encoded TransactionKind(as opposed to TransactionData, which include gasBudget and gasPrice)",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "gas_price",
          "description": "Gas is not charged, but gas usage is still calculated. Default to use reference gas price",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "epoch",
          "description": "The epoch to perform the call. Will be set from the system state object if not provided",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "DevInspectResults",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/DevInspectResults"
        }
      }
    },
    {
      "name": "sui_dryRunTransaction",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Return transaction execution effects including the gas cost summary, while the effects are not committed to the chain.",
      "params": [
        {
          "name": "tx_bytes",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      ],
      "result": {
        "name": "DryRunTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/DryRunTransactionResponse"
        }
      }
    },
    {
      "name": "sui_executeTransaction",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Execute the transaction and wait for results if desired. Request types: 1. WaitForEffectsCert: waits for TransactionEffectsCert and then return to client.     This mode is a proxy for transaction finality. 2. WaitForLocalExecution: waits for TransactionEffectsCert and make sure the node     executed the transaction locally before returning the client. The local execution     makes sure this node is aware of this transaction when client fires subsequent queries.     However if the node fails to execute the transaction locally in a timely manner,     a bool type in the response is set to false to indicated the case. request_type is default to be `WaitForEffectsCert` unless options.show_events or options.show_effects is true",
      "params": [
        {
          "name": "tx_bytes",
          "description": "BCS serialized transaction data bytes without its type tag, as base-64 encoded string.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "signatures",
          "description": "A list of signatures (`flag || signature || pubkey` bytes, as base-64 encoded string). Signature is committed to the intent message of the transaction data, as base-64 encoded string.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/TransactionResponseOptions"
          }
        },
        {
          "name": "request_type",
          "description": "The request type, derived from `SuiTransactionResponseOptions` if None",
          "schema": {
            "$ref": "#/components/schemas/ExecuteTransactionRequestType"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Execute an transaction with serialized signatures",
          "params": [
            {
              "name": "tx_bytes",
              "value": "AAACACDh/BfIFHCJ3EMY/dQA22c2TvNQyVJnbYV9w3+ufZMpigEAEkXDG0IGiMFobLTRNW0XGA3YLpOkg8WrXwGimIeh2V4CAAAAAAAAACBVfcQqrv7rjBVNfdxFa4rqoxMsdANTHcmOg/bhmNLX0QEBAQEBAAEAALbEL76B7sFgNqEeISQHqNtSw954WFsAFruzZAV13qO+AVtUi2FtpjsM4H2Bbonve5o4IXe0Qiu6on9+Yl6jGaoKAgAAAAAAAAAgGEhmb/7SKRriSj+BdzU6BSINdlypxCGjaAg/GP5HLzm2xC++ge7BYDahHiEkB6jbUsPeeFhbABa7s2QFdd6jvgEAAAAAAAAA6AMAAAAAAAAA"
            },
            {
              "name": "signatures",
              "value": [
                "AEDUTa46gvfXjMiVniZTIpCF/rRDdBsdXJ8k7FdTE/li/1bJ4EnfgQ76htANuKJ37H+iMq3zcaoRzg3BbxxnZwYlVGRdA7hw4S62EKbvrTzoAfsk9oO2PfKUXStkY7jELA=="
              ]
            },
            {
              "name": "options",
              "value": {
                "showInput": true,
                "showEffects": true,
                "showEvents": true
              }
            },
            {
              "name": "request_type",
              "value": "WaitForLocalExecution"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "digest": "62GYZdSJGn8aRjBrvjS75xkeu8UEhFcmpwzjjCZ5pp3h",
              "transaction": {
                "data": {
                  "messageVersion": "v1",
                  "transaction": {
                    "kind": "ProgrammableTransaction",
                    "inputs": [
                      "0xe1fc17c8147089dc4318fdd400db67364ef350c952676d857dc37fae7d93298a",
                      "1245c31b420688c1686cb4d1356d17180dd82e93a483c5ab5f01a29887a1d95e"
                    ],
                    "commands": [
                      {
                        "TransferObjects": [
                          [
                            {
                              "Input": 1
                            }
                          ],
                          {
                            "Input": 0
                          }
                        ]
                      }
                    ]
                  },
                  "sender": "0xb6c42fbe81eec16036a11e212407a8db52c3de78585b0016bbb3640575dea3be",
                  "gasData": {
                    "payment": [
                      {
                        "objectId": "0x5b548b616da63b0ce07d816e89ef7b9a382177b4422bbaa27f7e625ea319aa0a",
                        "version": 2,
                        "digest": "2dnpKMuvbtsQSofMivyT1AdcA4WJanK8C5aSfJHt3Tya"
                      }
                    ],
                    "owner": "0xb6c42fbe81eec16036a11e212407a8db52c3de78585b0016bbb3640575dea3be",
                    "price": 1,
                    "budget": 1000
                  }
                },
                "txSignatures": [
                  "AEDUTa46gvfXjMiVniZTIpCF/rRDdBsdXJ8k7FdTE/li/1bJ4EnfgQ76htANuKJ37H+iMq3zcaoRzg3BbxxnZwYlVGRdA7hw4S62EKbvrTzoAfsk9oO2PfKUXStkY7jELA=="
                ]
              },
              "effects": {
                "messageVersion": "v1",
                "status": {
                  "status": "success"
                },
                "executedEpoch": 0,
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "transactionDigest": "9KiiSPVAMRLw8dhc1gq9SngDDhBZG5JfHXw9CyshyLkP",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0xb6c42fbe81eec16036a11e212407a8db52c3de78585b0016bbb3640575dea3be"
                    },
                    "reference": {
                      "objectId": "0x5b548b616da63b0ce07d816e89ef7b9a382177b4422bbaa27f7e625ea319aa0a",
                      "version": 2,
                      "digest": "2dnpKMuvbtsQSofMivyT1AdcA4WJanK8C5aSfJHt3Tya"
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0xe1fc17c8147089dc4318fdd400db67364ef350c952676d857dc37fae7d93298a"
                    },
                    "reference": {
                      "objectId": "0x1245c31b420688c1686cb4d1356d17180dd82e93a483c5ab5f01a29887a1d95e",
                      "version": 2,
                      "digest": "6kitCD3vFG15poaXqubfXki4PhFpMcgRULYxTU1yJDYt"
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0xb6c42fbe81eec16036a11e212407a8db52c3de78585b0016bbb3640575dea3be"
                  },
                  "reference": {
                    "objectId": "0x5b548b616da63b0ce07d816e89ef7b9a382177b4422bbaa27f7e625ea319aa0a",
                    "version": 2,
                    "digest": "2dnpKMuvbtsQSofMivyT1AdcA4WJanK8C5aSfJHt3Tya"
                  }
                },
                "eventsDigest": "6MP1w4WAxmKG85kRuPYqFDYXdW7JbartrLnPrm6L8tfm"
              },
              "events": [
                {
                  "type": "transferObject",
                  "content": {
                    "packageId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                    "transactionModule": "native",
                    "sender": "0xb6c42fbe81eec16036a11e212407a8db52c3de78585b0016bbb3640575dea3be",
                    "recipient": {
                      "AddressOwner": "0xe1fc17c8147089dc4318fdd400db67364ef350c952676d857dc37fae7d93298a"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "0x1245c31b420688c1686cb4d1356d17180dd82e93a483c5ab5f01a29887a1d95e",
                    "version": 2
                  }
                }
              ]
            }
          }
        }
      ],
      "deprecated": true
    },
    {
      "name": "sui_getAllBalances",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return the total coin balance for all coin type, owned by the address owner.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<Balance>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Balance"
          }
        }
      }
    },
    {
      "name": "sui_getAllCoins",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return all Coin objects owned by an address.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CoinPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_Coin_and_ObjectID"
        }
      }
    },
    {
      "name": "sui_getBalance",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return the total coin balance for one coin type, owned by the address owner.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_type",
          "description": "optional type names for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Balance",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Balance"
        }
      }
    },
    {
      "name": "sui_getCheckpoint",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a checkpoint",
      "params": [
        {
          "name": "id",
          "description": "Checkpoint identifier, can use either checkpoint digest, or checkpoint sequence number as input.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CheckpointId"
          }
        }
      ],
      "result": {
        "name": "Checkpoint",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Checkpoint"
        }
      },
      "examples": [
        {
          "name": "Get checkpoint",
          "params": [
            {
              "name": "id",
              "value": 1000
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "epoch": 5000,
              "sequenceNumber": 1000,
              "digest": "GfwJqw63FK6AVQnKKkQprvrk3cVLziMBqhMfNkDuCHj9",
              "networkTotalTransactions": 792385,
              "previousDigest": "EnRQXe1hDGAJCFyF2ds2GmPHdvf9V6yxf24LisEsDkYt",
              "epochRollingGasCostSummary": {
                "computationCost": 0,
                "storageCost": 0,
                "storageRebate": 0
              },
              "timestampMs": 1676911928,
              "endOfEpochData": null,
              "transactions": [
                "Cv7n2YaM7Am1ssZGu4khsFkcKHnpgVhwFCSs4kLjrtLW"
              ],
              "checkpointCommitments": []
            }
          }
        }
      ]
    },
    {
      "name": "sui_getCoinMetadata",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return metadata(e.g., symbol, decimals) for a coin",
      "params": [
        {
          "name": "coin_type",
          "description": "type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiCoinMetadata",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiCoinMetadata"
        }
      }
    },
    {
      "name": "sui_getCoins",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return all Coin<`coin_type`> objects owned by an address.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_type",
          "description": "optional type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CoinPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_Coin_and_ObjectID"
        }
      }
    },
    {
      "name": "sui_getCommitteeInfo",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the committee information for the asked `epoch`.",
      "params": [
        {
          "name": "epoch",
          "description": "The epoch of interest. If None, default to the latest epoch",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "SuiCommittee",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CommitteeInfo"
        }
      }
    },
    {
      "name": "sui_getDelegatedStakes",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return all [DelegatedStake].",
      "params": [
        {
          "name": "owner",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<DelegatedStake>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/DelegatedStake"
          }
        }
      }
    },
    {
      "name": "sui_getDynamicFieldObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the dynamic field object information for a specified object",
      "params": [
        {
          "name": "parent_object_id",
          "description": "The ID of the queried parent object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "name",
          "description": "The Name of the dynamic field",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/DynamicFieldName"
          }
        }
      ],
      "result": {
        "name": "SuiObjectResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      }
    },
    {
      "name": "sui_getDynamicFields",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the list of dynamic field objects owned by an object.",
      "params": [
        {
          "name": "parent_object_id",
          "description": "The ID of the parent object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "cursor",
          "description": "Optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "Maximum item returned per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "DynamicFieldPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_DynamicFieldInfo_and_ObjectID"
        }
      }
    },
    {
      "name": "sui_getEvents",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return list of events for a specified query criteria.",
      "params": [
        {
          "name": "query",
          "description": "the event query criteria.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventQuery"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/EventID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "descending_order",
          "description": "query result ordering, default to false (ascending order), oldest record first.",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "EventPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_EventEnvelope_and_EventID"
        }
      },
      "examples": [
        {
          "name": "Return the Events emitted by a transaction",
          "params": [
            {
              "name": "query",
              "value": {
                "Transaction": "BXq18DwsDhHnQ4QjVJkXSkmzZ48YprJmhqpNEt3bamTz"
              }
            },
            {
              "name": "cursor",
              "value": {
                "txDigest": "BXq18DwsDhHnQ4QjVJkXSkmzZ48YprJmhqpNEt3bamTz",
                "eventSeq": 10
              }
            },
            {
              "name": "limit",
              "value": 1
            },
            {
              "name": "descending_order",
              "value": false
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                {
                  "timestamp": 0,
                  "txDigest": "BXq18DwsDhHnQ4QjVJkXSkmzZ48YprJmhqpNEt3bamTz",
                  "id": {
                    "txDigest": "BXq18DwsDhHnQ4QjVJkXSkmzZ48YprJmhqpNEt3bamTz",
                    "eventSeq": 0
                  },
                  "event": {
                    "type": "transferObject",
                    "content": {
                      "packageId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "transactionModule": "native",
                      "sender": "0x9100ecbc36623d5703ab2951bbc49fb2f6d742b1f4dc4bc4d349c7217f4c90a0",
                      "recipient": {
                        "AddressOwner": "0x0ccb13d3dbfe7614b81ea76b255e5d435032cd8595f37eb8fc00ffcda00afc5e"
                      },
                      "objectType": "0x2::example::Object",
                      "objectId": "0xa9e39cb2f232525cdceea35a433a7b0f50e8dfb2e21ba497c54ab30a3d9adc07",
                      "version": 2
                    }
                  }
                }
              ],
              "nextCursor": {
                "txDigest": "11a72GCQ5hGNpWGh2QhQkkusTEGS6EDqifJqxr7nSYX",
                "eventSeq": 5
              },
              "hasNextPage": false
            }
          }
        }
      ]
    },
    {
      "name": "sui_getLatestCheckpointSequenceNumber",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the sequence number of the latest checkpoint that has been executed",
      "params": [],
      "result": {
        "name": "CheckpointSequenceNumber",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    {
      "name": "sui_getLatestSuiSystemState",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the latest SUI system state object on-chain.",
      "params": [],
      "result": {
        "name": "SuiSystemStateSummary",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiSystemStateSummary"
        }
      }
    },
    {
      "name": "sui_getMoveFunctionArgTypes",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the argument types of a Move function, based on normalized Type.",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Vec<MoveFunctionArgType>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MoveFunctionArgType"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveFunction",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a structured representation of Move function",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedFunction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModule",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a structured representation of Move module",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedModule",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedModule"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModulesByPackage",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return structured representations of all modules in the given package",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "BTreeMap<String,SuiMoveNormalizedModule>",
        "required": true,
        "schema": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/SuiMoveNormalizedModule"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveStruct",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a structured representation of Move struct",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "struct_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedStruct",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
        }
      }
    },
    {
      "name": "sui_getObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the object information for a specified object",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/ObjectDataOptions"
          }
        }
      ],
      "result": {
        "name": "SuiObjectResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Object data",
          "params": [
            {
              "name": "object_id",
              "value": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809"
            },
            {
              "name": "options",
              "value": {
                "showType": true,
                "showOwner": true,
                "showPreviousTransaction": true,
                "showDisplay": false,
                "showContent": true,
                "showBcs": false,
                "showStorageRebate": true
              }
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "Exists",
              "details": {
                "objectId": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809",
                "version": 1,
                "digest": "33K5ZXJ3RyubvYaHuEnQ1QXmmbhgtrFwp199dnEbL4n7",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0xc8ec1d5b84dd6289e193b9f88de4a994358c9f856135236c3e75a925e1c77ac3"
                },
                "previousTransaction": "5PLgmQye6rraDYqpV3npV6H1cUXoJZgJh1dPCyRa3WCv",
                "storageRebate": 100,
                "content": {
                  "dataType": "moveObject",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "hasPublicTransfer": true,
                  "fields": {
                    "balance": "10000",
                    "id": {
                      "id": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_getObjectsOwnedByAddress",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the list of objects owned by an address.",
      "params": [
        {
          "name": "address",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiObjectInfo>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectInfo"
          }
        }
      },
      "examples": [
        {
          "name": "Get objects owned by an address",
          "params": [
            {
              "name": "address",
              "value": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "objectId": "0x1b9c00a93345ce5f12bea9ffe04748d6696c30631735193aea95b8f9082c1062",
                "version": 0,
                "digest": "p3mh2EkKPG2jckE87LnVpRF5uE3R7WWfaFZELQhqYMk",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
                },
                "previousTransaction": "Bv28BS3v5AuiQHY9SHfwo8PNM48mzR6LLBkbxsaoQFLd"
              },
              {
                "objectId": "0x33e3e1d64f76b71a80ec4f332f4d1a6742c537f2bb32473b01b1dcb1caac9427",
                "version": 0,
                "digest": "3LEKanp51C6hgnso1mkCBJZXTrxBtairWGstiozCYRoi",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
                },
                "previousTransaction": "FNgSG6ujbQ57wZaY4d8Jf6xAGJdqQvhRrSD9jTUHfVg6"
              },
              {
                "objectId": "0x1bc44cdfce3574e7f7f0b2de2323a06ebc356bad614726b313d811012d4be723",
                "version": 0,
                "digest": "8u3E7cQUSuo96NwJ9mYS4hMGCs48CEjreQPGrKGsVTMV",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
                },
                "previousTransaction": "6otjiis1Y5t2FFGcQjhof1wA2JSo4zhLEdQkH6GSXHHT"
              },
              {
                "objectId": "0x5d1123f2b8a0ac606b940a66e42efd782af5203112331adc2ed6f402dca396bf",
                "version": 0,
                "digest": "GYEZNzUU2HeTTUTFr8bmPQ4mCY9gpPiTHdim9GgAxxwb",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x4e049913233eb918c11638af89d575beb99003d30a245ac74a02e26e45cb80ee"
                },
                "previousTransaction": "53FQJhUHQqRektpSXPdyn55rjqh3K142iR8jtdPiRZ54"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getReferenceGasPrice",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the reference gas price for the network",
      "params": [],
      "result": {
        "name": "u64",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    {
      "name": "sui_getTotalSupply",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return total supply for a coin",
      "params": [
        {
          "name": "coin_type",
          "description": "type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Supply",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Supply"
        }
      }
    },
    {
      "name": "sui_getTotalTransactionNumber",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the total number of transactions known to the server.",
      "params": [],
      "result": {
        "name": "u64",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "examples": [
        {
          "name": "Get total number of transactions",
          "params": [],
          "result": {
            "name": "Result",
            "value": 100
          }
        }
      ]
    },
    {
      "name": "sui_getTransaction",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the transaction response object.",
      "params": [
        {
          "name": "digest",
          "description": "the digest of the queried transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/TransactionResponseOptions"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Return the transaction response object for specified transaction digest",
          "params": [
            {
              "name": "digest",
              "value": "56bDbQKRbEGHsUH6jcmz4S5XPbojSZa1adTCnYVaLR6B"
            },
            {
              "name": "options",
              "value": {
                "showInput": true,
                "showEffects": true,
                "showEvents": true
              }
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "digest": "56bDbQKRbEGHsUH6jcmz4S5XPbojSZa1adTCnYVaLR6B",
              "transaction": {
                "data": {
                  "messageVersion": "v1",
                  "transaction": {
                    "kind": "ProgrammableTransaction",
                    "inputs": [
                      "0xd77e89e7bfefd4f73ada3d19ac87d45351f0196a880b95c3ea244dd060d2b653",
                      "8196d048b7a6d04c8edc89579d86fd3fc90c52f9a14c6b812b94fe613c5bcebb"
                    ],
                    "commands": [
                      {
                        "TransferObjects": [
                          [
                            {
                              "Input": 1
                            }
                          ],
                          {
                            "Input": 0
                          }
                        ]
                      }
                    ]
                  },
                  "sender": "0xbdda5e66040ca41c0b935b7d5083add6ab4e34a41e5c0d6d87ad3df5cc0fa664",
                  "gasData": {
                    "payment": [
                      {
                        "objectId": "0x5eeb1d449e2516166d57d71fdeb154d0dc9ecdb7b30057d0a932684cac352cdc",
                        "version": 2,
                        "digest": "2mSugTSEhVgVmbVxjz9r61odXT3pBhqb1C6xk4AGguYL"
                      }
                    ],
                    "owner": "0xbdda5e66040ca41c0b935b7d5083add6ab4e34a41e5c0d6d87ad3df5cc0fa664",
                    "price": 1,
                    "budget": 1000
                  }
                },
                "txSignatures": [
                  "APR3unFDQWGRASsOWcvrSAelNlifG92BicSHOYJ3+qGBxDnbB34xnq8AaIHiR+8SLh2oAkGNJNSnRr39LBgf+wdQKU4RyKWd3xUxrXzYXuLAWeHGehyEWP1S9XPAYKkWZw=="
                ]
              },
              "effects": {
                "messageVersion": "v1",
                "status": {
                  "status": "success"
                },
                "executedEpoch": 0,
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "transactionDigest": "GK4NxEKSrK88XkPNeuBqtJYPmU9yMTWMD7K9TdU4ybKN",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0xbdda5e66040ca41c0b935b7d5083add6ab4e34a41e5c0d6d87ad3df5cc0fa664"
                    },
                    "reference": {
                      "objectId": "0x5eeb1d449e2516166d57d71fdeb154d0dc9ecdb7b30057d0a932684cac352cdc",
                      "version": 2,
                      "digest": "2mSugTSEhVgVmbVxjz9r61odXT3pBhqb1C6xk4AGguYL"
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0xd77e89e7bfefd4f73ada3d19ac87d45351f0196a880b95c3ea244dd060d2b653"
                    },
                    "reference": {
                      "objectId": "0x8196d048b7a6d04c8edc89579d86fd3fc90c52f9a14c6b812b94fe613c5bcebb",
                      "version": 2,
                      "digest": "7nDZ5J4VyvYGUbX2f6mQdhkr3RFrb3vZqui1ogoyApD9"
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0xbdda5e66040ca41c0b935b7d5083add6ab4e34a41e5c0d6d87ad3df5cc0fa664"
                  },
                  "reference": {
                    "objectId": "0x5eeb1d449e2516166d57d71fdeb154d0dc9ecdb7b30057d0a932684cac352cdc",
                    "version": 2,
                    "digest": "2mSugTSEhVgVmbVxjz9r61odXT3pBhqb1C6xk4AGguYL"
                  }
                },
                "eventsDigest": "64UQ3a7m1mjWuzgyGoH8RnMyPGDN4XYTC9dS4qiSfdK4"
              },
              "events": [
                {
                  "type": "transferObject",
                  "content": {
                    "packageId": "0x0000000000000000000000000000000000000000000000000000000000000002",
                    "transactionModule": "native",
                    "sender": "0xbdda5e66040ca41c0b935b7d5083add6ab4e34a41e5c0d6d87ad3df5cc0fa664",
                    "recipient": {
                      "AddressOwner": "0xd77e89e7bfefd4f73ada3d19ac87d45351f0196a880b95c3ea244dd060d2b653"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "0x8196d048b7a6d04c8edc89579d86fd3fc90c52f9a14c6b812b94fe613c5bcebb",
                    "version": 2
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsInRangeDeprecated",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return list of transaction digests within the queried range. This method will be removed before April 2023, please use `queryTransactions` instead",
      "params": [
        {
          "name": "start",
          "description": "the matching transactions' sequence number will be greater than or equals to the starting sequence number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end",
          "description": "the matching transactions' sequence number will be less than the ending sequence number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<TransactionDigest>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      },
      "deprecated": true
    },
    {
      "name": "sui_mergeCoins",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to merge multiple coins into one coin.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "primary_coin",
          "description": "the coin object to merge into, this coin will remain after the transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "coin_to_merge",
          "description": "the coin object to be merged, this coin will be destroyed, the balance will be added to `primary_coin`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_moveCall",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to execute a Move call on the network, by calling the specified function in the module of a given package.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "package_object_id",
          "description": "the Move package ID, e.g. `0x2`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "description": "the Move module name, e.g. `devnet_nft`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "description": "the move function name, e.g. `mint`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "type_arguments",
          "description": "the type arguments of the Move function",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        },
        {
          "name": "arguments",
          "description": "the arguments to be passed into the Move function, in [SuiJson](https://docs.sui.io/build/sui-json) format",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "execution_mode",
          "description": "Whether this is a Normal transaction or a Dev Inspect Transaction. Default to be `SuiTransactionBuilderMode::Commit` when it's None.",
          "schema": {
            "$ref": "#/components/schemas/SuiTransactionBuilderMode"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_multiGetObjects",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the object data for a list of objects",
      "params": [
        {
          "name": "object_ids",
          "description": "the IDs of the queried objects",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/ObjectDataOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiObjectResponse>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectRead"
          }
        }
      }
    },
    {
      "name": "sui_multiGetTransactions",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Returns an ordered list of transaction responses The method will throw an error if the input contains any duplicate or the input size exceeds QUERY_MAX_RESULT_LIMIT",
      "params": [
        {
          "name": "digests",
          "description": "A list of transaction digests.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          }
        },
        {
          "name": "options",
          "description": "config options to control which fields to fetch",
          "schema": {
            "$ref": "#/components/schemas/TransactionResponseOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiTransactionResponse>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TransactionResponse"
          }
        }
      }
    },
    {
      "name": "sui_pay",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send `Coin<T>` to a list of addresses, where `T` can be any coin type, following a list of amounts, The object specified in the `gas` field will be used to pay the gas fee for the transaction. The gas object can not appear in `input_coins`. If the gas object is not specified, the RPC server will auto-select one.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipients",
          "description": "the recipients' addresses, the length of this vector must be the same as amounts.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        },
        {
          "name": "amounts",
          "description": "the amounts to be transferred to recipients, following the same order",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BigInt"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_payAllSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send all SUI coins to one recipient. This is for SUI coin only and does not require a separate gas coin object. Specifically, what pay_all_sui does are: 1. accumulate all SUI from input coins and deposit all SUI to the first input coin 2. transfer the updated first coin to the recipient and also use this first coin as gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - actual_gas_cost. 4. all other input coins other than the first are deleted.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction, including the coin for gas payment.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipient",
          "description": "the recipient address,",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_paySui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send SUI coins to a list of addresses, following a list of amounts. This is for SUI coin only and does not require a separate gas coin object. Specifically, what pay_sui does are: 1. debit each input_coin to create new coin following the order of amounts and assign it to the corresponding recipient. 2. accumulate all residual SUI from input coins left and deposit all SUI to the first input coin, then use the first input coin as the gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - sum(amounts) - actual_gas_cost 4. all other input coints other than the first one are deleted.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction, including the coin for gas payment.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipients",
          "description": "the recipients' addresses, the length of this vector must be the same as amounts.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        },
        {
          "name": "amounts",
          "description": "the amounts to be transferred to recipients, following the same order",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BigInt"
            }
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_publish",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to publish Move module.",
      "params": [
        {
          "name": "sender",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "compiled_modules",
          "description": "the compiled bytes of a move module, the",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_queryTransactions",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return list of transactions for a specified query criteria.",
      "params": [
        {
          "name": "query",
          "description": "the transaction query criteria.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionResponseQuery"
          }
        },
        {
          "name": "cursor",
          "description": "Optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        },
        {
          "name": "limit",
          "description": "Maximum item returned per page, default to QUERY_MAX_RESULT_LIMIT if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "descending_order",
          "description": "query result ordering, default to false (ascending order), oldest record first.",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "TransactionsPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_TransactionResponse_and_TransactionDigest"
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified query criteria",
          "params": [
            {
              "name": "query",
              "value": {
                "InputObject": "0x6e1e02f6658d21bce9b88bdceee1294144eec47cf39388bb680f69b7426bc529"
              }
            },
            {
              "name": "cursor",
              "value": "3nek86HEjXZ7K3EtrAcBG4wMrCS21gqr8BqwwC6M6P7F"
            },
            {
              "name": "limit",
              "value": 100
            },
            {
              "name": "descending_order",
              "value": false
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                {
                  "digest": "6AyFnAuKAKCqm1cD94EyGzBqJCDDJ716ojjmsKF2rqoi"
                },
                {
                  "digest": "9BQobwxQvJ1JxSXNn8v8htZPTu8FEzJJGgcD4kgLUuMd"
                },
                {
                  "digest": "GUPcK4cmRmgsTFr52ab9f6fnzNVg3Lz6hF2aXFcsRzaD"
                },
                {
                  "digest": "B2iV1SVbBjgTKfbJKPQrvTT6F3kNdekFuBwY9tQcAxV2"
                }
              ],
              "nextCursor": "B2iV1SVbBjgTKfbJKPQrvTT6F3kNdekFuBwY9tQcAxV2",
              "hasNextPage": false
            }
          }
        }
      ]
    },
    {
      "name": "sui_requestAddStake",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Add stake to a validator's staking pool using multiple coins and amount.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coins",
          "description": "Coin<SUI> or LockedCoin<SUI> object to stake",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "amount",
          "description": "stake amount",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "validator",
          "description": "the validator's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_requestWithdrawStake",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Withdraw stake from a validator's staking pool.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "delegation",
          "description": "Delegation object ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "staked_sui",
          "description": "StakedSui object ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoin",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_amounts",
          "description": "the amounts to split out from the coin",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoinEqual",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple equal-size coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_count",
          "description": "the number of coins to split into",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_subscribeEvent",
      "tags": [
        {
          "name": "Event Read API"
        },
        {
          "name": "Websocket"
        },
        {
          "name": "PubSub"
        }
      ],
      "description": "Subscribe to a stream of Sui event",
      "params": [
        {
          "name": "filter",
          "description": "the filter criteria of the event stream, see the [Sui docs](https://docs.sui.io/build/pubsub#event-filters) for detailed examples.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventFilter"
          }
        }
      ],
      "result": {
        "name": "SuiEventEnvelope",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/EventEnvelope"
        }
      }
    },
    {
      "name": "sui_transferObject",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to transfer an object from one address to another. The object's type must allow public transfers",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "object_id",
          "description": "the ID of the object to be transferred",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_transferSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to send SUI coin object to a Sui address. The SUI object is also used as the gas object.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "sui_object_id",
          "description": "the Sui coin object to be used in this transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "amount",
          "description": "the amount to be split out and transferred",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_tryGetPastObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Note there is no software-level guarantee/SLA that objects with past versions can be retrieved by this API, even if the object and version exists/existed. The result may vary across nodes depending on their pruning policies. Return the object information for a specified version",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "version",
          "description": "the version of the queried object. If None, default to the latest known version",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/ObjectDataOptions"
          }
        }
      ],
      "result": {
        "name": "SuiPastObjectResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Past Object data",
          "params": [
            {
              "name": "object_id",
              "value": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760"
            },
            {
              "name": "version",
              "value": 4
            },
            {
              "name": "options",
              "value": {
                "showType": true,
                "showOwner": true,
                "showPreviousTransaction": true,
                "showDisplay": false,
                "showContent": true,
                "showBcs": false,
                "showStorageRebate": true
              }
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "VersionFound",
              "details": {
                "objectId": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760",
                "version": 4,
                "digest": "5VPAwDXy3BL72ehFc7gSJoz27ahMd6spUg5YwYc4ibcv",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x3568c40e814d9d5396d23087a0fd641e91e0e00df6c012cded9ef9ba5e5bf042"
                },
                "previousTransaction": "5jQByoouHBwaico5pQB73GdbzerC2StjTiHh5garBjiV",
                "storageRebate": 100,
                "content": {
                  "dataType": "moveObject",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "hasPublicTransfer": true,
                  "fields": {
                    "balance": "10000",
                    "id": {
                      "id": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_tryMultiGetPastObjects",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Note there is no software-level guarantee/SLA that objects with past versions can be retrieved by this API, even if the object and version exists/existed. The result may vary across nodes depending on their pruning policies. Return the object information for a specified version",
      "params": [
        {
          "name": "past_objects",
          "description": "a vector of object and versions to be queried",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPastObjectRequest"
            }
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/ObjectDataOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiPastObjectResponse>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectRead"
          }
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "AuthorityPublicKeyBytes": {
        "description": "Defines the compressed version of the public key that we pass around in Sui",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base64"
          }
        ]
      },
      "Balance": {
        "type": "object",
        "required": [
          "coinObjectCount",
          "coinType",
          "lockedBalance",
          "totalBalance"
        ],
        "properties": {
          "coinObjectCount": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "coinType": {
            "type": "string"
          },
          "lockedBalance": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "totalBalance": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          }
        }
      },
      "BalanceChangeType": {
        "type": "string",
        "enum": [
          "Gas",
          "Pay",
          "Receive"
        ]
      },
      "Base58": {
        "type": "string"
      },
      "Base64": {
        "description": "Base64 encoding",
        "type": "string"
      },
      "BigInt": {
        "description": "Type for de/serializing number to string",
        "type": "string"
      },
      "Checkpoint": {
        "type": "object",
        "required": [
          "checkpointCommitments",
          "digest",
          "epoch",
          "epochRollingGasCostSummary",
          "networkTotalTransactions",
          "sequenceNumber",
          "timestampMs",
          "transactions"
        ],
        "properties": {
          "checkpointCommitments": {
            "description": "Commitments to checkpoint state",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckpointCommitment"
            }
          },
          "digest": {
            "description": "Checkpoint digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckpointDigest"
              }
            ]
          },
          "endOfEpochData": {
            "description": "Present only on the final checkpoint of the epoch.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/EndOfEpochData"
              },
              {
                "type": "null"
              }
            ]
          },
          "epoch": {
            "description": "Checkpoint's epoch ID",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epochRollingGasCostSummary": {
            "description": "The running total gas costs of all transactions included in the current epoch so far until this checkpoint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasCostSummary"
              }
            ]
          },
          "networkTotalTransactions": {
            "description": "Total number of transactions committed since genesis, including those in this checkpoint.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "previousDigest": {
            "description": "Digest of the previous checkpoint",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CheckpointDigest"
              },
              {
                "type": "null"
              }
            ]
          },
          "sequenceNumber": {
            "description": "Checkpoint sequence number",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "timestampMs": {
            "description": "Timestamp of the checkpoint - number of milliseconds from the Unix epoch Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent checkpoints can have same timestamp if they originate from the same underlining consensus commit",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "transactions": {
            "description": "Transaction digests",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          }
        }
      },
      "CheckpointCommitment": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ECMHLiveObjectSetDigest"
            ],
            "properties": {
              "ECMHLiveObjectSetDigest": {
                "$ref": "#/components/schemas/ECMHLiveObjectSetDigest"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CheckpointDigest": {
        "description": "Representation of a Checkpoint's digest",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sha3Digest"
          }
        ]
      },
      "CheckpointId": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "$ref": "#/components/schemas/CheckpointDigest"
          }
        ]
      },
      "Coin": {
        "type": "object",
        "required": [
          "balance",
          "coinObjectId",
          "coinType",
          "digest",
          "previousTransaction",
          "version"
        ],
        "properties": {
          "balance": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "coinObjectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "coinType": {
            "type": "string"
          },
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "lockedUntilEpoch": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "previousTransaction": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "CommitteeInfo": {
        "description": "RPC representation of the [Committee] type.",
        "type": "object",
        "required": [
          "epoch",
          "validators"
        ],
        "properties": {
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "validators": {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/AuthorityPublicKeyBytes"
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "CompressedSignature": {
        "description": "Unlike [enum Signature], [enum CompressedSignature] does not contain public key.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519"
            ],
            "properties": {
              "Ed25519": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1"
            ],
            "properties": {
              "Secp256k1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1"
            ],
            "properties": {
              "Secp256r1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Data": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "dataType",
              "fields",
              "hasPublicTransfer",
              "type"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "moveObject"
                ]
              },
              "fields": {
                "$ref": "#/components/schemas/MoveStruct"
              },
              "hasPublicTransfer": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dataType",
              "disassembled"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "package"
                ]
              },
              "disassembled": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        ]
      },
      "DelegatedStake": {
        "type": "object",
        "required": [
          "stakes",
          "stakingPool",
          "validatorAddress"
        ],
        "properties": {
          "stakes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stake"
            }
          },
          "stakingPool": {
            "description": "Staking pool object id.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "validatorAddress": {
            "description": "Validator's Address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SuiAddress"
              }
            ]
          }
        }
      },
      "DevInspectResults": {
        "description": "The response from processing a dev inspect transaction",
        "type": "object",
        "required": [
          "effects",
          "events",
          "results"
        ],
        "properties": {
          "effects": {
            "description": "Summary of effects that likely would be generated if the transaction is actually run. Note however, that not all dev-inspect transactions are actually usable as transactions so it might not be possible actually generate these effects from a normal transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionEffects"
              }
            ]
          },
          "events": {
            "description": "Events that likely would be generated if the transaction is actually run.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "results": {
            "description": "Execution results (including return values) from executing the transaction commands",
            "allOf": [
              {
                "$ref": "#/components/schemas/Result_of_Array_of_SuiExecutionResult_or_String"
              }
            ]
          }
        }
      },
      "DryRunTransactionResponse": {
        "type": "object",
        "required": [
          "effects",
          "events"
        ],
        "properties": {
          "effects": {
            "$ref": "#/components/schemas/TransactionEffects"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "DynamicFieldInfo": {
        "type": "object",
        "required": [
          "bcsName",
          "digest",
          "name",
          "objectId",
          "objectType",
          "type",
          "version"
        ],
        "properties": {
          "bcsName": {
            "$ref": "#/components/schemas/Base58"
          },
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "name": {
            "$ref": "#/components/schemas/DynamicFieldName"
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "objectType": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DynamicFieldType"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "DynamicFieldName": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "value": true
        }
      },
      "DynamicFieldType": {
        "type": "string",
        "enum": [
          "DynamicField",
          "DynamicObject"
        ]
      },
      "ECMHLiveObjectSetDigest": {
        "description": "The Sha256 digest of an EllipticCurveMultisetHash committing to the live object set.",
        "type": "object",
        "required": [
          "digest"
        ],
        "properties": {
          "digest": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 32,
            "minItems": 32
          }
        }
      },
      "Ed25519SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "EndOfEpochData": {
        "type": "object",
        "required": [
          "epoch_commitments",
          "next_epoch_committee",
          "next_epoch_protocol_version"
        ],
        "properties": {
          "epoch_commitments": {
            "description": "Commitments to epoch specific state (e.g. live object set)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckpointCommitment"
            }
          },
          "next_epoch_committee": {
            "description": "next_epoch_committee is `Some` if and only if the current checkpoint is the last checkpoint of an epoch. Therefore next_epoch_committee can be used to pick the last checkpoint of an epoch, which is often useful to get epoch level summary stats like total gas cost of an epoch, or the total number of transactions from genesis to the end of an epoch. The committee is stored as a vector of validator pub key and stake pairs. The vector should be sorted based on the Committee data structure.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/AuthorityPublicKeyBytes"
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "next_epoch_protocol_version": {
            "description": "The protocol version that is in effect during the epoch that starts immediately after this checkpoint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProtocolVersion"
              }
            ]
          }
        }
      },
      "Event": {
        "oneOf": [
          {
            "description": "Move-specific event",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "object",
                "required": [
                  "bcs",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "type"
                ],
                "properties": {
                  "bcs": {
                    "$ref": "#/components/schemas/Base64"
                  },
                  "fields": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/MoveStruct"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "moveEvent"
                ]
              }
            }
          },
          {
            "description": "Module published",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "object",
                "required": [
                  "digest",
                  "packageId",
                  "sender",
                  "version"
                ],
                "properties": {
                  "digest": {
                    "$ref": "#/components/schemas/ObjectDigest"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "publish"
                ]
              }
            }
          },
          {
            "description": "Coin balance changing event",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "object",
                "required": [
                  "amount",
                  "changeType",
                  "coinObjectId",
                  "coinType",
                  "owner",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "amount": {
                    "type": "integer",
                    "format": "int128"
                  },
                  "changeType": {
                    "$ref": "#/components/schemas/BalanceChangeType"
                  },
                  "coinObjectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "coinType": {
                    "type": "string"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "coinBalanceChange"
                ]
              }
            }
          },
          {
            "description": "Epoch change",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "type": {
                "type": "string",
                "enum": [
                  "epochChange"
                ]
              }
            }
          },
          {
            "description": "New checkpoint",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "type": {
                "type": "string",
                "enum": [
                  "checkpoint"
                ]
              }
            }
          },
          {
            "description": "Transfer objects to new address / wrap in another object / coin",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "recipient",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "recipient": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "transferObject"
                ]
              }
            }
          },
          {
            "description": "Object mutated.",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "mutateObject"
                ]
              }
            }
          },
          {
            "description": "Delete object",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "object",
                "required": [
                  "objectId",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "deleteObject"
                ]
              }
            }
          },
          {
            "description": "New object creation",
            "type": "object",
            "required": [
              "content",
              "type"
            ],
            "properties": {
              "content": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "recipient",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "recipient": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "newObject"
                ]
              }
            }
          }
        ]
      },
      "EventEnvelope": {
        "type": "object",
        "required": [
          "event",
          "id",
          "timestamp",
          "txDigest"
        ],
        "properties": {
          "event": {
            "description": "Specific event type",
            "allOf": [
              {
                "$ref": "#/components/schemas/Event"
              }
            ]
          },
          "id": {
            "description": "Sequential event ID, ie (transaction seq number, event seq number). 1) Serves as a unique event ID for each fullnode 2) Also serves to sequence events for the purposes of pagination and querying. A higher id is an event seen later by that fullnode. This ID is the \"cursor\" for event querying.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EventID"
              }
            ]
          },
          "timestamp": {
            "description": "UTC timestamp in milliseconds since epoch (1/1/1970)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "txDigest": {
            "description": "Transaction digest of associated transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ]
          }
        }
      },
      "EventFilter": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Package"
            ],
            "properties": {
              "Package": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Module"
            ],
            "properties": {
              "Module": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Move StructTag string value of the event type e.g. `0x2::devnet_nft::MintNFTEvent`",
            "type": "object",
            "required": [
              "MoveEventType"
            ],
            "properties": {
              "MoveEventType": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MoveEventField"
            ],
            "properties": {
              "MoveEventField": {
                "type": "object",
                "required": [
                  "path",
                  "value"
                ],
                "properties": {
                  "path": {
                    "type": "string"
                  },
                  "value": true
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SenderAddress"
            ],
            "properties": {
              "SenderAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "EventType"
            ],
            "properties": {
              "EventType": {
                "$ref": "#/components/schemas/EventType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ObjectId"
            ],
            "properties": {
              "ObjectId": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "All"
            ],
            "properties": {
              "All": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Any"
            ],
            "properties": {
              "Any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "And"
            ],
            "properties": {
              "And": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Or"
            ],
            "properties": {
              "Or": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventID": {
        "description": "Unique ID of a Sui Event, the ID is a combination of tx seq number and event seq number, the ID is local to this particular fullnode and will be different from other fullnode.",
        "type": "object",
        "required": [
          "eventSeq",
          "txDigest"
        ],
        "properties": {
          "eventSeq": {
            "type": "integer",
            "format": "int64"
          },
          "txDigest": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      },
      "EventQuery": {
        "oneOf": [
          {
            "description": "Return all events.",
            "type": "string",
            "enum": [
              "All"
            ]
          },
          {
            "description": "Return events emitted by the given transaction.",
            "type": "object",
            "required": [
              "Transaction"
            ],
            "properties": {
              "Transaction": {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in a specified Move module",
            "type": "object",
            "required": [
              "MoveModule"
            ],
            "properties": {
              "MoveModule": {
                "type": "object",
                "required": [
                  "module",
                  "package"
                ],
                "properties": {
                  "module": {
                    "description": "the module name",
                    "type": "string"
                  },
                  "package": {
                    "description": "the Move package ID",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ObjectID"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events with the given move event struct name",
            "type": "object",
            "required": [
              "MoveEvent"
            ],
            "properties": {
              "MoveEvent": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "EventType"
            ],
            "properties": {
              "EventType": {
                "$ref": "#/components/schemas/EventType"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by sender address.",
            "type": "object",
            "required": [
              "Sender"
            ],
            "properties": {
              "Sender": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by recipient address.",
            "type": "object",
            "required": [
              "Recipient"
            ],
            "properties": {
              "Recipient": {
                "$ref": "#/components/schemas/Owner"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events associated with the given object",
            "type": "object",
            "required": [
              "Object"
            ],
            "properties": {
              "Object": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in [start_time, end_time] interval",
            "type": "object",
            "required": [
              "TimeRange"
            ],
            "properties": {
              "TimeRange": {
                "type": "object",
                "required": [
                  "endTime",
                  "startTime"
                ],
                "properties": {
                  "endTime": {
                    "description": "right endpoint of time interval, milliseconds since epoch, exclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "startTime": {
                    "description": "left endpoint of time interval, milliseconds since epoch, inclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventType": {
        "description": "Auto-generated discriminant enum variants",
        "oneOf": [
          {
            "description": "Transaction level event Move-specific event",
            "type": "string",
            "enum": [
              "MoveEvent"
            ]
          },
          {
            "description": "Module published",
            "type": "string",
            "enum": [
              "Publish"
            ]
          },
          {
            "description": "Coin balance changing event",
            "type": "string",
            "enum": [
              "CoinBalanceChange"
            ]
          },
          {
            "description": "Epoch change",
            "type": "string",
            "enum": [
              "EpochChange"
            ]
          },
          {
            "description": "New checkpoint",
            "type": "string",
            "enum": [
              "Checkpoint"
            ]
          },
          {
            "description": "Object level event Transfer objects to new address / wrap in another object",
            "type": "string",
            "enum": [
              "TransferObject"
            ]
          },
          {
            "description": "Object level event Object mutated.",
            "type": "string",
            "enum": [
              "MutateObject"
            ]
          },
          {
            "description": "Delete object",
            "type": "string",
            "enum": [
              "DeleteObject"
            ]
          },
          {
            "description": "New object creation",
            "type": "string",
            "enum": [
              "NewObject"
            ]
          }
        ]
      },
      "ExecuteTransactionRequestType": {
        "type": "string",
        "enum": [
          "WaitForEffectsCert",
          "WaitForLocalExecution"
        ]
      },
      "ExecutionStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "success"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error",
              "status"
            ],
            "properties": {
              "error": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "failure"
                ]
              }
            }
          }
        ]
      },
      "GasCostSummary": {
        "type": "object",
        "required": [
          "computationCost",
          "storageCost",
          "storageRebate"
        ],
        "properties": {
          "computationCost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageCost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageRebate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "GasData": {
        "type": "object",
        "required": [
          "budget",
          "owner",
          "payment",
          "price"
        ],
        "properties": {
          "budget": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "owner": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "payment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "price": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "GenericSignature": {
        "description": "Due to the incompatibility of [enum Signature] (which dispatches a trait that assumes signature and pubkey bytes for verification), here we add a wrapper enum where member can just implement a lightweight [trait AuthenticatorTrait]. This way MultiSig (and future Authenticators) can implement its own `verify`.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MultiSig"
            ],
            "properties": {
              "MultiSig": {
                "$ref": "#/components/schemas/MultiSig"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Signature"
            ],
            "properties": {
              "Signature": {
                "$ref": "#/components/schemas/Signature"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GetPastObjectRequest": {
        "type": "object",
        "required": [
          "objectId",
          "version"
        ],
        "properties": {
          "objectId": {
            "description": "the ID of the queried object",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "version": {
            "description": "the version of the queried object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "Hex": {
        "description": "Hex string encoding.",
        "type": "string"
      },
      "InputObjectKind": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MovePackage"
            ],
            "properties": {
              "MovePackage": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ImmOrOwnedMoveObject"
            ],
            "properties": {
              "ImmOrOwnedMoveObject": {
                "$ref": "#/components/schemas/ObjectRef"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SharedMoveObject"
            ],
            "properties": {
              "SharedMoveObject": {
                "type": "object",
                "required": [
                  "id",
                  "initial_shared_version"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "initial_shared_version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  },
                  "mutable": {
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MoveCallParams": {
        "type": "object",
        "required": [
          "arguments",
          "function",
          "module",
          "packageObjectId"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "packageObjectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "typeArguments": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        }
      },
      "MoveFunctionArgType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Pure"
            ]
          },
          {
            "type": "object",
            "required": [
              "Object"
            ],
            "properties": {
              "Object": {
                "$ref": "#/components/schemas/ObjectValueKind"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MovePackage": {
        "type": "object",
        "required": [
          "disassembled"
        ],
        "properties": {
          "disassembled": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "MoveStruct": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "object",
            "required": [
              "fields",
              "type"
            ],
            "properties": {
              "fields": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/MoveValue"
                }
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MoveValue"
            }
          }
        ]
      },
      "MoveValue": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/SuiAddress"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "string"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            }
          },
          {
            "$ref": "#/components/schemas/MoveStruct"
          },
          {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MoveValue"
              },
              {
                "type": "null"
              }
            ]
          }
        ]
      },
      "MultiSig": {
        "description": "The struct that contains signatures and public keys necessary for authenticating a MultiSig.",
        "type": "object",
        "required": [
          "bitmap",
          "multisig_pk",
          "sigs"
        ],
        "properties": {
          "bitmap": {
            "description": "A bitmap that indicates the position of which public key the signature should be authenticated with.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          },
          "multisig_pk": {
            "description": "The public key encoded with each public key with its signature scheme used along with the corresponding weight.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiSigPublicKey"
              }
            ]
          },
          "sigs": {
            "description": "The plain signature encoded with signature scheme.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompressedSignature"
            }
          }
        }
      },
      "MultiSigPublicKey": {
        "description": "The struct that contains the public key used for authenticating a MultiSig.",
        "type": "object",
        "required": [
          "pk_map",
          "threshold"
        ],
        "properties": {
          "pk_map": {
            "description": "A list of public key and its corresponding weight.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/PublicKey"
                },
                {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "threshold": {
            "description": "If the total weight of the public keys corresponding to verified signatures is larger than threshold, the MultiSig is verified.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        }
      },
      "ObjectData": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "version"
        ],
        "properties": {
          "bcs": {
            "description": "Move object content or package content in BCS, default to be None unless SuiObjectDataOptions.showBcs is set to true",
            "anyOf": [
              {
                "$ref": "#/components/schemas/RawData"
              },
              {
                "type": "null"
              }
            ]
          },
          "content": {
            "description": "Move object content or package content, default to be None unless SuiObjectDataOptions.showContent is set to true",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          },
          "digest": {
            "description": "Base64 string representing the object digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectDigest"
              }
            ]
          },
          "display": {
            "description": "The Display metadata for frontend UI rendering, default to be None unless SuiObjectDataOptions.showContent is set to true This can also be None if the struct type does not have Display defined See more details in <https://forums.sui.io/t/nft-object-display-proposal/4872>",
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            }
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "owner": {
            "description": "The owner of this object. Default to be None unless SuiObjectDataOptions.showOwner is set to true",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Owner"
              },
              {
                "type": "null"
              }
            ]
          },
          "previousTransaction": {
            "description": "The digest of the transaction that created or last mutated this object. Default to be None unless SuiObjectDataOptions.showPreviousTransaction is set to true",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              },
              {
                "type": "null"
              }
            ]
          },
          "storageRebate": {
            "description": "The amount of SUI we would rebate if this object gets deleted. This number is re-calculated each time the object is mutated based on the present storage gas price.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "type": {
            "description": "The type of the object. Default to be None unless SuiObjectDataOptions.showType is set to true",
            "type": [
              "string",
              "null"
            ]
          },
          "version": {
            "description": "Object version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ObjectDataOptions": {
        "type": "object",
        "properties": {
          "showBcs": {
            "description": "Whether to show the content in BCS format. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showContent": {
            "description": "Whether to show the content(i.e., package content or Move struct content) of the object. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showDisplay": {
            "description": "Whether to show the Display metadata of the object for frontend rendering. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showOwner": {
            "description": "Whether to show the owner of the object. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showPreviousTransaction": {
            "description": "Whether to show the previous transaction digest of the object. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showStorageRebate": {
            "description": "Whether to show the storage rebate of the object. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showType": {
            "description": "Whether to show the type of the object. Default to be False",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "ObjectDigest": {
        "$ref": "#/components/schemas/Sha3Digest"
      },
      "ObjectID": {
        "$ref": "#/components/schemas/Hex"
      },
      "ObjectInfo": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "owner",
          "previousTransaction",
          "type",
          "version"
        ],
        "properties": {
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "previousTransaction": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "ObjectRead": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectData"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Exists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "status": {
                "type": "string",
                "enum": [
                  "NotExists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectRef"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Deleted"
                ]
              }
            }
          }
        ]
      },
      "ObjectRef": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "version"
        ],
        "properties": {
          "digest": {
            "description": "Base64 string representing the object digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectDigest"
              }
            ]
          },
          "objectId": {
            "description": "Hex code as string representing the object id",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "version": {
            "description": "Object version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ObjectValueKind": {
        "type": "string",
        "enum": [
          "ByImmutableReference",
          "ByMutableReference",
          "ByValue"
        ]
      },
      "OwnedObjectRef": {
        "type": "object",
        "required": [
          "owner",
          "reference"
        ],
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "reference": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        }
      },
      "Owner": {
        "oneOf": [
          {
            "description": "Object is exclusively owned by a single address, and is mutable.",
            "type": "object",
            "required": [
              "AddressOwner"
            ],
            "properties": {
              "AddressOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is exclusively owned by a single object, and is mutable. The object ID is converted to SuiAddress as SuiAddress is universal.",
            "type": "object",
            "required": [
              "ObjectOwner"
            ],
            "properties": {
              "ObjectOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is shared, can be used by any address, and is mutable.",
            "type": "object",
            "required": [
              "Shared"
            ],
            "properties": {
              "Shared": {
                "type": "object",
                "required": [
                  "initial_shared_version"
                ],
                "properties": {
                  "initial_shared_version": {
                    "description": "The version at which the object became shared",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SequenceNumber"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is immutable, and hence ownership doesn't matter.",
            "type": "string",
            "enum": [
              "Immutable"
            ]
          }
        ]
      },
      "Page_for_Coin_and_ObjectID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_DynamicFieldInfo_and_ObjectID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DynamicFieldInfo"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_EventEnvelope_and_EventID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventEnvelope"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EventID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_TransactionResponse_and_TransactionDigest": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionResponse"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "ProtocolVersion": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "PublicKey": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519"
            ],
            "properties": {
              "Ed25519": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1"
            ],
            "properties": {
              "Secp256k1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1"
            ],
            "properties": {
              "Secp256r1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RPCTransactionRequestParams": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "transferObjectRequestParams"
            ],
            "properties": {
              "transferObjectRequestParams": {
                "$ref": "#/components/schemas/TransferObjectParams"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "moveCallRequestParams"
            ],
            "properties": {
              "moveCallRequestParams": {
                "$ref": "#/components/schemas/MoveCallParams"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RawData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bcsBytes",
              "dataType",
              "hasPublicTransfer",
              "type",
              "version"
            ],
            "properties": {
              "bcsBytes": {
                "$ref": "#/components/schemas/Base64"
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "moveObject"
                ]
              },
              "hasPublicTransfer": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dataType",
              "id",
              "moduleMap",
              "version"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "package"
                ]
              },
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "moduleMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Base64"
                }
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          }
        ]
      },
      "Result_of_Array_of_SuiExecutionResult_or_String": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SuiExecutionResult"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Secp256k1SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "Secp256r1SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "SequenceNumber": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "Sha3Digest": {
        "description": "A representation of a SHA3-256 Digest",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base58"
          }
        ]
      },
      "Signature": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519SuiSignature"
            ],
            "properties": {
              "Ed25519SuiSignature": {
                "$ref": "#/components/schemas/Ed25519SuiSignature"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1SuiSignature"
            ],
            "properties": {
              "Secp256k1SuiSignature": {
                "$ref": "#/components/schemas/Secp256k1SuiSignature"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1SuiSignature"
            ],
            "properties": {
              "Secp256r1SuiSignature": {
                "$ref": "#/components/schemas/Secp256r1SuiSignature"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Stake": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "Pending"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "estimatedReward",
              "status"
            ],
            "properties": {
              "estimatedReward": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "status": {
                "type": "string",
                "enum": [
                  "Active"
                ]
              }
            }
          }
        ],
        "required": [
          "principal",
          "stakeActiveEpoch",
          "stakeRequestEpoch",
          "stakedSuiId"
        ],
        "properties": {
          "principal": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "stakeActiveEpoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "stakeRequestEpoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "stakedSuiId": {
            "description": "ID of the StakedSui receipt object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          }
        }
      },
      "SuiAddress": {
        "$ref": "#/components/schemas/Hex"
      },
      "SuiArgument": {
        "description": "An argument to a programmable transaction command",
        "oneOf": [
          {
            "description": "The gas coin. The gas coin can only be used by-ref, except for with `TransferObjects`, which can use it by-value.",
            "type": "string",
            "enum": [
              "GasCoin"
            ]
          },
          {
            "description": "One of the input objects or primitive values (from `ProgrammableTransaction` inputs)",
            "type": "object",
            "required": [
              "Input"
            ],
            "properties": {
              "Input": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The result of another command (from `ProgrammableTransaction` commands)",
            "type": "object",
            "required": [
              "Result"
            ],
            "properties": {
              "Result": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Like a `Result` but it accesses a nested result. Currently, the only usage of this is to access a value from a Move call with multiple return values.",
            "type": "object",
            "required": [
              "NestedResult"
            ],
            "properties": {
              "NestedResult": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0.0
                  },
                  {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0.0
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiCoinMetadata": {
        "type": "object",
        "required": [
          "decimals",
          "description",
          "name",
          "symbol"
        ],
        "properties": {
          "decimals": {
            "description": "Number of decimal places the coin uses.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "description": {
            "description": "Description of the token",
            "type": "string"
          },
          "iconUrl": {
            "description": "URL for the token logo",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "description": "Object id for the CoinMetadata object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "description": "Name for the token",
            "type": "string"
          },
          "symbol": {
            "description": "Symbol for the token",
            "type": "string"
          }
        }
      },
      "SuiCommand": {
        "description": "A single command in a programmable transaction.",
        "oneOf": [
          {
            "description": "A call to either an entry or a public Move function",
            "type": "object",
            "required": [
              "MoveCall"
            ],
            "properties": {
              "MoveCall": {
                "$ref": "#/components/schemas/SuiProgrammableMoveCall"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "`(Vec<forall T:key+store. T>, address)` It sends n-objects to the specified address. These objects must have store (public transfer) and either the previous owner must be an address or the object must be newly created.",
            "type": "object",
            "required": [
              "TransferObjects"
            ],
            "properties": {
              "TransferObjects": {
                "type": "array",
                "items": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiArgument"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "description": "`(&mut Coin<T>, u64)` -> `Coin<T>` It splits off some amount into a new coin",
            "type": "object",
            "required": [
              "SplitCoin"
            ],
            "properties": {
              "SplitCoin": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  },
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "description": "`(&mut Coin<T>, Vec<Coin<T>>)` It merges n-coins into the first coin",
            "type": "object",
            "required": [
              "MergeCoins"
            ],
            "properties": {
              "MergeCoins": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiArgument"
                    }
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Publishes a Move package",
            "type": "object",
            "required": [
              "Publish"
            ],
            "properties": {
              "Publish": {
                "$ref": "#/components/schemas/MovePackage"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Upgrades a Move package",
            "type": "object",
            "required": [
              "Upgrade"
            ],
            "properties": {
              "Upgrade": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/MovePackage"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ObjectID"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  }
                ],
                "maxItems": 3,
                "minItems": 3
              }
            },
            "additionalProperties": false
          },
          {
            "description": "`forall T: Vec<T> -> vector<T>` Given n-values of the same type, it constructs a vector. For non objects or an empty vector, the type tag must be specified.",
            "type": "object",
            "required": [
              "MakeMoveVec"
            ],
            "properties": {
              "MakeMoveVec": {
                "type": "array",
                "items": [
                  {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiArgument"
                    }
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiExecutionResult": {
        "type": "object",
        "properties": {
          "mutableReferenceOutputs": {
            "description": "The value of any arguments that were mutably borrowed. Non-mut borrowed values are not included",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/SuiArgument"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                {
                  "$ref": "#/components/schemas/TypeTag"
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          },
          "returnValues": {
            "description": "The return values from the command",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                {
                  "$ref": "#/components/schemas/TypeTag"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "SuiJsonValue": {},
      "SuiMoveAbility": {
        "type": "string",
        "enum": [
          "Copy",
          "Drop",
          "Store",
          "Key"
        ]
      },
      "SuiMoveAbilitySet": {
        "type": "object",
        "required": [
          "abilities"
        ],
        "properties": {
          "abilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbility"
            }
          }
        }
      },
      "SuiMoveModuleId": {
        "type": "object",
        "required": [
          "address",
          "name"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SuiMoveNormalizedField": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SuiMoveNormalizedType"
          }
        }
      },
      "SuiMoveNormalizedFunction": {
        "type": "object",
        "required": [
          "isEntry",
          "parameters",
          "return",
          "typeParameters",
          "visibility"
        ],
        "properties": {
          "isEntry": {
            "type": "boolean"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "typeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbilitySet"
            }
          },
          "visibility": {
            "$ref": "#/components/schemas/SuiMoveVisibility"
          }
        }
      },
      "SuiMoveNormalizedModule": {
        "type": "object",
        "required": [
          "address",
          "exposedFunctions",
          "fileFormatVersion",
          "friends",
          "name",
          "structs"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "exposedFunctions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
            }
          },
          "fileFormatVersion": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveModuleId"
            }
          },
          "name": {
            "type": "string"
          },
          "structs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
            }
          }
        }
      },
      "SuiMoveNormalizedStruct": {
        "type": "object",
        "required": [
          "abilities",
          "fields",
          "typeParameters"
        ],
        "properties": {
          "abilities": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedField"
            }
          },
          "typeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveStructTypeParameter"
            }
          }
        }
      },
      "SuiMoveNormalizedType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Bool",
              "U8",
              "U16",
              "U32",
              "U64",
              "U128",
              "U256",
              "Address",
              "Signer"
            ]
          },
          {
            "type": "object",
            "required": [
              "Struct"
            ],
            "properties": {
              "Struct": {
                "type": "object",
                "required": [
                  "address",
                  "module",
                  "name",
                  "typeArguments"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "module": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "typeArguments": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiMoveNormalizedType"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Vector"
            ],
            "properties": {
              "Vector": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "TypeParameter"
            ],
            "properties": {
              "TypeParameter": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Reference"
            ],
            "properties": {
              "Reference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MutableReference"
            ],
            "properties": {
              "MutableReference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiMoveStructTypeParameter": {
        "type": "object",
        "required": [
          "constraints",
          "isPhantom"
        ],
        "properties": {
          "constraints": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "isPhantom": {
            "type": "boolean"
          }
        }
      },
      "SuiMoveVisibility": {
        "type": "string",
        "enum": [
          "Private",
          "Public",
          "Friend"
        ]
      },
      "SuiProgrammableMoveCall": {
        "description": "The command for calling a Move function, either an entry function or a public function (which cannot return references).",
        "type": "object",
        "required": [
          "function",
          "module",
          "package"
        ],
        "properties": {
          "arguments": {
            "description": "The arguments to the function.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiArgument"
            }
          },
          "function": {
            "description": "The function to be called.",
            "type": "string"
          },
          "module": {
            "description": "The specific module in the package containing the function.",
            "type": "string"
          },
          "package": {
            "description": "The package containing the module and function.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "type_arguments": {
            "description": "The type arguments to the function.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SuiSystemStateSummary": {
        "description": "This is the JSON-RPC type for the SUI system state object. It flattens all fields to make them top-level fields such that it as minimum dependencies to the internal data structures of the SUI system state type.",
        "type": "object",
        "required": [
          "activeValidators",
          "atRiskValidators",
          "epoch",
          "epochStartTimestampMs",
          "governanceStartEpoch",
          "inactivePoolsId",
          "inactivePoolsSize",
          "pendingActiveValidatorsId",
          "pendingActiveValidatorsSize",
          "pendingRemovals",
          "protocolVersion",
          "referenceGasPrice",
          "safeMode",
          "stakeSubsidyBalance",
          "stakeSubsidyCurrentEpochAmount",
          "stakeSubsidyEpochCounter",
          "stakingPoolMappingsId",
          "stakingPoolMappingsSize",
          "storageFund",
          "systemStateVersion",
          "totalStake",
          "validatorCandidatesId",
          "validatorCandidatesSize",
          "validatorReportRecords"
        ],
        "properties": {
          "activeValidators": {
            "description": "The list of active validators in the current epoch.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiValidatorSummary"
            }
          },
          "atRiskValidators": {
            "description": "Map storing the number of epochs for which each validator has been below the low stake threshold.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/SuiAddress"
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "epoch": {
            "description": "The current epoch ID, starting from 0.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epochStartTimestampMs": {
            "description": "Unix timestamp of the current epoch start",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "governanceStartEpoch": {
            "description": "The starting epoch in which various on-chain governance features take effect.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "inactivePoolsId": {
            "description": "ID of the object that maps from a staking pool ID to the inactive validator that has that pool as its staking pool.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "inactivePoolsSize": {
            "description": "Number of inactive staking pools.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "pendingActiveValidatorsId": {
            "description": "ID of the object that contains the list of new validators that will join at the end of the epoch.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "pendingActiveValidatorsSize": {
            "description": "Number of new validators that will join at the end of the epoch.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "pendingRemovals": {
            "description": "Removal requests from the validators. Each element is an index pointing to `active_validators`.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "protocolVersion": {
            "description": "The current protocol version, starting from 1.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "referenceGasPrice": {
            "description": "The reference gas price for the current epoch.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "safeMode": {
            "description": "Whether the system is running in a downgraded safe mode due to a non-recoverable bug. This is set whenever we failed to execute advance_epoch, and ended up executing advance_epoch_safe_mode. It can be reset once we are able to successfully execute advance_epoch.",
            "type": "boolean"
          },
          "stakeSubsidyBalance": {
            "description": "Balance of SUI set aside for stake subsidies that will be drawn down over time.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "stakeSubsidyCurrentEpochAmount": {
            "description": "The amount of stake subsidy to be drawn down per epoch. This amount decays and decreases over time.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "stakeSubsidyEpochCounter": {
            "description": "This counter may be different from the current epoch number if in some epochs we decide to skip the subsidy.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "stakingPoolMappingsId": {
            "description": "ID of the object that maps from staking pool's ID to the sui address of a validator.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "stakingPoolMappingsSize": {
            "description": "Number of staking pool mappings.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageFund": {
            "description": "The storage fund balance.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "systemStateVersion": {
            "description": "The current version of the system state data structure type.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "totalStake": {
            "description": "Total amount of stake from all active validators at the beginning of the epoch.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "validatorCandidatesId": {
            "description": "ID of the object that stores preactive validators, mapping their addresses to their `Validator` structs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "validatorCandidatesSize": {
            "description": "Number of preactive validators.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "validatorReportRecords": {
            "description": "A map storing the records of validator reporting each other.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/SuiAddress"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuiAddress"
                  }
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "SuiTransactionBuilderMode": {
        "oneOf": [
          {
            "description": "Regular Sui Transactions that are committed on chain",
            "type": "string",
            "enum": [
              "Commit"
            ]
          },
          {
            "description": "Simulated transaction that allows calling any Move function with arbitrary values.",
            "type": "string",
            "enum": [
              "DevInspect"
            ]
          }
        ]
      },
      "SuiValidatorSummary": {
        "description": "This is the JSON-RPC type for the SUI validator. It flattens all inner structures to top-level fields so that they are decoupled from the internal definitions.",
        "type": "object",
        "required": [
          "commissionRate",
          "description",
          "exchangeRatesId",
          "exchangeRatesSize",
          "gasPrice",
          "imageUrl",
          "name",
          "netAddress",
          "networkPubkeyBytes",
          "nextEpochCommissionRate",
          "nextEpochGasPrice",
          "nextEpochStake",
          "operationCapId",
          "p2pAddress",
          "pendingPoolTokenWithdraw",
          "pendingStake",
          "pendingTotalSuiWithdraw",
          "poolTokenBalance",
          "primaryAddress",
          "projectUrl",
          "proofOfPossessionBytes",
          "protocolPubkeyBytes",
          "rewardsPool",
          "stakingPoolId",
          "stakingPoolSuiBalance",
          "suiAddress",
          "votingPower",
          "workerAddress",
          "workerPubkeyBytes"
        ],
        "properties": {
          "commissionRate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "description": {
            "type": "string"
          },
          "exchangeRatesId": {
            "description": "ID of the exchange rate table object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "exchangeRatesSize": {
            "description": "Number of exchange rates in the table.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gasPrice": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "imageUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "netAddress": {
            "type": "string"
          },
          "networkPubkeyBytes": {
            "$ref": "#/components/schemas/Base58"
          },
          "nextEpochCommissionRate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "nextEpochGasPrice": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "nextEpochNetAddress": {
            "default": null,
            "type": [
              "string",
              "null"
            ]
          },
          "nextEpochNetworkPubkeyBytes": {
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Base58"
              },
              {
                "type": "null"
              }
            ]
          },
          "nextEpochP2pAddress": {
            "default": null,
            "type": [
              "string",
              "null"
            ]
          },
          "nextEpochPrimaryAddress": {
            "default": null,
            "type": [
              "string",
              "null"
            ]
          },
          "nextEpochProofOfPossession": {
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Base58"
              },
              {
                "type": "null"
              }
            ]
          },
          "nextEpochProtocolPubkeyBytes": {
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Base58"
              },
              {
                "type": "null"
              }
            ]
          },
          "nextEpochStake": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "nextEpochWorkerAddress": {
            "default": null,
            "type": [
              "string",
              "null"
            ]
          },
          "nextEpochWorkerPubkeyBytes": {
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Base58"
              },
              {
                "type": "null"
              }
            ]
          },
          "operationCapId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "p2pAddress": {
            "type": "string"
          },
          "pendingPoolTokenWithdraw": {
            "description": "Pending pool token withdrawn during the current epoch, emptied at epoch boundaries.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "pendingStake": {
            "description": "Pending stake amount for this epoch.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "pendingTotalSuiWithdraw": {
            "description": "Pending stake withdrawn during the current epoch, emptied at epoch boundaries.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "poolTokenBalance": {
            "description": "Total number of pool tokens issued by the pool.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "primaryAddress": {
            "type": "string"
          },
          "projectUrl": {
            "type": "string"
          },
          "proofOfPossessionBytes": {
            "$ref": "#/components/schemas/Base58"
          },
          "protocolPubkeyBytes": {
            "$ref": "#/components/schemas/Base58"
          },
          "rewardsPool": {
            "description": "The epoch stake rewards will be added here at the end of each epoch.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "stakingPoolActivationEpoch": {
            "description": "The epoch at which this pool became active.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "stakingPoolDeactivationEpoch": {
            "description": "The epoch at which this staking pool ceased to be active. `None` = {pre-active, active},",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "stakingPoolId": {
            "description": "ID of the staking pool object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "stakingPoolSuiBalance": {
            "description": "The total number of SUI tokens in this pool.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "suiAddress": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "votingPower": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "workerAddress": {
            "type": "string"
          },
          "workerPubkeyBytes": {
            "$ref": "#/components/schemas/Base58"
          }
        }
      },
      "Supply": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "Transaction": {
        "type": "object",
        "required": [
          "data",
          "txSignatures"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TransactionData"
          },
          "txSignatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericSignature"
            }
          }
        }
      },
      "TransactionBytes": {
        "type": "object",
        "required": [
          "gas",
          "inputObjects",
          "txBytes"
        ],
        "properties": {
          "gas": {
            "description": "the gas objects to be used",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "inputObjects": {
            "description": "objects to be used in this transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputObjectKind"
            }
          },
          "txBytes": {
            "description": "BCS serialized transaction data bytes without its type tag, as base-64 encoded string.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          }
        }
      },
      "TransactionData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "gasData",
              "messageVersion",
              "sender",
              "transaction"
            ],
            "properties": {
              "gasData": {
                "$ref": "#/components/schemas/GasData"
              },
              "messageVersion": {
                "type": "string",
                "enum": [
                  "v1"
                ]
              },
              "sender": {
                "$ref": "#/components/schemas/SuiAddress"
              },
              "transaction": {
                "$ref": "#/components/schemas/TransactionKind"
              }
            }
          }
        ]
      },
      "TransactionDigest": {
        "description": "A transaction will have a (unique) digest.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Sha3Digest"
          }
        ]
      },
      "TransactionEffects": {
        "oneOf": [
          {
            "description": "The response from processing a transaction or a certified transaction",
            "type": "object",
            "required": [
              "executedEpoch",
              "gasObject",
              "gasUsed",
              "messageVersion",
              "status",
              "transactionDigest"
            ],
            "properties": {
              "created": {
                "description": "ObjectRef and owner of new objects created.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnedObjectRef"
                }
              },
              "deleted": {
                "description": "Object Refs of objects now deleted (the old refs).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              },
              "dependencies": {
                "description": "The set of transaction digests this transaction depends on.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionDigest"
                }
              },
              "eventsDigest": {
                "description": "The digest of the events emitted during execution, can be None if the transaction does not emit any event.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TransactionEventsDigest"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "executedEpoch": {
                "description": "The epoch when this transaction was executed.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "gasObject": {
                "description": "The updated gas object reference. Have a dedicated field for convenient access. It's also included in mutated.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnedObjectRef"
                  }
                ]
              },
              "gasUsed": {
                "$ref": "#/components/schemas/GasCostSummary"
              },
              "messageVersion": {
                "type": "string",
                "enum": [
                  "v1"
                ]
              },
              "mutated": {
                "description": "ObjectRef and owner of mutated objects, including gas object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnedObjectRef"
                }
              },
              "sharedObjects": {
                "description": "The object references of the shared objects used in this transaction. Empty if no shared objects were used.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              },
              "status": {
                "description": "The status of the execution",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExecutionStatus"
                  }
                ]
              },
              "transactionDigest": {
                "description": "The transaction digest",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionDigest"
                  }
                ]
              },
              "unwrapped": {
                "description": "ObjectRef and owner of objects that are unwrapped in this transaction. Unwrapped objects are objects that were wrapped into other objects in the past, and just got extracted out.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnedObjectRef"
                }
              },
              "unwrappedThenDeleted": {
                "description": "Object refs of objects previously wrapped in other objects but now deleted.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              },
              "wrapped": {
                "description": "Object refs of objects now wrapped in other objects.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              }
            }
          }
        ]
      },
      "TransactionEventsDigest": {
        "$ref": "#/components/schemas/Sha3Digest"
      },
      "TransactionFilter": {
        "oneOf": [
          {
            "description": "Query by move function.",
            "type": "object",
            "required": [
              "MoveFunction"
            ],
            "properties": {
              "MoveFunction": {
                "type": "object",
                "required": [
                  "package"
                ],
                "properties": {
                  "function": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "module": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "package": {
                    "$ref": "#/components/schemas/ObjectID"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by input object.",
            "type": "object",
            "required": [
              "InputObject"
            ],
            "properties": {
              "InputObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by mutated object.",
            "type": "object",
            "required": [
              "MutatedObject"
            ],
            "properties": {
              "MutatedObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by sender address.",
            "type": "object",
            "required": [
              "FromAddress"
            ],
            "properties": {
              "FromAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by recipient address.",
            "type": "object",
            "required": [
              "ToAddress"
            ],
            "properties": {
              "ToAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransactionKind": {
        "oneOf": [
          {
            "description": "A system transaction that will update epoch information on-chain.",
            "type": "object",
            "required": [
              "computation_charge",
              "epoch",
              "epoch_start_timestamp_ms",
              "kind",
              "storage_charge",
              "storage_rebate"
            ],
            "properties": {
              "computation_charge": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "epoch": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "epoch_start_timestamp_ms": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "kind": {
                "type": "string",
                "enum": [
                  "ChangeEpoch"
                ]
              },
              "storage_charge": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "storage_rebate": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          {
            "description": "A system transaction used for initializing the initial state of the chain.",
            "type": "object",
            "required": [
              "kind",
              "objects"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "Genesis"
                ]
              },
              "objects": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectID"
                }
              }
            }
          },
          {
            "description": "A system transaction marking the start of a series of transactions scheduled as part of a checkpoint",
            "type": "object",
            "required": [
              "commit_timestamp_ms",
              "epoch",
              "kind",
              "round"
            ],
            "properties": {
              "commit_timestamp_ms": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "epoch": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "kind": {
                "type": "string",
                "enum": [
                  "ConsensusCommitPrologue"
                ]
              },
              "round": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          },
          {
            "description": "A series of commands where the results of one command can be used in future commands",
            "type": "object",
            "required": [
              "commands",
              "inputs",
              "kind"
            ],
            "properties": {
              "commands": {
                "description": "The commands to be executed sequentially. A failure in any command will result in the failure of the entire transaction.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SuiCommand"
                }
              },
              "inputs": {
                "description": "Input objects or primitive values",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SuiJsonValue"
                }
              },
              "kind": {
                "type": "string",
                "enum": [
                  "ProgrammableTransaction"
                ]
              }
            }
          }
        ]
      },
      "TransactionResponse": {
        "type": "object",
        "required": [
          "digest"
        ],
        "properties": {
          "checkpoint": {
            "description": "The checkpoint number when this transaction was included and hence finalized. This is only returned in the read api, not in the transaction execution api.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "confirmedLocalExecution": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "digest": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "effects": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionEffects"
              },
              {
                "type": "null"
              }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "events": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "timestampMs": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "transaction": {
            "description": "Transaction input data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Transaction"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "TransactionResponseOptions": {
        "type": "object",
        "properties": {
          "showEffects": {
            "description": "Whether to show transaction effects. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showEvents": {
            "description": "Whether to show transaction events. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showInput": {
            "description": "Whether to show transaction input data. Default to be False",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "TransactionResponseQuery": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "If None, no filter will be applied",
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "options": {
            "description": "config which fields to include in the response, by default only digest is included",
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionResponseOptions"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "TransferObjectParams": {
        "type": "object",
        "required": [
          "objectId",
          "recipient"
        ],
        "properties": {
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TypeTag": {
        "type": "string"
      }
    }
  }
}
