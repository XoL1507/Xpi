{
  "openrpc": "1.2.6",
  "info": {
    "title": "Sui JSON-RPC",
    "description": "Sui JSON-RPC API for interaction with Sui Full node.",
    "contact": {
      "name": "Mysten Labs",
      "url": "https://mystenlabs.com",
      "email": "build@mystenlabs.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"
    },
    "version": "1.1.0"
  },
  "methods": [
    {
      "name": "sui_devInspectTransactionBlock",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Runs the transaction in dev-inspect mode. Which allows for nearly any transaction (or Move call) with any arguments. Detailed results are provided, including both the transaction effects and any return values.",
      "params": [
        {
          "name": "sender_address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "tx_bytes",
          "description": "BCS encoded TransactionKind(as opposed to TransactionData, which include gasBudget and gasPrice)",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "gas_price",
          "description": "Gas is not charged, but gas usage is still calculated. Default to use reference gas price",
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        },
        {
          "name": "epoch",
          "description": "The epoch to perform the call. Will be set from the system state object if not provided",
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "DevInspectResults",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/DevInspectResults"
        }
      }
    },
    {
      "name": "sui_dryRunTransactionBlock",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Return transaction execution effects including the gas cost summary, while the effects are not committed to the chain.",
      "params": [
        {
          "name": "tx_bytes",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      ],
      "result": {
        "name": "DryRunTransactionBlockResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/DryRunTransactionBlockResponse"
        }
      }
    },
    {
      "name": "sui_executeTransactionBlock",
      "tags": [
        {
          "name": "Write API"
        }
      ],
      "description": "Execute the transaction and wait for results if desired. Request types: 1. WaitForEffectsCert: waits for TransactionEffectsCert and then return to client.     This mode is a proxy for transaction finality. 2. WaitForLocalExecution: waits for TransactionEffectsCert and make sure the node     executed the transaction locally before returning the client. The local execution     makes sure this node is aware of this transaction when client fires subsequent queries.     However if the node fails to execute the transaction locally in a timely manner,     a bool type in the response is set to false to indicated the case. request_type is default to be `WaitForEffectsCert` unless options.show_events or options.show_effects is true",
      "params": [
        {
          "name": "tx_bytes",
          "description": "BCS serialized transaction data bytes without its type tag, as base-64 encoded string.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "signatures",
          "description": "A list of signatures (`flag || signature || pubkey` bytes, as base-64 encoded string). Signature is committed to the intent message of the transaction data, as base-64 encoded string.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/TransactionBlockResponseOptions"
          }
        },
        {
          "name": "request_type",
          "description": "The request type, derived from `SuiTransactionBlockResponseOptions` if None",
          "schema": {
            "$ref": "#/components/schemas/ExecuteTransactionRequestType"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionBlockResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockResponse"
        }
      },
      "examples": [
        {
          "name": "Execute a transaction with serialized signatures.",
          "params": [
            {
              "name": "tx_bytes",
              "value": "AAACACBqEB6aOvXIBwES+Ahkizbvv43uihqC3kbZUE6WoRCKFwEAjvdvVsOZYzousxC8qRJOXy84znOeqsu2YAaIgE4HhEgCAAAAAAAAACB9w3+ufZMpihJFwxtCBojBaGy00TVtFxgN2C6TpIPFqwEBAQEBAAEAAAS0l6kWtGVmCaf6gnoJGE1vR2gdO6dM4NejbGSysfiHAZ+Q9/hmzCnfsdpjc86U+dldylpA9OF2mRjuv5+64AvTAgAAAAAAAAAgjleHL0UiRGjh/BfIFHCJ3EMY/dQA22c2TvNQyVJnbYUEtJepFrRlZgmn+oJ6CRhNb0doHTunTODXo2xksrH4hwoAAAAAAAAAAC0xAQAAAAAA"
            },
            {
              "name": "signatures",
              "value": [
                "AEZc4UMAoxzWtp+i1dvyOgmy+Eeb/5ZNwO5dpHBqX5Rt36+HhYnBby8asFU4b0i7TjQZGgLahT8w3NQUfk0NUQnqvbuA0Q1Bqu4RHV3JPpqmH+C527hWJGUBOZN1j9sg8w=="
              ]
            },
            {
              "name": "options",
              "value": {
                "showInput": true,
                "showRawInput": true,
                "showEffects": true,
                "showEvents": true,
                "showObjectChanges": true,
                "showBalanceChanges": true
              }
            },
            {
              "name": "request_type",
              "value": "WaitForLocalExecution"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "digest": "BgSFSEFYbCrVUJJtHFeoLmLJi8jDf1CpC2o8S33HjeDJ",
              "transaction": {
                "data": {
                  "messageVersion": "v1",
                  "transaction": {
                    "kind": "ProgrammableTransaction",
                    "inputs": [
                      {
                        "type": "pure",
                        "valueType": "address",
                        "value": "0x6a101e9a3af5c8070112f808648b36efbf8dee8a1a82de46d9504e96a1108a17"
                      },
                      {
                        "type": "object",
                        "objectType": "immOrOwnedObject",
                        "objectId": "0x8ef76f56c399633a2eb310bca9124e5f2f38ce739eaacbb6600688804e078448",
                        "version": "2",
                        "digest": "9Tvs1pGrMbNv7kkr1PoKLsWamyQpaFz5UWbL2AQ1ezk2"
                      }
                    ],
                    "transactions": [
                      {
                        "TransferObjects": [
                          [
                            {
                              "Input": 1
                            }
                          ],
                          {
                            "Input": 0
                          }
                        ]
                      }
                    ]
                  },
                  "sender": "0x04b497a916b4656609a7fa827a09184d6f47681d3ba74ce0d7a36c64b2b1f887",
                  "gasData": {
                    "payment": [
                      {
                        "objectId": "0x9f90f7f866cc29dfb1da6373ce94f9d95dca5a40f4e1769918eebf9fbae00bd3",
                        "version": 2,
                        "digest": "AaeJbTYkUuyromsivxzkoxSkHt7pCESTyQG7xz6nbQ2G"
                      }
                    ],
                    "owner": "0x04b497a916b4656609a7fa827a09184d6f47681d3ba74ce0d7a36c64b2b1f887",
                    "price": "10",
                    "budget": "20000000"
                  }
                },
                "txSignatures": [
                  "AEZc4UMAoxzWtp+i1dvyOgmy+Eeb/5ZNwO5dpHBqX5Rt36+HhYnBby8asFU4b0i7TjQZGgLahT8w3NQUfk0NUQnqvbuA0Q1Bqu4RHV3JPpqmH+C527hWJGUBOZN1j9sg8w=="
                ]
              },
              "rawTransaction": "AQAAAAAAAgAgahAemjr1yAcBEvgIZIs277+N7ooagt5G2VBOlqEQihcBAI73b1bDmWM6LrMQvKkSTl8vOM5znqrLtmAGiIBOB4RIAgAAAAAAAAAgfcN/rn2TKYoSRcMbQgaIwWhstNE1bRcYDdguk6SDxasBAQEBAQABAAAEtJepFrRlZgmn+oJ6CRhNb0doHTunTODXo2xksrH4hwGfkPf4Zswp37HaY3POlPnZXcpaQPThdpkY7r+fuuAL0wIAAAAAAAAAII5Xhy9FIkRo4fwXyBRwidxDGP3UANtnNk7zUMlSZ22FBLSXqRa0ZWYJp/qCegkYTW9HaB07p0zg16NsZLKx+IcKAAAAAAAAAAAtMQEAAAAAAAFhAEZc4UMAoxzWtp+i1dvyOgmy+Eeb/5ZNwO5dpHBqX5Rt36+HhYnBby8asFU4b0i7TjQZGgLahT8w3NQUfk0NUQnqvbuA0Q1Bqu4RHV3JPpqmH+C527hWJGUBOZN1j9sg8w==",
              "effects": {
                "messageVersion": "v1",
                "status": {
                  "status": "success"
                },
                "executedEpoch": "0",
                "gasUsed": {
                  "computationCost": "100",
                  "storageCost": "100",
                  "storageRebate": "10",
                  "nonRefundableStorageFee": "0"
                },
                "transactionDigest": "9agZ3azEMgMqxrDVG8P4GddELfWag2HhimEkpjixHhGE",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0x04b497a916b4656609a7fa827a09184d6f47681d3ba74ce0d7a36c64b2b1f887"
                    },
                    "reference": {
                      "objectId": "0x9f90f7f866cc29dfb1da6373ce94f9d95dca5a40f4e1769918eebf9fbae00bd3",
                      "version": 2,
                      "digest": "AaeJbTYkUuyromsivxzkoxSkHt7pCESTyQG7xz6nbQ2G"
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0x6a101e9a3af5c8070112f808648b36efbf8dee8a1a82de46d9504e96a1108a17"
                    },
                    "reference": {
                      "objectId": "0x8ef76f56c399633a2eb310bca9124e5f2f38ce739eaacbb6600688804e078448",
                      "version": 2,
                      "digest": "9Tvs1pGrMbNv7kkr1PoKLsWamyQpaFz5UWbL2AQ1ezk2"
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0x04b497a916b4656609a7fa827a09184d6f47681d3ba74ce0d7a36c64b2b1f887"
                  },
                  "reference": {
                    "objectId": "0x9f90f7f866cc29dfb1da6373ce94f9d95dca5a40f4e1769918eebf9fbae00bd3",
                    "version": 2,
                    "digest": "AaeJbTYkUuyromsivxzkoxSkHt7pCESTyQG7xz6nbQ2G"
                  }
                },
                "eventsDigest": "816hEv4WAW2reK9xkf11PeHiaZJrp7PQT9oGJZhdf9TN"
              },
              "objectChanges": [
                {
                  "type": "transferred",
                  "sender": "0x04b497a916b4656609a7fa827a09184d6f47681d3ba74ce0d7a36c64b2b1f887",
                  "recipient": {
                    "AddressOwner": "0x6a101e9a3af5c8070112f808648b36efbf8dee8a1a82de46d9504e96a1108a17"
                  },
                  "objectType": "0x0000000000000000000000000000000000000000000000000000000000000002::example::Object",
                  "objectId": "0x8ef76f56c399633a2eb310bca9124e5f2f38ce739eaacbb6600688804e078448",
                  "version": "2",
                  "digest": "7PsBHpUW6yfGNov2WrbVafLjgT9nYziQ3gVDbRq6zTbF"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "sui_getCheckpoint",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return a checkpoint",
      "params": [
        {
          "name": "id",
          "description": "Checkpoint identifier, can use either checkpoint digest, or checkpoint sequence number as input.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CheckpointId"
          }
        }
      ],
      "result": {
        "name": "Checkpoint",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Checkpoint"
        }
      },
      "examples": [
        {
          "name": "Get checkpoint information for the checkpoint ID in the request.",
          "params": [
            {
              "name": "id",
              "value": "1000"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "epoch": "5000",
              "sequenceNumber": "1000",
              "digest": "AbKbyf26XFmbBt9eg5KJ9tHtgsTysbsTe7Wpy6QKQfJG",
              "networkTotalTransactions": "792385",
              "previousDigest": "CAbHZCsbX6vsqtCqjhfNdT8XJFcuYkHVGz2hXg54goQk",
              "epochRollingGasCostSummary": {
                "computationCost": "0",
                "storageCost": "0",
                "storageRebate": "0",
                "nonRefundableStorageFee": "0"
              },
              "timestampMs": "1676911928",
              "transactions": [
                "4oDBSrdDb2UM59Td5EyPhYP1h1TSphnjfSpoLnWKaM5o"
              ],
              "checkpointCommitments": [],
              "validatorSignature": "wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            }
          }
        }
      ]
    },
    {
      "name": "sui_getCheckpoints",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return paginated list of checkpoints",
      "params": [
        {
          "name": "cursor",
          "description": "An optional paging cursor. If provided, the query will start from the next item after the specified cursor. Default to start from the first item if not specified.",
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        },
        {
          "name": "limit",
          "description": "Maximum item returned per page, default to [QUERY_MAX_RESULT_LIMIT_CHECKPOINTS] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "descending_order",
          "description": "query result ordering, default to false (ascending order), oldest record first.",
          "required": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "CheckpointPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_Checkpoint_and_BigInt_for_uint64"
        }
      },
      "examples": [
        {
          "name": "Get a paginated list in descending order of all checkpoints starting at the provided cursor. Each page of results has a maximum number of checkpoints set by the provided limit.",
          "params": [
            {
              "name": "cursor",
              "value": "1004"
            },
            {
              "name": "limit",
              "value": 4
            },
            {
              "name": "descending_order",
              "value": false
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                {
                  "epoch": "5000",
                  "sequenceNumber": "1005",
                  "digest": "styH61ffb69JzKQYs1u6GS6e6aeyybqcq6VPRumYGFe",
                  "networkTotalTransactions": "792385",
                  "previousDigest": "7QHLXheBaMGoygNFs39Fnd2jFxxNefABpZmEceVHmWkC",
                  "epochRollingGasCostSummary": {
                    "computationCost": "0",
                    "storageCost": "0",
                    "storageRebate": "0",
                    "nonRefundableStorageFee": "0"
                  },
                  "timestampMs": "1676911928",
                  "transactions": [
                    "A1NZtyS73EN5N4jBA8Q7fMcvmJ3voaGkUEuFnjyXA5HC"
                  ],
                  "checkpointCommitments": [],
                  "validatorSignature": "wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                },
                {
                  "epoch": "5000",
                  "sequenceNumber": "1006",
                  "digest": "Gn2vgirgUYdYi27A5s6HfhTVbCoZGeDewUhJDWGTkbg5",
                  "networkTotalTransactions": "792385",
                  "previousDigest": "64QD1k3u8x1Jo86PftHbKo6sdnbB2WBtv7p4RGUtQ93N",
                  "epochRollingGasCostSummary": {
                    "computationCost": "0",
                    "storageCost": "0",
                    "storageRebate": "0",
                    "nonRefundableStorageFee": "0"
                  },
                  "timestampMs": "1676911928",
                  "transactions": [
                    "86BWNNkDbt3nspEopq2dZocBBGbYzkWnUZGgV6x4TaLf"
                  ],
                  "checkpointCommitments": [],
                  "validatorSignature": "wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                },
                {
                  "epoch": "5000",
                  "sequenceNumber": "1007",
                  "digest": "5Y6qoLUtnzD5wkruAbZ2pQb58SSwDQmo1sFVHfpZLKqf",
                  "networkTotalTransactions": "792385",
                  "previousDigest": "8LbMGFpmDF2w59sJxMQefQqSvNh33AaHvZM21dpJ8f8f",
                  "epochRollingGasCostSummary": {
                    "computationCost": "0",
                    "storageCost": "0",
                    "storageRebate": "0",
                    "nonRefundableStorageFee": "0"
                  },
                  "timestampMs": "1676911928",
                  "transactions": [
                    "9QSSuYoovaF46KykXtKncXdjHptf5f2ZQXjcd1i6CczX"
                  ],
                  "checkpointCommitments": [],
                  "validatorSignature": "wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                },
                {
                  "epoch": "5000",
                  "sequenceNumber": "1008",
                  "digest": "8mjZb81hqCXxgn4dcdiSZY8SJa8dibsv63nckprhxXTy",
                  "networkTotalTransactions": "792385",
                  "previousDigest": "AoM3zdrp12i4Hq6uwPGd5AvkbUnYHxrZgQz5J3oWunpg",
                  "epochRollingGasCostSummary": {
                    "computationCost": "0",
                    "storageCost": "0",
                    "storageRebate": "0",
                    "nonRefundableStorageFee": "0"
                  },
                  "timestampMs": "1676911928",
                  "transactions": [
                    "7egeSqNr6tNeSexCABFpQhTohKXdwb25xTKVt2PQ7XEm"
                  ],
                  "checkpointCommitments": [],
                  "validatorSignature": "wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                }
              ],
              "nextCursor": "1008",
              "hasNextPage": true
            }
          }
        }
      ]
    },
    {
      "name": "sui_getEvents",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return transaction events.",
      "params": [
        {
          "name": "transaction_digest",
          "description": "the event query criteria.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEvent>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Event"
          }
        }
      },
      "examples": [
        {
          "name": "Return the events the transaction in the request emits.",
          "params": [
            {
              "name": "transaction_digest",
              "value": "11a72GCQ5hGNpWGh2QhQkkusTEGS6EDqifJqxr7nSYX"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                {
                  "id": {
                    "txDigest": "11a72GCQ5hGNpWGh2QhQkkusTEGS6EDqifJqxr7nSYX",
                    "eventSeq": "0"
                  },
                  "packageId": "0xc54ab30a3d9adc07c1429c4d6bbecaf9457c9af77a91f631760853934d383634",
                  "transactionModule": "test_module",
                  "sender": "0xbcf7c32655009a61f1de0eae420a2e4ae1bb772ab2dd5d5a7dfa949c0ef06908",
                  "type": "0x0000000000000000000000000000000000000000000000000000000000000009::test::TestEvent",
                  "parsedJson": {
                    "test": "example value"
                  },
                  "bcs": ""
                }
              ],
              "nextCursor": {
                "txDigest": "11a72GCQ5hGNpWGh2QhQkkusTEGS6EDqifJqxr7nSYX",
                "eventSeq": "5"
              },
              "hasNextPage": false
            }
          }
        }
      ]
    },
    {
      "name": "sui_getLatestCheckpointSequenceNumber",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the sequence number of the latest checkpoint that has been executed",
      "params": [],
      "result": {
        "name": "BigInt<u64>",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/BigInt_for_uint64"
        }
      },
      "examples": [
        {
          "name": "Get the sequence number for the latest checkpoint.",
          "params": [],
          "result": {
            "name": "Result",
            "value": "507021"
          }
        }
      ]
    },
    {
      "name": "sui_getLoadedChildObjects",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "params": [
        {
          "name": "digest",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      ],
      "result": {
        "name": "SuiLoadedChildObjectsResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/LoadedChildObjectsResponse"
        }
      }
    },
    {
      "name": "sui_getMoveFunctionArgTypes",
      "tags": [
        {
          "name": "Move Utils"
        }
      ],
      "description": "Return the argument types of a Move function, based on normalized Type.",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Vec<MoveFunctionArgType>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MoveFunctionArgType"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveFunction",
      "tags": [
        {
          "name": "Move Utils"
        }
      ],
      "description": "Return a structured representation of Move function",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedFunction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModule",
      "tags": [
        {
          "name": "Move Utils"
        }
      ],
      "description": "Return a structured representation of Move module",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedModule",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedModule"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModulesByPackage",
      "tags": [
        {
          "name": "Move Utils"
        }
      ],
      "description": "Return structured representations of all modules in the given package",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "BTreeMap<String,SuiMoveNormalizedModule>",
        "required": true,
        "schema": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/SuiMoveNormalizedModule"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveStruct",
      "tags": [
        {
          "name": "Move Utils"
        }
      ],
      "description": "Return a structured representation of Move struct",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "struct_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedStruct",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
        }
      }
    },
    {
      "name": "sui_getObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the object information for a specified object",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/ObjectDataOptions"
          }
        }
      ],
      "result": {
        "name": "SuiObjectResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiObjectResponse"
        }
      },
      "examples": [
        {
          "name": "Get Object data for the ID in the request.",
          "params": [
            {
              "name": "object_id",
              "value": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809"
            },
            {
              "name": "options",
              "value": {
                "showType": true,
                "showOwner": true,
                "showPreviousTransaction": true,
                "showDisplay": false,
                "showContent": true,
                "showBcs": false,
                "showStorageRebate": true
              }
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": {
                "objectId": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809",
                "version": "1",
                "digest": "33K5ZXJ3RyubvYaHuEnQ1QXmmbhgtrFwp199dnEbL4n7",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0xc8ec1d5b84dd6289e193b9f88de4a994358c9f856135236c3e75a925e1c77ac3"
                },
                "previousTransaction": "5PLgmQye6rraDYqpV3npV6H1cUXoJZgJh1dPCyRa3WCv",
                "storageRebate": "100",
                "content": {
                  "dataType": "moveObject",
                  "type": "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
                  "hasPublicTransfer": true,
                  "fields": {
                    "balance": "100000000",
                    "id": {
                      "id": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_getTotalTransactionBlocks",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the total number of transactions known to the server.",
      "params": [],
      "result": {
        "name": "BigInt<u64>",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/BigInt_for_uint64"
        }
      },
      "examples": [
        {
          "name": "Get total number of transactions on the network.",
          "params": [],
          "result": {
            "name": "Result",
            "value": "2451485"
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionBlock",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the transaction response object.",
      "params": [
        {
          "name": "digest",
          "description": "the digest of the queried transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/TransactionBlockResponseOptions"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionBlockResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockResponse"
        }
      },
      "examples": [
        {
          "name": "Return the transaction response object for specified transaction digest.",
          "params": [
            {
              "name": "digest",
              "value": "oKtFZjL99EZ2K3TLPRarpZN8gz9xReMkiNf4Tjja2no"
            },
            {
              "name": "options",
              "value": {
                "showInput": true,
                "showRawInput": false,
                "showEffects": true,
                "showEvents": true,
                "showObjectChanges": false,
                "showBalanceChanges": false
              }
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "digest": "oKtFZjL99EZ2K3TLPRarpZN8gz9xReMkiNf4Tjja2no",
              "transaction": {
                "data": {
                  "messageVersion": "v1",
                  "transaction": {
                    "kind": "ProgrammableTransaction",
                    "inputs": [
                      {
                        "type": "pure",
                        "valueType": "address",
                        "value": "0x8196d048b7a6d04c8edc89579d86fd3fc90c52f9a14c6b812b94fe613c5bcebb"
                      },
                      {
                        "type": "object",
                        "objectType": "immOrOwnedObject",
                        "objectId": "0x5eeb1d449e2516166d57d71fdeb154d0dc9ecdb7b30057d0a932684cac352cdc",
                        "version": "2",
                        "digest": "GK4NxEKSrK88XkPNeuBqtJYPmU9yMTWMD7K9TdU4ybKN"
                      }
                    ],
                    "transactions": [
                      {
                        "TransferObjects": [
                          [
                            {
                              "Input": 1
                            }
                          ],
                          {
                            "Input": 0
                          }
                        ]
                      }
                    ]
                  },
                  "sender": "0x82179c57d5895babfb655cd62e8e886a53334b5e7be9be658eb759cc35e3fc66",
                  "gasData": {
                    "payment": [
                      {
                        "objectId": "0x1a3e898029d024eec1d44c6af5e2facded84d03b5373514f16e3d66e00081051",
                        "version": 2,
                        "digest": "7nDZ5J4VyvYGUbX2f6mQdhkr3RFrb3vZqui1ogoyApD9"
                      }
                    ],
                    "owner": "0x82179c57d5895babfb655cd62e8e886a53334b5e7be9be658eb759cc35e3fc66",
                    "price": "10",
                    "budget": "20000000"
                  }
                },
                "txSignatures": [
                  "ABTTP4JUSxqOQTlysdS30HzkMc3DOwJqlBJstqn2EwW0SKtvoGIoxFEbmTqIS+UYSemveVGJ+S6BijQQVS97cwxtCxWrqsEEHAdxoMDwblU5hyWJ8H3zFvk20E2fO5bzHA=="
                ]
              },
              "rawTransaction": "AQAAAAAAAgAggZbQSLem0EyO3IlXnYb9P8kMUvmhTGuBK5T+YTxbzrsBAF7rHUSeJRYWbVfXH96xVNDcns23swBX0KkyaEysNSzcAgAAAAAAAAAg43+UGkUe+CCaD7+/G1SbK7Jrjq7giJUUbfJ7w88mEMEBAQEBAQABAACCF5xX1Ylbq/tlXNYujohqUzNLXnvpvmWOt1nMNeP8ZgEaPomAKdAk7sHUTGr14vrN7YTQO1NzUU8W49ZuAAgQUQIAAAAAAAAAIGS7c6HtWLLBiwy/N3eS4gbmuA1NXupk4ucFY7FYkCbEghecV9WJW6v7ZVzWLo6IalMzS1576b5ljrdZzDXj/GYKAAAAAAAAAAAtMQEAAAAAAAFhABTTP4JUSxqOQTlysdS30HzkMc3DOwJqlBJstqn2EwW0SKtvoGIoxFEbmTqIS+UYSemveVGJ+S6BijQQVS97cwxtCxWrqsEEHAdxoMDwblU5hyWJ8H3zFvk20E2fO5bzHA==",
              "effects": {
                "messageVersion": "v1",
                "status": {
                  "status": "success"
                },
                "executedEpoch": "0",
                "gasUsed": {
                  "computationCost": "100",
                  "storageCost": "100",
                  "storageRebate": "10",
                  "nonRefundableStorageFee": "0"
                },
                "transactionDigest": "6AyFnAuKAKCqm1cD94EyGzBqJCDDJ716ojjmsKF2rqoi",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0x82179c57d5895babfb655cd62e8e886a53334b5e7be9be658eb759cc35e3fc66"
                    },
                    "reference": {
                      "objectId": "0x1a3e898029d024eec1d44c6af5e2facded84d03b5373514f16e3d66e00081051",
                      "version": 2,
                      "digest": "7nDZ5J4VyvYGUbX2f6mQdhkr3RFrb3vZqui1ogoyApD9"
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0x8196d048b7a6d04c8edc89579d86fd3fc90c52f9a14c6b812b94fe613c5bcebb"
                    },
                    "reference": {
                      "objectId": "0x5eeb1d449e2516166d57d71fdeb154d0dc9ecdb7b30057d0a932684cac352cdc",
                      "version": 2,
                      "digest": "GK4NxEKSrK88XkPNeuBqtJYPmU9yMTWMD7K9TdU4ybKN"
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0x82179c57d5895babfb655cd62e8e886a53334b5e7be9be658eb759cc35e3fc66"
                  },
                  "reference": {
                    "objectId": "0x1a3e898029d024eec1d44c6af5e2facded84d03b5373514f16e3d66e00081051",
                    "version": 2,
                    "digest": "7nDZ5J4VyvYGUbX2f6mQdhkr3RFrb3vZqui1ogoyApD9"
                  }
                },
                "eventsDigest": "9BQobwxQvJ1JxSXNn8v8htZPTu8FEzJJGgcD4kgLUuMd"
              },
              "objectChanges": [
                {
                  "type": "transferred",
                  "sender": "0x82179c57d5895babfb655cd62e8e886a53334b5e7be9be658eb759cc35e3fc66",
                  "recipient": {
                    "AddressOwner": "0x8196d048b7a6d04c8edc89579d86fd3fc90c52f9a14c6b812b94fe613c5bcebb"
                  },
                  "objectType": "0x0000000000000000000000000000000000000000000000000000000000000002::example::Object",
                  "objectId": "0x5eeb1d449e2516166d57d71fdeb154d0dc9ecdb7b30057d0a932684cac352cdc",
                  "version": "2",
                  "digest": "64UQ3a7m1mjWuzgyGoH8RnMyPGDN4XYTC9dS4qiSfdK4"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "sui_multiGetObjects",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the object data for a list of objects",
      "params": [
        {
          "name": "object_ids",
          "description": "the IDs of the queried objects",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/ObjectDataOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiObjectResponse>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/SuiObjectResponse"
          }
        }
      },
      "examples": [
        {
          "name": "Get objects by IDs.",
          "params": [
            {
              "name": "object_ids",
              "value": [
                "0x63f69f47ae954dec65295231e0d2c7c86867fcc63161269c5c0c73b02229486b",
                "0xb3bc9237ba6fca019438a9737cf156ae6d907beaa3a49db57bdfdb3557e6d405",
                "0x869ecbccf96ef8bab1b6d79fbfa88548f44d295a385dc3544d211411b865e8bc",
                "0x5e43f21e9e57f4abe3c702649d3a7dd0d4f062dbcfc3bf73f5861945592222ff",
                "0x54a448a78d3a56220f798398dde66eab0a52124e2d53af3bef7959609efa5176"
              ]
            },
            {
              "name": "options",
              "value": {
                "showType": true,
                "showOwner": true,
                "showPreviousTransaction": true,
                "showDisplay": false,
                "showContent": true,
                "showBcs": false,
                "showStorageRebate": true
              }
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "data": {
                  "objectId": "0x63f69f47ae954dec65295231e0d2c7c86867fcc63161269c5c0c73b02229486b",
                  "version": "1",
                  "digest": "3pySHS3Cwy3urMWUPp6N5MVLnt96ajN69vG7vpBjzmFh",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "owner": {
                    "AddressOwner": "0xbaff319209dfb8299ced3b860903799749b09c3bfb031aca53e7ddf1dba61bb6"
                  },
                  "previousTransaction": "21nFLRUHV4KvcGyCP7saQXHoAJq8yGT4UoHk9RG2B7RB",
                  "storageRebate": "100",
                  "content": {
                    "dataType": "moveObject",
                    "type": "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
                    "hasPublicTransfer": true,
                    "fields": {
                      "balance": "100000000",
                      "id": {
                        "id": "0x63f69f47ae954dec65295231e0d2c7c86867fcc63161269c5c0c73b02229486b"
                      }
                    }
                  }
                }
              },
              {
                "data": {
                  "objectId": "0xb3bc9237ba6fca019438a9737cf156ae6d907beaa3a49db57bdfdb3557e6d405",
                  "version": "1",
                  "digest": "6RWpimPbn7MiimtAiwMoNpzPgJAdcFgEYU76tNR3nPzd",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "owner": {
                    "AddressOwner": "0xcbf01c293a53e01457d65e92b5d8dd68d62ca040aba24f862a763851c54908cd"
                  },
                  "previousTransaction": "3qBJk6w86rePdymYuWhFudpqS2i2TsydYWYstrSCRxSz",
                  "storageRebate": "100",
                  "content": {
                    "dataType": "moveObject",
                    "type": "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
                    "hasPublicTransfer": true,
                    "fields": {
                      "balance": "100000000",
                      "id": {
                        "id": "0xb3bc9237ba6fca019438a9737cf156ae6d907beaa3a49db57bdfdb3557e6d405"
                      }
                    }
                  }
                }
              },
              {
                "data": {
                  "objectId": "0x869ecbccf96ef8bab1b6d79fbfa88548f44d295a385dc3544d211411b865e8bc",
                  "version": "1",
                  "digest": "2x77QMNgAtYA3vfUG2MRCh46pn6FgAw3P531F1zvZqGw",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "owner": {
                    "AddressOwner": "0x4f01f49186970c7cf61e1cc829cc0be747dfa99496428c65b2054ad7db1872b8"
                  },
                  "previousTransaction": "9cRMGV4fXXwwMyeNndbXX9GXJ28Q37NaFjo9pPAkPkkz",
                  "storageRebate": "100",
                  "content": {
                    "dataType": "moveObject",
                    "type": "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
                    "hasPublicTransfer": true,
                    "fields": {
                      "balance": "100000000",
                      "id": {
                        "id": "0x869ecbccf96ef8bab1b6d79fbfa88548f44d295a385dc3544d211411b865e8bc"
                      }
                    }
                  }
                }
              },
              {
                "data": {
                  "objectId": "0x5e43f21e9e57f4abe3c702649d3a7dd0d4f062dbcfc3bf73f5861945592222ff",
                  "version": "1",
                  "digest": "B9Nt57ooVUPUfVLneWKR6yXsgUdeKCZ7swTmemXSSsun",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "owner": {
                    "AddressOwner": "0x7b090ac21c8a3cf840abdc5b743da778808f8071df7c48ea3cc4ecc349c766ab"
                  },
                  "previousTransaction": "9esVvbmQ3pH6GDVJ9wRouewBzxGSctVn5h9Jj8K6c1Mr",
                  "storageRebate": "100",
                  "content": {
                    "dataType": "moveObject",
                    "type": "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
                    "hasPublicTransfer": true,
                    "fields": {
                      "balance": "100000000",
                      "id": {
                        "id": "0x5e43f21e9e57f4abe3c702649d3a7dd0d4f062dbcfc3bf73f5861945592222ff"
                      }
                    }
                  }
                }
              },
              {
                "data": {
                  "objectId": "0x54a448a78d3a56220f798398dde66eab0a52124e2d53af3bef7959609efa5176",
                  "version": "1",
                  "digest": "Hpv3QPqbwvUZ3u82nsBvn2Zc5JJj2d27WuzSWmjFYN7t",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "owner": {
                    "AddressOwner": "0x1ad155441a1b73bdaeecce7c56488b137d42c99fc38511ba4813dc57feb3f00e"
                  },
                  "previousTransaction": "AFsN32bnEYBPYd4ui5wAExJEqLUmhs4f4cnjo17c91uq",
                  "storageRebate": "100",
                  "content": {
                    "dataType": "moveObject",
                    "type": "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
                    "hasPublicTransfer": true,
                    "fields": {
                      "balance": "100000000",
                      "id": {
                        "id": "0x54a448a78d3a56220f798398dde66eab0a52124e2d53af3bef7959609efa5176"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_multiGetTransactionBlocks",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Returns an ordered list of transaction responses The method will throw an error if the input contains any duplicate or the input size exceeds QUERY_MAX_RESULT_LIMIT",
      "params": [
        {
          "name": "digests",
          "description": "A list of transaction digests.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          }
        },
        {
          "name": "options",
          "description": "config options to control which fields to fetch",
          "schema": {
            "$ref": "#/components/schemas/TransactionBlockResponseOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiTransactionBlockResponse>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TransactionBlockResponse"
          }
        }
      },
      "examples": [
        {
          "name": "Return the transaction data for specified digest.",
          "params": [
            {
              "name": "digests",
              "value": [
                "DwRWCvrkfauz95wTrfJxi3VSWdMZWCEtdPCiaZhcanZh",
                "DKbnodvxQShMzRBopBhmFkjWDesbfxFzPPzxZGAjLdww",
                "5geoz1TrEnV2pAA7B5ajgvLo6hHapfki3dJHRJEFBNfc"
              ]
            },
            {
              "name": "options",
              "value": {
                "showInput": true,
                "showRawInput": false,
                "showEffects": true,
                "showEvents": true,
                "showObjectChanges": false,
                "showBalanceChanges": false
              }
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "digest": "DwRWCvrkfauz95wTrfJxi3VSWdMZWCEtdPCiaZhcanZh",
                "transaction": {
                  "data": {
                    "messageVersion": "v1",
                    "transaction": {
                      "kind": "ProgrammableTransaction",
                      "inputs": [
                        {
                          "type": "pure",
                          "valueType": "address",
                          "value": "0xd6e4c0ad5ec4de2449c41ac819f9c162d4af78db04f5789cd4fca497d9d14703"
                        },
                        {
                          "type": "object",
                          "objectType": "immOrOwnedObject",
                          "objectId": "0x6b5ad50597c5faf4842f454b9b09c7524afb8e30e88e2f84077773b9572d766c",
                          "version": "2",
                          "digest": "3FiwvBCr7vJUrSa1wDuapfczD218uxymBACSz625vojt"
                        }
                      ],
                      "transactions": [
                        {
                          "TransferObjects": [
                            [
                              {
                                "Input": 1
                              }
                            ],
                            {
                              "Input": 0
                            }
                          ]
                        }
                      ]
                    },
                    "sender": "0xcdf1c97cb1a97f6a467db2b32dc8deab001db44968eb4d513b5e96a26a8d3f99",
                    "gasData": {
                      "payment": [
                        {
                          "objectId": "0x2fb30e765422178a6c146d85e49b53a4ac09b42e9036dd49b9c46a42692b1f20",
                          "version": 2,
                          "digest": "4SUrH3e9PNYtorid9WYHST4ExtYziAWF2qNfbcQGXyfc"
                        }
                      ],
                      "owner": "0xcdf1c97cb1a97f6a467db2b32dc8deab001db44968eb4d513b5e96a26a8d3f99",
                      "price": "10",
                      "budget": "20000000"
                    }
                  },
                  "txSignatures": [
                    "AEazvDbLghnbt6IgSnagyNcGOWxRBpMmB5b1nEAyFcG3ioR5yBxEn+HhLlFKcMhxcjoAd6ldsl16RG1r3N1Ifgaku/znSjrM4o7ihNslFlaGkCFdY5WcpqFauUzmNJpmlA=="
                  ]
                },
                "rawTransaction": "AQAAAAAAAgAg1uTArV7E3iRJxBrIGfnBYtSveNsE9Xic1Pykl9nRRwMBAGta1QWXxfr0hC9FS5sJx1JK+44w6I4vhAd3c7lXLXZsAgAAAAAAAAAgIXzvQ5XzESdQhO9bBUGBdH3e2Dz8VIeuIDYvsaXYmxcBAQEBAQABAADN8cl8sal/akZ9srMtyN6rAB20SWjrTVE7Xpaiao0/mQEvsw52VCIXimwUbYXkm1OkrAm0LpA23Um5xGpCaSsfIAIAAAAAAAAAIDMaEhXcN76CmPpK4+nh+poFmTacjKerqTBdxSWWpZ5fzfHJfLGpf2pGfbKzLcjeqwAdtElo601RO16WomqNP5kKAAAAAAAAAAAtMQEAAAAAAAFhAEazvDbLghnbt6IgSnagyNcGOWxRBpMmB5b1nEAyFcG3ioR5yBxEn+HhLlFKcMhxcjoAd6ldsl16RG1r3N1Ifgaku/znSjrM4o7ihNslFlaGkCFdY5WcpqFauUzmNJpmlA==",
                "effects": {
                  "messageVersion": "v1",
                  "status": {
                    "status": "success"
                  },
                  "executedEpoch": "0",
                  "gasUsed": {
                    "computationCost": "100",
                    "storageCost": "100",
                    "storageRebate": "10",
                    "nonRefundableStorageFee": "0"
                  },
                  "transactionDigest": "6wYAncei61SbsXjfJuREYWFJcwMvTt8vnZh7jECYgMu",
                  "mutated": [
                    {
                      "owner": {
                        "AddressOwner": "0xcdf1c97cb1a97f6a467db2b32dc8deab001db44968eb4d513b5e96a26a8d3f99"
                      },
                      "reference": {
                        "objectId": "0x2fb30e765422178a6c146d85e49b53a4ac09b42e9036dd49b9c46a42692b1f20",
                        "version": 2,
                        "digest": "4SUrH3e9PNYtorid9WYHST4ExtYziAWF2qNfbcQGXyfc"
                      }
                    },
                    {
                      "owner": {
                        "AddressOwner": "0xd6e4c0ad5ec4de2449c41ac819f9c162d4af78db04f5789cd4fca497d9d14703"
                      },
                      "reference": {
                        "objectId": "0x6b5ad50597c5faf4842f454b9b09c7524afb8e30e88e2f84077773b9572d766c",
                        "version": 2,
                        "digest": "3FiwvBCr7vJUrSa1wDuapfczD218uxymBACSz625vojt"
                      }
                    }
                  ],
                  "gasObject": {
                    "owner": {
                      "ObjectOwner": "0xcdf1c97cb1a97f6a467db2b32dc8deab001db44968eb4d513b5e96a26a8d3f99"
                    },
                    "reference": {
                      "objectId": "0x2fb30e765422178a6c146d85e49b53a4ac09b42e9036dd49b9c46a42692b1f20",
                      "version": 2,
                      "digest": "4SUrH3e9PNYtorid9WYHST4ExtYziAWF2qNfbcQGXyfc"
                    }
                  },
                  "eventsDigest": "CnLsjCisnSFWkuWp9qqTkoSQkfhS9F6xQGV2LHMeEBDv"
                },
                "objectChanges": [
                  {
                    "type": "transferred",
                    "sender": "0xcdf1c97cb1a97f6a467db2b32dc8deab001db44968eb4d513b5e96a26a8d3f99",
                    "recipient": {
                      "AddressOwner": "0xd6e4c0ad5ec4de2449c41ac819f9c162d4af78db04f5789cd4fca497d9d14703"
                    },
                    "objectType": "0x0000000000000000000000000000000000000000000000000000000000000002::example::Object",
                    "objectId": "0x6b5ad50597c5faf4842f454b9b09c7524afb8e30e88e2f84077773b9572d766c",
                    "version": "2",
                    "digest": "66Bhgq1W6nBRNNjS3DuWXuZyNJHBrUcwxQz4zUc9tkxZ"
                  }
                ]
              },
              {
                "digest": "DKbnodvxQShMzRBopBhmFkjWDesbfxFzPPzxZGAjLdww",
                "transaction": {
                  "data": {
                    "messageVersion": "v1",
                    "transaction": {
                      "kind": "ProgrammableTransaction",
                      "inputs": [
                        {
                          "type": "pure",
                          "valueType": "address",
                          "value": "0x92e30e8e1dc5061bbf38c199f22627e75ff9bf8c469ff03d000b917ca77792c4"
                        },
                        {
                          "type": "object",
                          "objectType": "immOrOwnedObject",
                          "objectId": "0x2209ab55b0202608150d2aaba7d0b2cc03df659954b577bd64996511a63b3292",
                          "version": "2",
                          "digest": "4DR9gcLsEacb1vX9D3ZxaZyME146pWTEgieKMcqHGbYC"
                        }
                      ],
                      "transactions": [
                        {
                          "TransferObjects": [
                            [
                              {
                                "Input": 1
                              }
                            ],
                            {
                              "Input": 0
                            }
                          ]
                        }
                      ]
                    },
                    "sender": "0x793e52965a70e089d4cb66487db3f129a1c180b168957d02cf24c6e36940e49f",
                    "gasData": {
                      "payment": [
                        {
                          "objectId": "0x9c9996406a6494afc93a8d44f19f048a85e4c7d60ec80a18bf158911a8315dea",
                          "version": 2,
                          "digest": "CJEJosr8ywVetzSgmN2QHfbCXg4E32dy5UJLwoR7c931"
                        }
                      ],
                      "owner": "0x793e52965a70e089d4cb66487db3f129a1c180b168957d02cf24c6e36940e49f",
                      "price": "10",
                      "budget": "20000000"
                    }
                  },
                  "txSignatures": [
                    "AID+evodBiU8SGY3IsUCK7fshQx+HD+HDAUgvuBbJTLTKq1fXxZvQLw/W3oIC/8LfYYHxanGQ8qXE9enumwCvgzAFJHipsemTEqF6eQduAyoQ0S1hIdH/l+Rsvd+d4xqxg=="
                  ]
                },
                "rawTransaction": "AQAAAAAAAgAgkuMOjh3FBhu/OMGZ8iYn51/5v4xGn/A9AAuRfKd3ksQBACIJq1WwICYIFQ0qq6fQsswD32WZVLV3vWSZZRGmOzKSAgAAAAAAAAAgL8FWLoAPo0W+hQGqCfrmP0cKZjNiTUaGrqsg3CN4+fEBAQEBAQABAAB5PlKWWnDgidTLZkh9s/EpocGAsWiVfQLPJMbjaUDknwGcmZZAamSUr8k6jUTxnwSKheTH1g7IChi/FYkRqDFd6gIAAAAAAAAAIKfaeewxbjqtwnttIcL/HCfQwmycF0OOhro1ogyopcHseT5Sllpw4InUy2ZIfbPxKaHBgLFolX0CzyTG42lA5J8KAAAAAAAAAAAtMQEAAAAAAAFhAID+evodBiU8SGY3IsUCK7fshQx+HD+HDAUgvuBbJTLTKq1fXxZvQLw/W3oIC/8LfYYHxanGQ8qXE9enumwCvgzAFJHipsemTEqF6eQduAyoQ0S1hIdH/l+Rsvd+d4xqxg==",
                "effects": {
                  "messageVersion": "v1",
                  "status": {
                    "status": "success"
                  },
                  "executedEpoch": "0",
                  "gasUsed": {
                    "computationCost": "100",
                    "storageCost": "100",
                    "storageRebate": "10",
                    "nonRefundableStorageFee": "0"
                  },
                  "transactionDigest": "6w12UGCyhcAAMhQqqh3X7Q4hHVsJewrB9NhjbziGxrQ7",
                  "mutated": [
                    {
                      "owner": {
                        "AddressOwner": "0x793e52965a70e089d4cb66487db3f129a1c180b168957d02cf24c6e36940e49f"
                      },
                      "reference": {
                        "objectId": "0x9c9996406a6494afc93a8d44f19f048a85e4c7d60ec80a18bf158911a8315dea",
                        "version": 2,
                        "digest": "CJEJosr8ywVetzSgmN2QHfbCXg4E32dy5UJLwoR7c931"
                      }
                    },
                    {
                      "owner": {
                        "AddressOwner": "0x92e30e8e1dc5061bbf38c199f22627e75ff9bf8c469ff03d000b917ca77792c4"
                      },
                      "reference": {
                        "objectId": "0x2209ab55b0202608150d2aaba7d0b2cc03df659954b577bd64996511a63b3292",
                        "version": 2,
                        "digest": "4DR9gcLsEacb1vX9D3ZxaZyME146pWTEgieKMcqHGbYC"
                      }
                    }
                  ],
                  "gasObject": {
                    "owner": {
                      "ObjectOwner": "0x793e52965a70e089d4cb66487db3f129a1c180b168957d02cf24c6e36940e49f"
                    },
                    "reference": {
                      "objectId": "0x9c9996406a6494afc93a8d44f19f048a85e4c7d60ec80a18bf158911a8315dea",
                      "version": 2,
                      "digest": "CJEJosr8ywVetzSgmN2QHfbCXg4E32dy5UJLwoR7c931"
                    }
                  },
                  "eventsDigest": "GJkjmkBDtig9ahD2WTZhfxFdfCfJyBV4RauindRNrsGG"
                },
                "objectChanges": [
                  {
                    "type": "transferred",
                    "sender": "0x793e52965a70e089d4cb66487db3f129a1c180b168957d02cf24c6e36940e49f",
                    "recipient": {
                      "AddressOwner": "0x92e30e8e1dc5061bbf38c199f22627e75ff9bf8c469ff03d000b917ca77792c4"
                    },
                    "objectType": "0x0000000000000000000000000000000000000000000000000000000000000002::example::Object",
                    "objectId": "0x2209ab55b0202608150d2aaba7d0b2cc03df659954b577bd64996511a63b3292",
                    "version": "2",
                    "digest": "6kwvRMKGTDfX4DH4FFGCiQBh1acaiEpWqNYVFu8Fo9bD"
                  }
                ]
              },
              {
                "digest": "5geoz1TrEnV2pAA7B5ajgvLo6hHapfki3dJHRJEFBNfc",
                "transaction": {
                  "data": {
                    "messageVersion": "v1",
                    "transaction": {
                      "kind": "ProgrammableTransaction",
                      "inputs": [
                        {
                          "type": "pure",
                          "valueType": "address",
                          "value": "0xc1c1d32a27103fcd457cd60a94838b84d41b7344f39832dd4f5fb5bdc06fc4e2"
                        },
                        {
                          "type": "object",
                          "objectType": "immOrOwnedObject",
                          "objectId": "0xa7b675e9b2f5749415c55996bb9d64a48cf227cd51ebf714d6a33167f44e88d3",
                          "version": "2",
                          "digest": "6rQmuiBBfgYwziNwTJd8C6XHFpqdCh3HpFNawCfNffoX"
                        }
                      ],
                      "transactions": [
                        {
                          "TransferObjects": [
                            [
                              {
                                "Input": 1
                              }
                            ],
                            {
                              "Input": 0
                            }
                          ]
                        }
                      ]
                    },
                    "sender": "0x27313743d21c6125cddc574110e5297a4c78012deecdd81fdf8b7e86c6b939b1",
                    "gasData": {
                      "payment": [
                        {
                          "objectId": "0x1323c206efc6f6beecf319500fa168a183ae34acbb98b7536dc35648dbd2f26f",
                          "version": 2,
                          "digest": "9tyDfaDfToVfN5nYGFExM6KdxtMw387tNatuPkyTCL8S"
                        }
                      ],
                      "owner": "0x27313743d21c6125cddc574110e5297a4c78012deecdd81fdf8b7e86c6b939b1",
                      "price": "10",
                      "budget": "20000000"
                    }
                  },
                  "txSignatures": [
                    "AM16QCzgNVlStYUgmttSacx9QzvEj1vSkC8sAdcFnbVrGQmHyjnHm6T/jOerM58jYw0inlIYXheHiugGyNx3jgMRulg7b73nUu3TRprbA5crjA2GNVy82lz1LzuQuUiKDQ=="
                  ]
                },
                "rawTransaction": "AQAAAAAAAgAgwcHTKicQP81FfNYKlIOLhNQbc0TzmDLdT1+1vcBvxOIBAKe2demy9XSUFcVZlrudZKSM8ifNUev3FNajMWf0TojTAgAAAAAAAAAgVvLGpL5vBY4meq444IJgx9UZ2GQYl0kMnE62dpyotqIBAQEBAQABAAAnMTdD0hxhJc3cV0EQ5Sl6THgBLe7N2B/fi36Gxrk5sQETI8IG78b2vuzzGVAPoWihg640rLuYt1Ntw1ZI29LybwIAAAAAAAAAIIQtrte5sP80Osiq8/2nUcNoV06i2LsUK6CnsQj1AjtzJzE3Q9IcYSXN3FdBEOUpekx4AS3uzdgf34t+hsa5ObEKAAAAAAAAAAAtMQEAAAAAAAFhAM16QCzgNVlStYUgmttSacx9QzvEj1vSkC8sAdcFnbVrGQmHyjnHm6T/jOerM58jYw0inlIYXheHiugGyNx3jgMRulg7b73nUu3TRprbA5crjA2GNVy82lz1LzuQuUiKDQ==",
                "effects": {
                  "messageVersion": "v1",
                  "status": {
                    "status": "success"
                  },
                  "executedEpoch": "0",
                  "gasUsed": {
                    "computationCost": "100",
                    "storageCost": "100",
                    "storageRebate": "10",
                    "nonRefundableStorageFee": "0"
                  },
                  "transactionDigest": "4vj52Sy63v8ZBX2WuoC389yxa7Q5ZDiBxke1oobEgETW",
                  "mutated": [
                    {
                      "owner": {
                        "AddressOwner": "0x27313743d21c6125cddc574110e5297a4c78012deecdd81fdf8b7e86c6b939b1"
                      },
                      "reference": {
                        "objectId": "0x1323c206efc6f6beecf319500fa168a183ae34acbb98b7536dc35648dbd2f26f",
                        "version": 2,
                        "digest": "9tyDfaDfToVfN5nYGFExM6KdxtMw387tNatuPkyTCL8S"
                      }
                    },
                    {
                      "owner": {
                        "AddressOwner": "0xc1c1d32a27103fcd457cd60a94838b84d41b7344f39832dd4f5fb5bdc06fc4e2"
                      },
                      "reference": {
                        "objectId": "0xa7b675e9b2f5749415c55996bb9d64a48cf227cd51ebf714d6a33167f44e88d3",
                        "version": 2,
                        "digest": "6rQmuiBBfgYwziNwTJd8C6XHFpqdCh3HpFNawCfNffoX"
                      }
                    }
                  ],
                  "gasObject": {
                    "owner": {
                      "ObjectOwner": "0x27313743d21c6125cddc574110e5297a4c78012deecdd81fdf8b7e86c6b939b1"
                    },
                    "reference": {
                      "objectId": "0x1323c206efc6f6beecf319500fa168a183ae34acbb98b7536dc35648dbd2f26f",
                      "version": 2,
                      "digest": "9tyDfaDfToVfN5nYGFExM6KdxtMw387tNatuPkyTCL8S"
                    }
                  },
                  "eventsDigest": "25HeYrYtey4ToAyrxCkjrnfa7rWesCj6J8bawy2MMTth"
                },
                "objectChanges": [
                  {
                    "type": "transferred",
                    "sender": "0x27313743d21c6125cddc574110e5297a4c78012deecdd81fdf8b7e86c6b939b1",
                    "recipient": {
                      "AddressOwner": "0xc1c1d32a27103fcd457cd60a94838b84d41b7344f39832dd4f5fb5bdc06fc4e2"
                    },
                    "objectType": "0x0000000000000000000000000000000000000000000000000000000000000002::example::Object",
                    "objectId": "0xa7b675e9b2f5749415c55996bb9d64a48cf227cd51ebf714d6a33167f44e88d3",
                    "version": "2",
                    "digest": "5EuYqa54WcsyEaPLGqsw5cPtx5H2PibfLCdzPzHiSokr"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_tryGetPastObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Note there is no software-level guarantee/SLA that objects with past versions can be retrieved by this API, even if the object and version exists/existed. The result may vary across nodes depending on their pruning policies. Return the object information for a specified version",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "version",
          "description": "the version of the queried object. If None, default to the latest known version",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/ObjectDataOptions"
          }
        }
      ],
      "result": {
        "name": "SuiPastObjectResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Past Object data.",
          "params": [
            {
              "name": "object_id",
              "value": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760"
            },
            {
              "name": "version",
              "value": 4
            },
            {
              "name": "options",
              "value": {
                "showType": true,
                "showOwner": true,
                "showPreviousTransaction": true,
                "showDisplay": false,
                "showContent": true,
                "showBcs": false,
                "showStorageRebate": true
              }
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "VersionFound",
              "details": {
                "objectId": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760",
                "version": "4",
                "digest": "5VPAwDXy3BL72ehFc7gSJoz27ahMd6spUg5YwYc4ibcv",
                "type": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "0x3568c40e814d9d5396d23087a0fd641e91e0e00df6c012cded9ef9ba5e5bf042"
                },
                "previousTransaction": "5jQByoouHBwaico5pQB73GdbzerC2StjTiHh5garBjiV",
                "storageRebate": "100",
                "content": {
                  "dataType": "moveObject",
                  "type": "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
                  "hasPublicTransfer": true,
                  "fields": {
                    "balance": "10000",
                    "id": {
                      "id": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_tryMultiGetPastObjects",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Note there is no software-level guarantee/SLA that objects with past versions can be retrieved by this API, even if the object and version exists/existed. The result may vary across nodes depending on their pruning policies. Return the object information for a specified version",
      "params": [
        {
          "name": "past_objects",
          "description": "a vector of object and versions to be queried",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPastObjectRequest"
            }
          }
        },
        {
          "name": "options",
          "description": "options for specifying the content to be returned",
          "schema": {
            "$ref": "#/components/schemas/ObjectDataOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiPastObjectResponse>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectRead"
          }
        }
      }
    },
    {
      "name": "suix_getAllBalances",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return the total coin balance for all coin type, owned by the address owner.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<Balance>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Balance"
          }
        }
      },
      "examples": [
        {
          "name": "Get all balances for the address in the request.",
          "params": [
            {
              "name": "owner",
              "value": "0xa74fdb6fdbea46a3ebc7779c45e3e1415579352c128b4d1a2f42fdfbc9c5a73a"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "coinType": "0x2::sui::SUI",
                "coinObjectCount": 15,
                "totalBalance": "3000000000",
                "lockedBalance": {}
              }
            ]
          }
        }
      ]
    },
    {
      "name": "suix_getAllCoins",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return all Coin objects owned by an address.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CoinPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_Coin_and_ObjectID"
        }
      },
      "examples": [
        {
          "name": "Get all coins for the address in the request body. Begin listing the coins that are after the provided `cursor` value and return only the `limit` amount of results per page.",
          "params": [
            {
              "name": "owner",
              "value": "0x441193e99ab6cc2a92f7d37948898292d70420418b84502e506794227f897237"
            },
            {
              "name": "cursor",
              "value": "0x764dde8d79a01ab2104bf742a277a2abe035ca41c556b722878b9ae6b4c693a4"
            },
            {
              "name": "limit",
              "value": 3
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                {
                  "coinType": "0x2::sui::SUI",
                  "coinObjectId": "0x7623b91b0c1f72234f841e8ea76be9ec0b5d72879b091d6d6d8f832ef94830cb",
                  "version": "103626",
                  "digest": "AZbu9haHHhVg4FAkTVpAagF635BKdMMyT8Kq1nCadtbt",
                  "balance": "200000000",
                  "previousTransaction": "2mufpk8aTSSSRGLYkrpv8EJzW7pXpkPqzW4FYAQu1Z95"
                },
                {
                  "coinType": "0x2::sui::SUI",
                  "coinObjectId": "0xec4c5c752302b12d01726cfaa9bca5c15f8790856802af59971ef9615b01d73d",
                  "version": "103626",
                  "digest": "23LwBmJXAYK7fwPLbn5GAKVCJjTMb3ky91rfuQYMmYVW",
                  "balance": "200000000",
                  "previousTransaction": "84rbocBNV2Bnz5wx3o9CWaFStR8Tq282ym2f7sShW5bw"
                },
                {
                  "coinType": "0x2::sui::SUI",
                  "coinObjectId": "0x1c752e81c51b206357d828266c36b53865bb5fe48a1f388f5a97d0d8dfe64f09",
                  "version": "103626",
                  "digest": "HdLVWgeNCudDMEJZ2mN7c5G9LJge15fKHa13pDSQdYA2",
                  "balance": "200000000",
                  "previousTransaction": "9AwB9e3Z6uuRFuvFgzQyHYSKHRTiXRwTfc5DVWVrwzL4"
                }
              ],
              "nextCursor": "0x640ee862b96bef84fa98d2fceeb4b9585767750716f58847dd9c66a2024b544c",
              "hasNextPage": true
            }
          }
        }
      ]
    },
    {
      "name": "suix_getBalance",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return the total coin balance for one coin type, owned by the address owner.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_type",
          "description": "optional type names for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Balance",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Balance"
        }
      },
      "examples": [
        {
          "name": "Get the balance of the specified type of coin for the address in the request.",
          "params": [
            {
              "name": "owner",
              "value": "0x703e326f7b6c5bb06e2f69ccf4411308e79595034b7c56ae03d69bab88bbb091"
            },
            {
              "name": "coin_type",
              "value": "0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "coinType": "0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC",
              "coinObjectCount": 15,
              "totalBalance": "15",
              "lockedBalance": {}
            }
          }
        }
      ]
    },
    {
      "name": "suix_getCoinMetadata",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return metadata(e.g., symbol, decimals) for a coin",
      "params": [
        {
          "name": "coin_type",
          "description": "type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiCoinMetadata",
        "schema": {
          "$ref": "#/components/schemas/SuiCoinMetadata"
        }
      },
      "examples": [
        {
          "name": "Get the metadata for the coin type in the request.",
          "params": [
            {
              "name": "coin_type",
              "value": "0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "id": {
                "id": "0x7cfa772baf3e837891413e94b1915b08fb41181bc952002a71ea08ffdb2fd0ea"
              },
              "decimals": 9,
              "name": "Usdc",
              "symbol": "USDC",
              "description": "Stable coin.",
              "icon_url": null
            }
          }
        }
      ]
    },
    {
      "name": "suix_getCoins",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return all Coin<`coin_type`> objects owned by an address.",
      "params": [
        {
          "name": "owner",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_type",
          "description": "optional type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CoinPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_Coin_and_ObjectID"
        }
      },
      "examples": [
        {
          "name": "Get all SUI coins owned by the address provided. Return a paginated list of `limit` results per page. Similar to `suix_getAllCoins`, but provides a way to filter by coin type.",
          "params": [
            {
              "name": "owner",
              "value": "0x41696ca3ea204b350ed513f80254082f1fadc9347718cef986a866efa6db5c1b"
            },
            {
              "name": "coin_type",
              "value": "0x2::sui::SUI"
            },
            {
              "name": "cursor",
              "value": "0x1d83b6efc4dd779f0890ca3b1f6ba997850aa1ca641faf47cb518d49c1cf182f"
            },
            {
              "name": "limit",
              "value": 3
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                {
                  "coinType": "0x2::sui::SUI",
                  "coinObjectId": "0xd60446af9ce59a85cd194e4715701e55e66b092d67b54aea5028bed04c46a29b",
                  "version": "103626",
                  "digest": "F4YWin8YQvSgGBQ6VqyfS7usNCqw3e6D4VR3GK6MBK2j",
                  "balance": "200000000",
                  "previousTransaction": "FRkCdGVJM1tiFJUNPJ4DJhJL9tWNDzQazS8rmUNtgURv"
                },
                {
                  "coinType": "0x2::sui::SUI",
                  "coinObjectId": "0x34be26e69152d2c2e86d8a9bdbd242b32564cd31a71cf9833609b111436d8f0f",
                  "version": "103626",
                  "digest": "5pxep8QRzhoCeXVtPTDwz9nhHPff4SQoVRxHRG6pg6a9",
                  "balance": "200000000",
                  "previousTransaction": "5cY4D5G8zdGteAjqXaVtTJ8gFnxMYCjo5gJvcJDsSLCf"
                },
                {
                  "coinType": "0x2::sui::SUI",
                  "coinObjectId": "0x40e6f0b185af93984cde8cf3870302c062944303fab7b475b723f72ea7072ddb",
                  "version": "103626",
                  "digest": "6PzoK9qekAmiWGK3YV3JskCsTQB4U6uWb7JUGZCeRnaF",
                  "balance": "200000000",
                  "previousTransaction": "4UdPuQUQQmBU6aQknQA6RJ93DD2ZbkpkkjJrZXWNxXM3"
                }
              ],
              "nextCursor": "0x40e6f0b185af93984cde8cf3870302c062944303fab7b475b723f72ea7072ddb",
              "hasNextPage": true
            }
          }
        }
      ]
    },
    {
      "name": "suix_getCommitteeInfo",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the committee information for the asked `epoch`.",
      "params": [
        {
          "name": "epoch",
          "description": "The epoch of interest. If None, default to the latest epoch",
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "SuiCommittee",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CommitteeInfo"
        }
      },
      "examples": [
        {
          "name": "Get committee information for epoch 5000.",
          "params": [
            {
              "name": "epoch",
              "value": "5000"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "epoch": "5000",
              "validators": [
                [
                  "jc/20VUECmVvSBmxMRG1LFdGqGunLzlfuv4uw4R9HoFA5iSnUf32tfIFC8cgXPnTAATJCwx0Cv/TJs5nPMKyOi0k1T4q/rKG38Zo/UBgCJ1tKxe3md02+Q0zLlSnozjU",
                  "2500"
                ],
                [
                  "mfJe9h+AMrkUY2RgmCxcxvE07x3a52ZX8sv+wev8jQlzdAgN9vzw3Li8Sw2OCvXYDrv/K0xZn1T0LWMS38MUJ2B4wcw0fru+xRmL4lhRPzhrkw0CwnSagD4jMJVevRoQ",
                  "2500"
                ],
                [
                  "rd7vlNiYyI5A297/kcXxBfnPLHR/tvK8N+wD1ske2y4aV4z1RL6LCTHiXyQ9WbDDDZihbOO6HWzx1/UEJpkusK2zE0sFW+gUDS218l+wDYP45CIr8B/WrJOh/0152ljy",
                  "2500"
                ],
                [
                  "s/1e+1yHJAOkrRPxGZUTYG0jNUqEUkmuoVdWTCP/PBXGyeZSty10DoysuTy8wGhrDsDMDBx2C/tCtDZRn8WoBUt2UzqXqfI5h9CX75ax8lJrsgc/oQp3GZQXcjR+8nT0",
                  "2500"
                ]
              ]
            }
          }
        }
      ]
    },
    {
      "name": "suix_getDynamicFieldObject",
      "tags": [
        {
          "name": "Extended API"
        }
      ],
      "description": "Return the dynamic field object information for a specified object",
      "params": [
        {
          "name": "parent_object_id",
          "description": "The ID of the queried parent object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "name",
          "description": "The Name of the dynamic field",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/DynamicFieldName"
          }
        }
      ],
      "result": {
        "name": "SuiObjectResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiObjectResponse"
        }
      }
    },
    {
      "name": "suix_getDynamicFields",
      "tags": [
        {
          "name": "Extended API"
        }
      ],
      "description": "Return the list of dynamic field objects owned by an object.",
      "params": [
        {
          "name": "parent_object_id",
          "description": "The ID of the parent object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "cursor",
          "description": "An optional paging cursor. If provided, the query will start from the next item after the specified cursor. Default to start from the first item if not specified.",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "Maximum item returned per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "DynamicFieldPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_DynamicFieldInfo_and_ObjectID"
        }
      }
    },
    {
      "name": "suix_getLatestSuiSystemState",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the latest SUI system state object on-chain.",
      "params": [],
      "result": {
        "name": "SuiSystemStateSummary",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiSystemStateSummary"
        }
      }
    },
    {
      "name": "suix_getOwnedObjects",
      "tags": [
        {
          "name": "Extended API"
        }
      ],
      "description": "Return the list of objects owned by an address. Note that if the address owns more than `QUERY_MAX_RESULT_LIMIT` objects, the pagination is not accurate, because previous page may have been updated when the next page is fetched. Please use suix_queryObjects if this is a concern.",
      "params": [
        {
          "name": "address",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "query",
          "description": "the objects query criteria.",
          "schema": {
            "$ref": "#/components/schemas/ObjectResponseQuery"
          }
        },
        {
          "name": "cursor",
          "description": "An optional paging cursor. If provided, the query will start from the next item after the specified cursor. Default to start from the first item if not specified.",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "description": "Max number of items returned per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "ObjectsPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_SuiObjectResponse_and_ObjectID"
        }
      }
    },
    {
      "name": "suix_getReferenceGasPrice",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the reference gas price for the network",
      "params": [],
      "result": {
        "name": "BigInt<u64>",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/BigInt_for_uint64"
        }
      },
      "examples": [
        {
          "name": "Get reference gas price information for the network.",
          "params": [],
          "result": {
            "name": "Result",
            "value": 1000
          }
        }
      ]
    },
    {
      "name": "suix_getStakes",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return all [DelegatedStake].",
      "params": [
        {
          "name": "owner",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<DelegatedStake>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/DelegatedStake"
          }
        }
      }
    },
    {
      "name": "suix_getStakesByIds",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return one or more [DelegatedStake]. If a Stake was withdrawn its status will be Unstaked.",
      "params": [
        {
          "name": "staked_sui_ids",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        }
      ],
      "result": {
        "name": "Vec<DelegatedStake>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/DelegatedStake"
          }
        }
      }
    },
    {
      "name": "suix_getTotalSupply",
      "tags": [
        {
          "name": "Coin Query API"
        }
      ],
      "description": "Return total supply for a coin",
      "params": [
        {
          "name": "coin_type",
          "description": "type name for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Supply",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Supply"
        }
      },
      "examples": [
        {
          "name": "Get total supply for the type of coin provided.",
          "params": [
            {
              "name": "coin_type",
              "value": "0xcf8ecceac97dd580e26f0b5bf17fbc86a323d541ba5cf9e34919d2644cda38a2::acoin::ACOIN"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "value": "12023692"
            }
          }
        }
      ]
    },
    {
      "name": "suix_getValidatorsApy",
      "tags": [
        {
          "name": "Governance Read API"
        }
      ],
      "description": "Return the validator APY",
      "params": [],
      "result": {
        "name": "ValidatorApys",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ValidatorApys"
        }
      },
      "examples": [
        {
          "name": "Get the APY for all validators.",
          "params": [],
          "result": {
            "name": "Result",
            "value": {
              "apys": [
                {
                  "address": "0xca6d9eb1258bfd1ad92af329a07781ee71e60065e00f2de961630d3505f8905a",
                  "apy": 0.06
                },
                {
                  "address": "0x0f4d42c6ff39a78a6ba2b28f68a3299ec3417bbabc6717dcc95b9e341bc3aba1",
                  "apy": 0.02
                },
                {
                  "address": "0x654bdbad707dcd773bd6309363447ef3fe58a960de92aa9377b3482580ee8d5b",
                  "apy": 0.05
                }
              ],
              "epoch": "420"
            }
          }
        }
      ]
    },
    {
      "name": "suix_queryEvents",
      "tags": [
        {
          "name": "Extended API"
        }
      ],
      "description": "Return list of events for a specified query criteria.",
      "params": [
        {
          "name": "query",
          "description": "the event query criteria.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventFilter"
          }
        },
        {
          "name": "cursor",
          "description": "optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/EventID"
          }
        },
        {
          "name": "limit",
          "description": "maximum number of items per page, default to [QUERY_MAX_RESULT_LIMIT] if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "descending_order",
          "description": "query result ordering, default to false (ascending order), oldest record first.",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "EventPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_Event_and_EventID"
        }
      }
    },
    {
      "name": "suix_queryTransactionBlocks",
      "tags": [
        {
          "name": "Extended API"
        }
      ],
      "description": "Return list of transactions for a specified query criteria.",
      "params": [
        {
          "name": "query",
          "description": "the transaction query criteria.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionBlockResponseQuery"
          }
        },
        {
          "name": "cursor",
          "description": "An optional paging cursor. If provided, the query will start from the next item after the specified cursor. Default to start from the first item if not specified.",
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        },
        {
          "name": "limit",
          "description": "Maximum item returned per page, default to QUERY_MAX_RESULT_LIMIT if not specified.",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "descending_order",
          "description": "query result ordering, default to false (ascending order), oldest record first.",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "TransactionBlocksPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_TransactionBlockResponse_and_TransactionDigest"
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified query criteria.",
          "params": [
            {
              "name": "query",
              "value": {
                "filter": {
                  "InputObject": "0x93633829fcba6d6e0ccb13d3dbfe7614b81ea76b255e5d435032cd8595f37eb8"
                },
                "options": null
              }
            },
            {
              "name": "cursor",
              "value": "HxidAfFfyr4kXSiWeVq1J6Tk526YUVDoSUY5PSnS4tEJ"
            },
            {
              "name": "limit",
              "value": 100
            },
            {
              "name": "descending_order",
              "value": false
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                {
                  "digest": "GUPcK4cmRmgsTFr52ab9f6fnzNVg3Lz6hF2aXFcsRzaD"
                },
                {
                  "digest": "B2iV1SVbBjgTKfbJKPQrvTT6F3kNdekFuBwY9tQcAxV2"
                },
                {
                  "digest": "8QrPa4x9iNG5r2zQfmeH8pJoVjjtq9AGzp8rp2fxi8Sk"
                },
                {
                  "digest": "3nek86HEjXZ7K3EtrAcBG4wMrCS21gqr8BqwwC6M6P7F"
                }
              ],
              "nextCursor": "3nek86HEjXZ7K3EtrAcBG4wMrCS21gqr8BqwwC6M6P7F",
              "hasNextPage": false
            }
          }
        }
      ]
    },
    {
      "name": "suix_resolveNameServiceAddress",
      "tags": [
        {
          "name": "Extended API"
        }
      ],
      "description": "Return the resolved address given resolver and name",
      "params": [
        {
          "name": "name",
          "description": "The name to resolve",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiAddress",
        "schema": {
          "$ref": "#/components/schemas/SuiAddress"
        }
      }
    },
    {
      "name": "suix_resolveNameServiceNames",
      "tags": [
        {
          "name": "Extended API"
        }
      ],
      "description": "Return the resolved names given address, if multiple names are resolved, the first one is the primary name.",
      "params": [
        {
          "name": "address",
          "description": "The address to resolve",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "limit",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Page<String,ObjectID>",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_String_and_ObjectID"
        }
      }
    },
    {
      "name": "suix_subscribeEvent",
      "tags": [
        {
          "name": "Extended API"
        },
        {
          "name": "Websocket"
        },
        {
          "name": "PubSub"
        }
      ],
      "description": "Subscribe to a stream of Sui event",
      "params": [
        {
          "name": "filter",
          "description": "the filter criteria of the event stream, see the [Sui docs](https://docs.sui.io/build/pubsub#event-filters) for detailed examples.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventFilter"
          }
        }
      ],
      "result": {
        "name": "SuiEvent",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Event"
        }
      }
    },
    {
      "name": "suix_subscribeTransaction",
      "tags": [
        {
          "name": "Extended API"
        },
        {
          "name": "Websocket"
        },
        {
          "name": "PubSub"
        }
      ],
      "description": "Subscribe to a stream of Sui transaction effects",
      "params": [
        {
          "name": "filter",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionFilter"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionBlockEffects",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockEffects"
        }
      }
    },
    {
      "name": "unsafe_batchTransaction",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned batched transaction.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "single_transaction_params",
          "description": "list of transaction request parameters",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RPCTransactionRequestParams"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        },
        {
          "name": "txn_builder_mode",
          "description": "Whether this is a regular transaction or a Dev Inspect Transaction",
          "schema": {
            "$ref": "#/components/schemas/SuiTransactionBlockBuilderMode"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_mergeCoins",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to merge multiple coins into one coin.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "primary_coin",
          "description": "the coin object to merge into, this coin will remain after the transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "coin_to_merge",
          "description": "the coin object to be merged, this coin will be destroyed, the balance will be added to `primary_coin`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_moveCall",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to execute a Move call on the network, by calling the specified function in the module of a given package.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "package_object_id",
          "description": "the Move package ID, e.g. `0x2`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "description": "the Move module name, e.g. `pay`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "description": "the move function name, e.g. `split`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "type_arguments",
          "description": "the type arguments of the Move function",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        },
        {
          "name": "arguments",
          "description": "the arguments to be passed into the Move function, in [SuiJson](https://docs.sui.io/build/sui-json) format",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        },
        {
          "name": "execution_mode",
          "description": "Whether this is a Normal transaction or a Dev Inspect Transaction. Default to be `SuiTransactionBlockBuilderMode::Commit` when it's None.",
          "schema": {
            "$ref": "#/components/schemas/SuiTransactionBlockBuilderMode"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_pay",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send `Coin<T>` to a list of addresses, where `T` can be any coin type, following a list of amounts, The object specified in the `gas` field will be used to pay the gas fee for the transaction. The gas object can not appear in `input_coins`. If the gas object is not specified, the RPC server will auto-select one.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipients",
          "description": "the recipients' addresses, the length of this vector must be the same as amounts.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        },
        {
          "name": "amounts",
          "description": "the amounts to be transferred to recipients, following the same order",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BigInt_for_uint64"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_payAllSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send all SUI coins to one recipient. This is for SUI coin only and does not require a separate gas coin object. Specifically, what pay_all_sui does are: 1. accumulate all SUI from input coins and deposit all SUI to the first input coin 2. transfer the updated first coin to the recipient and also use this first coin as gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - actual_gas_cost. 4. all other input coins other than the first are deleted.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction, including the coin for gas payment.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipient",
          "description": "the recipient address,",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_paySui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send SUI coins to a list of addresses, following a list of amounts. This is for SUI coin only and does not require a separate gas coin object. Specifically, what pay_sui does are: 1. debit each input_coin to create new coin following the order of amounts and assign it to the corresponding recipient. 2. accumulate all residual SUI from input coins left and deposit all SUI to the first input coin, then use the first input coin as the gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - sum(amounts) - actual_gas_cost 4. all other input coints other than the first one are deleted.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction, including the coin for gas payment.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipients",
          "description": "the recipients' addresses, the length of this vector must be the same as amounts.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        },
        {
          "name": "amounts",
          "description": "the amounts to be transferred to recipients, following the same order",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BigInt_for_uint64"
            }
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_publish",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to publish a Move package.",
      "params": [
        {
          "name": "sender",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "compiled_modules",
          "description": "the compiled bytes of a Move package",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "dependencies",
          "description": "a list of transitive dependency addresses that this set of modules depends on.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_requestAddStake",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Add stake to a validator's staking pool using multiple coins and amount.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coins",
          "description": "Coin<SUI> object to stake",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "amount",
          "description": "stake amount",
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        },
        {
          "name": "validator",
          "description": "the validator's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_requestWithdrawStake",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Withdraw stake from a validator's staking pool.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "staked_sui",
          "description": "StakedSui object ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_splitCoin",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_amounts",
          "description": "the amounts to split out from the coin",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BigInt_for_uint64"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_splitCoinEqual",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple equal-size coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_count",
          "description": "the number of coins to split into",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_transferObject",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to transfer an object from one address to another. The object's type must allow public transfers",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "object_id",
          "description": "the ID of the object to be transferred",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, node will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    },
    {
      "name": "unsafe_transferSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to send SUI coin object to a Sui address. The SUI object is also used as the gas object.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "sui_object_id",
          "description": "the Sui coin object to be used in this transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "amount",
          "description": "the amount to be split out and transferred",
          "schema": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      ],
      "result": {
        "name": "TransactionBlockBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBlockBytes"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "AuthorityPublicKeyBytes": {
        "description": "Defines the compressed version of the public key that we pass around in Sui",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base64"
          }
        ]
      },
      "Balance": {
        "type": "object",
        "required": [
          "coinObjectCount",
          "coinType",
          "lockedBalance",
          "totalBalance"
        ],
        "properties": {
          "coinObjectCount": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "coinType": {
            "type": "string"
          },
          "lockedBalance": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BigInt_for_uint128"
            }
          },
          "totalBalance": {
            "$ref": "#/components/schemas/BigInt_for_uint128"
          }
        }
      },
      "BalanceChange": {
        "type": "object",
        "required": [
          "amount",
          "coinType",
          "owner"
        ],
        "properties": {
          "amount": {
            "description": "The amount indicate the balance value changes, negative amount means spending coin value and positive means receiving coin value.",
            "type": "string"
          },
          "coinType": {
            "type": "string"
          },
          "owner": {
            "description": "Owner of the balance change",
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              }
            ]
          }
        }
      },
      "Base58": {
        "type": "string"
      },
      "Base64": {
        "description": "Base64 encoding",
        "type": "string"
      },
      "BigInt_for_uint128": {
        "type": "string"
      },
      "BigInt_for_uint64": {
        "type": "string"
      },
      "Checkpoint": {
        "type": "object",
        "required": [
          "checkpointCommitments",
          "digest",
          "epoch",
          "epochRollingGasCostSummary",
          "networkTotalTransactions",
          "sequenceNumber",
          "timestampMs",
          "transactions",
          "validatorSignature"
        ],
        "properties": {
          "checkpointCommitments": {
            "description": "Commitments to checkpoint state",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckpointCommitment"
            }
          },
          "digest": {
            "description": "Checkpoint digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckpointDigest"
              }
            ]
          },
          "endOfEpochData": {
            "description": "Present only on the final checkpoint of the epoch.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/EndOfEpochData"
              },
              {
                "type": "null"
              }
            ]
          },
          "epoch": {
            "description": "Checkpoint's epoch ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "epochRollingGasCostSummary": {
            "description": "The running total gas costs of all transactions included in the current epoch so far until this checkpoint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GasCostSummary"
              }
            ]
          },
          "networkTotalTransactions": {
            "description": "Total number of transactions committed since genesis, including those in this checkpoint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "previousDigest": {
            "description": "Digest of the previous checkpoint",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CheckpointDigest"
              },
              {
                "type": "null"
              }
            ]
          },
          "sequenceNumber": {
            "description": "Checkpoint sequence number",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "timestampMs": {
            "description": "Timestamp of the checkpoint - number of milliseconds from the Unix epoch Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent checkpoints can have same timestamp if they originate from the same underlining consensus commit",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "transactions": {
            "description": "Transaction digests",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          },
          "validatorSignature": {
            "description": "Validator Signature",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          }
        }
      },
      "CheckpointCommitment": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ECMHLiveObjectSetDigest"
            ],
            "properties": {
              "ECMHLiveObjectSetDigest": {
                "$ref": "#/components/schemas/ECMHLiveObjectSetDigest"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CheckpointDigest": {
        "description": "Representation of a Checkpoint's digest",
        "allOf": [
          {
            "$ref": "#/components/schemas/Digest"
          }
        ]
      },
      "CheckpointId": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          {
            "$ref": "#/components/schemas/CheckpointDigest"
          }
        ]
      },
      "Coin": {
        "type": "object",
        "required": [
          "balance",
          "coinObjectId",
          "coinType",
          "digest",
          "previousTransaction",
          "version"
        ],
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "coinObjectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "coinType": {
            "type": "string"
          },
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "previousTransaction": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "CommitteeInfo": {
        "description": "RPC representation of the [Committee] type.",
        "type": "object",
        "required": [
          "epoch",
          "validators"
        ],
        "properties": {
          "epoch": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "validators": {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/AuthorityPublicKeyBytes"
                },
                {
                  "$ref": "#/components/schemas/BigInt_for_uint64"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "CompressedSignature": {
        "description": "Unlike [enum Signature], [enum CompressedSignature] does not contain public key.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519"
            ],
            "properties": {
              "Ed25519": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1"
            ],
            "properties": {
              "Secp256k1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1"
            ],
            "properties": {
              "Secp256r1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Data": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "dataType",
              "fields",
              "hasPublicTransfer",
              "type"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "moveObject"
                ]
              },
              "fields": {
                "$ref": "#/components/schemas/MoveStruct"
              },
              "hasPublicTransfer": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dataType",
              "disassembled"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "package"
                ]
              },
              "disassembled": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        ]
      },
      "DelegatedStake": {
        "type": "object",
        "required": [
          "stakes",
          "stakingPool",
          "validatorAddress"
        ],
        "properties": {
          "stakes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stake"
            }
          },
          "stakingPool": {
            "description": "Staking pool object id.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "validatorAddress": {
            "description": "Validator's Address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SuiAddress"
              }
            ]
          }
        }
      },
      "DevInspectResults": {
        "description": "The response from processing a dev inspect transaction",
        "type": "object",
        "required": [
          "effects",
          "events"
        ],
        "properties": {
          "effects": {
            "description": "Summary of effects that likely would be generated if the transaction is actually run. Note however, that not all dev-inspect transactions are actually usable as transactions so it might not be possible actually generate these effects from a normal transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionBlockEffects"
              }
            ]
          },
          "error": {
            "description": "Execution error from executing the transactions",
            "type": [
              "string",
              "null"
            ]
          },
          "events": {
            "description": "Events that likely would be generated if the transaction is actually run.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "results": {
            "description": "Execution results (including return values) from executing the transactions",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/SuiExecutionResult"
            }
          }
        }
      },
      "Digest": {
        "description": "A representation of a 32 byte digest",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base58"
          }
        ]
      },
      "DisplayFieldsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            }
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectResponseError"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "DryRunTransactionBlockResponse": {
        "type": "object",
        "required": [
          "balanceChanges",
          "effects",
          "events",
          "input",
          "objectChanges"
        ],
        "properties": {
          "balanceChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceChange"
            }
          },
          "effects": {
            "$ref": "#/components/schemas/TransactionBlockEffects"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "input": {
            "$ref": "#/components/schemas/TransactionBlockData"
          },
          "objectChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectChange"
            }
          }
        }
      },
      "DynamicFieldInfo": {
        "type": "object",
        "required": [
          "bcsName",
          "digest",
          "name",
          "objectId",
          "objectType",
          "type",
          "version"
        ],
        "properties": {
          "bcsName": {
            "$ref": "#/components/schemas/Base58"
          },
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "name": {
            "$ref": "#/components/schemas/DynamicFieldName"
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "objectType": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DynamicFieldType"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "DynamicFieldName": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "value": true
        }
      },
      "DynamicFieldType": {
        "type": "string",
        "enum": [
          "DynamicField",
          "DynamicObject"
        ]
      },
      "ECMHLiveObjectSetDigest": {
        "description": "The Sha256 digest of an EllipticCurveMultisetHash committing to the live object set.",
        "type": "object",
        "required": [
          "digest"
        ],
        "properties": {
          "digest": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 32,
            "minItems": 32
          }
        }
      },
      "Ed25519SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "EndOfEpochData": {
        "type": "object",
        "required": [
          "epochCommitments",
          "nextEpochCommittee",
          "nextEpochProtocolVersion"
        ],
        "properties": {
          "epochCommitments": {
            "description": "Commitments to epoch specific state (e.g. live object set)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckpointCommitment"
            }
          },
          "nextEpochCommittee": {
            "description": "next_epoch_committee is `Some` if and only if the current checkpoint is the last checkpoint of an epoch. Therefore next_epoch_committee can be used to pick the last checkpoint of an epoch, which is often useful to get epoch level summary stats like total gas cost of an epoch, or the total number of transactions from genesis to the end of an epoch. The committee is stored as a vector of validator pub key and stake pairs. The vector should be sorted based on the Committee data structure.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/AuthorityPublicKeyBytes"
                },
                {
                  "$ref": "#/components/schemas/BigInt_for_uint64"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "nextEpochProtocolVersion": {
            "description": "The protocol version that is in effect during the epoch that starts immediately after this checkpoint.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProtocolVersion"
              }
            ]
          }
        }
      },
      "Event": {
        "type": "object",
        "required": [
          "bcs",
          "id",
          "packageId",
          "parsedJson",
          "sender",
          "transactionModule",
          "type"
        ],
        "properties": {
          "bcs": {
            "description": "Base 58 encoded bcs bytes of the move event",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base58"
              }
            ]
          },
          "id": {
            "description": "Sequential event ID, ie (transaction seq number, event seq number). 1) Serves as a unique event ID for each fullnode 2) Also serves to sequence events for the purposes of pagination and querying. A higher id is an event seen later by that fullnode. This ID is the \"cursor\" for event querying.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EventID"
              }
            ]
          },
          "packageId": {
            "description": "Move package where this event was emitted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "parsedJson": {
            "description": "Parsed json value of the event"
          },
          "sender": {
            "description": "Sender's Sui address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SuiAddress"
              }
            ]
          },
          "timestampMs": {
            "description": "UTC timestamp in milliseconds since epoch (1/1/1970)",
            "anyOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "transactionModule": {
            "description": "Move module where this event was emitted.",
            "type": "string"
          },
          "type": {
            "description": "Move event type.",
            "type": "string"
          }
        }
      },
      "EventFilter": {
        "oneOf": [
          {
            "description": "Query by sender address.",
            "type": "object",
            "required": [
              "Sender"
            ],
            "properties": {
              "Sender": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted by the given transaction.",
            "type": "object",
            "required": [
              "Transaction"
            ],
            "properties": {
              "Transaction": {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in a specified Package.",
            "type": "object",
            "required": [
              "Package"
            ],
            "properties": {
              "Package": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in a specified Move module.",
            "type": "object",
            "required": [
              "MoveModule"
            ],
            "properties": {
              "MoveModule": {
                "type": "object",
                "required": [
                  "module",
                  "package"
                ],
                "properties": {
                  "module": {
                    "description": "the module name",
                    "type": "string"
                  },
                  "package": {
                    "description": "the Move package ID",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ObjectID"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events with the given move event struct name",
            "type": "object",
            "required": [
              "MoveEventType"
            ],
            "properties": {
              "MoveEventType": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MoveEventField"
            ],
            "properties": {
              "MoveEventField": {
                "type": "object",
                "required": [
                  "path",
                  "value"
                ],
                "properties": {
                  "path": {
                    "type": "string"
                  },
                  "value": true
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in [start_time, end_time] interval",
            "type": "object",
            "required": [
              "TimeRange"
            ],
            "properties": {
              "TimeRange": {
                "type": "object",
                "required": [
                  "endTime",
                  "startTime"
                ],
                "properties": {
                  "endTime": {
                    "description": "right endpoint of time interval, milliseconds since epoch, exclusive",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BigInt_for_uint64"
                      }
                    ]
                  },
                  "startTime": {
                    "description": "left endpoint of time interval, milliseconds since epoch, inclusive",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BigInt_for_uint64"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "All"
            ],
            "properties": {
              "All": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Any"
            ],
            "properties": {
              "Any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "And"
            ],
            "properties": {
              "And": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Or"
            ],
            "properties": {
              "Or": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventID": {
        "description": "Unique ID of a Sui Event, the ID is a combination of tx seq number and event seq number, the ID is local to this particular fullnode and will be different from other fullnode.",
        "type": "object",
        "required": [
          "eventSeq",
          "txDigest"
        ],
        "properties": {
          "eventSeq": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "txDigest": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      },
      "ExecuteTransactionRequestType": {
        "type": "string",
        "enum": [
          "WaitForEffectsCert",
          "WaitForLocalExecution"
        ]
      },
      "ExecutionStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "success"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error",
              "status"
            ],
            "properties": {
              "error": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "failure"
                ]
              }
            }
          }
        ]
      },
      "GasCostSummary": {
        "description": "Summary of the charges in a transaction. Storage is charged independently of computation. There are 3 parts to the storage charges: `storage_cost`: it is the charge of storage at the time the transaction is executed. The cost of storage is the number of bytes of the objects being mutated multiplied by a variable storage cost per byte `storage_rebate`: this is the amount a user gets back when manipulating an object. The `storage_rebate` is the `storage_cost` for an object minus fees. `non_refundable_storage_fee`: not all the value of the object storage cost is given back to user and there is a small fraction that is kept by the system. This value tracks that charge.\n\nWhen looking at a gas cost summary the amount charged to the user is `computation_cost + storage_cost - storage_rebate` and that is the amount that is deducted from the gas coins. `non_refundable_storage_fee` is collected from the objects being mutated/deleted and it is tracked by the system in storage funds.\n\nObjects deleted, including the older versions of objects mutated, have the storage field on the objects added up to a pool of \"potential rebate\". This rebate then is reduced by the \"nonrefundable rate\" such that: `potential_rebate(storage cost of deleted/mutated objects) = storage_rebate + non_refundable_storage_fee`",
        "type": "object",
        "required": [
          "computationCost",
          "nonRefundableStorageFee",
          "storageCost",
          "storageRebate"
        ],
        "properties": {
          "computationCost": {
            "description": "Cost of computation/execution",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "nonRefundableStorageFee": {
            "description": "The fee for the rebate. The portion of the storage rebate kept by the system.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "storageCost": {
            "description": "Storage cost, it's the sum of all storage cost for all objects created or mutated.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "storageRebate": {
            "description": "The amount of storage cost refunded to the user for all objects deleted or mutated in the transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          }
        }
      },
      "GasData": {
        "type": "object",
        "required": [
          "budget",
          "owner",
          "payment",
          "price"
        ],
        "properties": {
          "budget": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "owner": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "payment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "price": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      },
      "GenericSignature": {
        "description": "Due to the incompatibility of [enum Signature] (which dispatches a trait that assumes signature and pubkey bytes for verification), here we add a wrapper enum where member can just implement a lightweight [trait AuthenticatorTrait]. This way MultiSig (and future Authenticators) can implement its own `verify`.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MultiSig"
            ],
            "properties": {
              "MultiSig": {
                "$ref": "#/components/schemas/MultiSig"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Signature"
            ],
            "properties": {
              "Signature": {
                "$ref": "#/components/schemas/Signature"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GetPastObjectRequest": {
        "type": "object",
        "required": [
          "objectId",
          "version"
        ],
        "properties": {
          "objectId": {
            "description": "the ID of the queried object",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "version": {
            "description": "the version of the queried object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "Hex": {
        "description": "Hex string encoding.",
        "type": "string"
      },
      "InputObjectKind": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MovePackage"
            ],
            "properties": {
              "MovePackage": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ImmOrOwnedMoveObject"
            ],
            "properties": {
              "ImmOrOwnedMoveObject": {
                "$ref": "#/components/schemas/ObjectRef"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SharedMoveObject"
            ],
            "properties": {
              "SharedMoveObject": {
                "type": "object",
                "required": [
                  "id",
                  "initial_shared_version"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "initial_shared_version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  },
                  "mutable": {
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LoadedChildObject": {
        "type": "object",
        "required": [
          "objectId",
          "sequenceNumber"
        ],
        "properties": {
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "sequenceNumber": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "LoadedChildObjectsResponse": {
        "type": "object",
        "required": [
          "loadedChildObjects"
        ],
        "properties": {
          "loadedChildObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadedChildObject"
            }
          }
        }
      },
      "MoveCallParams": {
        "type": "object",
        "required": [
          "arguments",
          "function",
          "module",
          "packageObjectId"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "packageObjectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "typeArguments": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        }
      },
      "MoveFunctionArgType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Pure"
            ]
          },
          {
            "type": "object",
            "required": [
              "Object"
            ],
            "properties": {
              "Object": {
                "$ref": "#/components/schemas/ObjectValueKind"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MoveStruct": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "object",
            "required": [
              "fields",
              "type"
            ],
            "properties": {
              "fields": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/MoveValue"
                }
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MoveValue"
            }
          }
        ]
      },
      "MoveValue": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/SuiAddress"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "string"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            }
          },
          {
            "$ref": "#/components/schemas/MoveStruct"
          },
          {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MoveValue"
              },
              {
                "type": "null"
              }
            ]
          }
        ]
      },
      "MultiSig": {
        "description": "The struct that contains signatures and public keys necessary for authenticating a MultiSig.",
        "type": "object",
        "required": [
          "bitmap",
          "multisig_pk",
          "sigs"
        ],
        "properties": {
          "bitmap": {
            "description": "A bitmap that indicates the position of which public key the signature should be authenticated with.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          },
          "multisig_pk": {
            "description": "The public key encoded with each public key with its signature scheme used along with the corresponding weight.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MultiSigPublicKey"
              }
            ]
          },
          "sigs": {
            "description": "The plain signature encoded with signature scheme.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompressedSignature"
            }
          }
        }
      },
      "MultiSigPublicKey": {
        "description": "The struct that contains the public key used for authenticating a MultiSig.",
        "type": "object",
        "required": [
          "pk_map",
          "threshold"
        ],
        "properties": {
          "pk_map": {
            "description": "A list of public key and its corresponding weight.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/PublicKey"
                },
                {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "threshold": {
            "description": "If the total weight of the public keys corresponding to verified signatures is larger than threshold, the MultiSig is verified.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        }
      },
      "ObjectChange": {
        "description": "ObjectChange are derived from the object mutations in the TransactionEffect to provide richer object information.",
        "oneOf": [
          {
            "description": "Module published",
            "type": "object",
            "required": [
              "digest",
              "modules",
              "packageId",
              "type",
              "version"
            ],
            "properties": {
              "digest": {
                "$ref": "#/components/schemas/ObjectDigest"
              },
              "modules": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "packageId": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "type": {
                "type": "string",
                "enum": [
                  "published"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "description": "Transfer objects to new address / wrap in another object",
            "type": "object",
            "required": [
              "digest",
              "objectId",
              "objectType",
              "recipient",
              "sender",
              "type",
              "version"
            ],
            "properties": {
              "digest": {
                "$ref": "#/components/schemas/ObjectDigest"
              },
              "objectId": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "objectType": {
                "type": "string"
              },
              "recipient": {
                "$ref": "#/components/schemas/Owner"
              },
              "sender": {
                "$ref": "#/components/schemas/SuiAddress"
              },
              "type": {
                "type": "string",
                "enum": [
                  "transferred"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "description": "Object mutated.",
            "type": "object",
            "required": [
              "digest",
              "objectId",
              "objectType",
              "owner",
              "previousVersion",
              "sender",
              "type",
              "version"
            ],
            "properties": {
              "digest": {
                "$ref": "#/components/schemas/ObjectDigest"
              },
              "objectId": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "objectType": {
                "type": "string"
              },
              "owner": {
                "$ref": "#/components/schemas/Owner"
              },
              "previousVersion": {
                "$ref": "#/components/schemas/SequenceNumber"
              },
              "sender": {
                "$ref": "#/components/schemas/SuiAddress"
              },
              "type": {
                "type": "string",
                "enum": [
                  "mutated"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "description": "Delete object",
            "type": "object",
            "required": [
              "objectId",
              "objectType",
              "sender",
              "type",
              "version"
            ],
            "properties": {
              "objectId": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "objectType": {
                "type": "string"
              },
              "sender": {
                "$ref": "#/components/schemas/SuiAddress"
              },
              "type": {
                "type": "string",
                "enum": [
                  "deleted"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "description": "Wrapped object",
            "type": "object",
            "required": [
              "objectId",
              "objectType",
              "sender",
              "type",
              "version"
            ],
            "properties": {
              "objectId": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "objectType": {
                "type": "string"
              },
              "sender": {
                "$ref": "#/components/schemas/SuiAddress"
              },
              "type": {
                "type": "string",
                "enum": [
                  "wrapped"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "description": "New object creation",
            "type": "object",
            "required": [
              "digest",
              "objectId",
              "objectType",
              "owner",
              "sender",
              "type",
              "version"
            ],
            "properties": {
              "digest": {
                "$ref": "#/components/schemas/ObjectDigest"
              },
              "objectId": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "objectType": {
                "type": "string"
              },
              "owner": {
                "$ref": "#/components/schemas/Owner"
              },
              "sender": {
                "$ref": "#/components/schemas/SuiAddress"
              },
              "type": {
                "type": "string",
                "enum": [
                  "created"
                ]
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          }
        ]
      },
      "ObjectData": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "version"
        ],
        "properties": {
          "bcs": {
            "description": "Move object content or package content in BCS, default to be None unless SuiObjectDataOptions.showBcs is set to true",
            "anyOf": [
              {
                "$ref": "#/components/schemas/RawData"
              },
              {
                "type": "null"
              }
            ]
          },
          "content": {
            "description": "Move object content or package content, default to be None unless SuiObjectDataOptions.showContent is set to true",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Data"
              },
              {
                "type": "null"
              }
            ]
          },
          "digest": {
            "description": "Base64 string representing the object digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectDigest"
              }
            ]
          },
          "display": {
            "description": "The Display metadata for frontend UI rendering, default to be None unless SuiObjectDataOptions.showContent is set to true This can also be None if the struct type does not have Display defined See more details in <https://forums.sui.io/t/nft-object-display-proposal/4872>",
            "anyOf": [
              {
                "$ref": "#/components/schemas/DisplayFieldsResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "owner": {
            "description": "The owner of this object. Default to be None unless SuiObjectDataOptions.showOwner is set to true",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Owner"
              },
              {
                "type": "null"
              }
            ]
          },
          "previousTransaction": {
            "description": "The digest of the transaction that created or last mutated this object. Default to be None unless SuiObjectDataOptions.showPreviousTransaction is set to true",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              },
              {
                "type": "null"
              }
            ]
          },
          "storageRebate": {
            "description": "The amount of SUI we would rebate if this object gets deleted. This number is re-calculated each time the object is mutated based on the present storage gas price.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "description": "The type of the object. Default to be None unless SuiObjectDataOptions.showType is set to true",
            "type": [
              "string",
              "null"
            ]
          },
          "version": {
            "description": "Object version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ObjectDataOptions": {
        "type": "object",
        "properties": {
          "showBcs": {
            "description": "Whether to show the content in BCS format. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showContent": {
            "description": "Whether to show the content(i.e., package content or Move struct content) of the object. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showDisplay": {
            "description": "Whether to show the Display metadata of the object for frontend rendering. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showOwner": {
            "description": "Whether to show the owner of the object. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showPreviousTransaction": {
            "description": "Whether to show the previous transaction digest of the object. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showStorageRebate": {
            "description": "Whether to show the storage rebate of the object. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showType": {
            "description": "Whether to show the type of the object. Default to be False",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "ObjectDigest": {
        "$ref": "#/components/schemas/Digest"
      },
      "ObjectID": {
        "$ref": "#/components/schemas/Hex"
      },
      "ObjectRead": {
        "oneOf": [
          {
            "description": "The object exists and is found with this version",
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectData"
              },
              "status": {
                "type": "string",
                "enum": [
                  "VersionFound"
                ]
              }
            }
          },
          {
            "description": "The object does not exist",
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "status": {
                "type": "string",
                "enum": [
                  "ObjectNotExists"
                ]
              }
            }
          },
          {
            "description": "The object is found to be deleted with this version",
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectRef"
              },
              "status": {
                "type": "string",
                "enum": [
                  "ObjectDeleted"
                ]
              }
            }
          },
          {
            "description": "The object exists but not found with this version",
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              },
              "status": {
                "type": "string",
                "enum": [
                  "VersionNotFound"
                ]
              }
            }
          },
          {
            "description": "The asked object version is higher than the latest",
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "type": "object",
                "required": [
                  "asked_version",
                  "latest_version",
                  "object_id"
                ],
                "properties": {
                  "asked_version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  },
                  "latest_version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  },
                  "object_id": {
                    "$ref": "#/components/schemas/ObjectID"
                  }
                }
              },
              "status": {
                "type": "string",
                "enum": [
                  "VersionTooHigh"
                ]
              }
            }
          }
        ]
      },
      "ObjectRef": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "version"
        ],
        "properties": {
          "digest": {
            "description": "Base64 string representing the object digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectDigest"
              }
            ]
          },
          "objectId": {
            "description": "Hex code as string representing the object id",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "version": {
            "description": "Object version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ObjectResponseError": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "code",
              "object_id"
            ],
            "properties": {
              "code": {
                "type": "string",
                "enum": [
                  "notExists"
                ]
              },
              "object_id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "code",
              "parent_object_id"
            ],
            "properties": {
              "code": {
                "type": "string",
                "enum": [
                  "dynamicFieldNotFound"
                ]
              },
              "parent_object_id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "code",
              "digest",
              "object_id",
              "version"
            ],
            "properties": {
              "code": {
                "type": "string",
                "enum": [
                  "deleted"
                ]
              },
              "digest": {
                "description": "Base64 string representing the object digest",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ObjectDigest"
                  }
                ]
              },
              "object_id": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "version": {
                "description": "Object version.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "code"
            ],
            "properties": {
              "code": {
                "type": "string",
                "enum": [
                  "unknown"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "code",
              "error"
            ],
            "properties": {
              "code": {
                "type": "string",
                "enum": [
                  "displayError"
                ]
              },
              "error": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ObjectResponseQuery": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "If None, no filter will be applied",
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/SuiObjectDataFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "options": {
            "description": "config which fields to include in the response, by default only digest is included",
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectDataOptions"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "ObjectValueKind": {
        "type": "string",
        "enum": [
          "ByImmutableReference",
          "ByMutableReference",
          "ByValue"
        ]
      },
      "OwnedObjectRef": {
        "type": "object",
        "required": [
          "owner",
          "reference"
        ],
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "reference": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        }
      },
      "Owner": {
        "oneOf": [
          {
            "description": "Object is exclusively owned by a single address, and is mutable.",
            "type": "object",
            "required": [
              "AddressOwner"
            ],
            "properties": {
              "AddressOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is exclusively owned by a single object, and is mutable. The object ID is converted to SuiAddress as SuiAddress is universal.",
            "type": "object",
            "required": [
              "ObjectOwner"
            ],
            "properties": {
              "ObjectOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is shared, can be used by any address, and is mutable.",
            "type": "object",
            "required": [
              "Shared"
            ],
            "properties": {
              "Shared": {
                "type": "object",
                "required": [
                  "initial_shared_version"
                ],
                "properties": {
                  "initial_shared_version": {
                    "description": "The version at which the object became shared",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SequenceNumber"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is immutable, and hence ownership doesn't matter.",
            "type": "string",
            "enum": [
              "Immutable"
            ]
          }
        ]
      },
      "Page_for_Checkpoint_and_BigInt_for_uint64": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Checkpoint"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_Coin_and_ObjectID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_DynamicFieldInfo_and_ObjectID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DynamicFieldInfo"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_Event_and_EventID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EventID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_String_and_ObjectID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_SuiObjectResponse_and_ObjectID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiObjectResponse"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Page_for_TransactionBlockResponse_and_TransactionDigest": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "hasNextPage"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionBlockResponse"
            }
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "ProtocolVersion": {
        "$ref": "#/components/schemas/BigInt_for_uint64"
      },
      "PublicKey": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519"
            ],
            "properties": {
              "Ed25519": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1"
            ],
            "properties": {
              "Secp256k1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1"
            ],
            "properties": {
              "Secp256r1": {
                "$ref": "#/components/schemas/Base64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RPCTransactionRequestParams": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "transferObjectRequestParams"
            ],
            "properties": {
              "transferObjectRequestParams": {
                "$ref": "#/components/schemas/TransferObjectParams"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "moveCallRequestParams"
            ],
            "properties": {
              "moveCallRequestParams": {
                "$ref": "#/components/schemas/MoveCallParams"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RawData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bcsBytes",
              "dataType",
              "hasPublicTransfer",
              "type",
              "version"
            ],
            "properties": {
              "bcsBytes": {
                "$ref": "#/components/schemas/Base64"
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "moveObject"
                ]
              },
              "hasPublicTransfer": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dataType",
              "id",
              "linkageTable",
              "moduleMap",
              "typeOriginTable",
              "version"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "package"
                ]
              },
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "linkageTable": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpgradeInfo"
                }
              },
              "moduleMap": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Base64"
                }
              },
              "typeOriginTable": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TypeOrigin"
                }
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          }
        ]
      },
      "Secp256k1SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "Secp256r1SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "SequenceNumber": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "Signature": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519SuiSignature"
            ],
            "properties": {
              "Ed25519SuiSignature": {
                "$ref": "#/components/schemas/Ed25519SuiSignature"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1SuiSignature"
            ],
            "properties": {
              "Secp256k1SuiSignature": {
                "$ref": "#/components/schemas/Secp256k1SuiSignature"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256r1SuiSignature"
            ],
            "properties": {
              "Secp256r1SuiSignature": {
                "$ref": "#/components/schemas/Secp256r1SuiSignature"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Stake": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "Pending"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "estimatedReward",
              "status"
            ],
            "properties": {
              "estimatedReward": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Active"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "Unstaked"
                ]
              }
            }
          }
        ],
        "required": [
          "principal",
          "stakeActiveEpoch",
          "stakeRequestEpoch",
          "stakedSuiId"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "stakeActiveEpoch": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "stakeRequestEpoch": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "stakedSuiId": {
            "description": "ID of the StakedSui receipt object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          }
        }
      },
      "SuiAddress": {
        "$ref": "#/components/schemas/Hex"
      },
      "SuiArgument": {
        "description": "An argument to a transaction in a programmable transaction block",
        "oneOf": [
          {
            "description": "The gas coin. The gas coin can only be used by-ref, except for with `TransferObjects`, which can use it by-value.",
            "type": "string",
            "enum": [
              "GasCoin"
            ]
          },
          {
            "description": "One of the input objects or primitive values (from `ProgrammableTransactionBlock` inputs)",
            "type": "object",
            "required": [
              "Input"
            ],
            "properties": {
              "Input": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The result of another transaction (from `ProgrammableTransactionBlock` transactions)",
            "type": "object",
            "required": [
              "Result"
            ],
            "properties": {
              "Result": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Like a `Result` but it accesses a nested result. Currently, the only usage of this is to access a value from a Move call with multiple return values.",
            "type": "object",
            "required": [
              "NestedResult"
            ],
            "properties": {
              "NestedResult": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0.0
                  },
                  {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0.0
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiCallArg": {
        "oneOf": [
          {
            "type": "object",
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "digest",
                  "objectId",
                  "objectType",
                  "version"
                ],
                "properties": {
                  "digest": {
                    "$ref": "#/components/schemas/ObjectDigest"
                  },
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string",
                    "enum": [
                      "immOrOwnedObject"
                    ]
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "initialSharedVersion",
                  "mutable",
                  "objectId",
                  "objectType"
                ],
                "properties": {
                  "initialSharedVersion": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  },
                  "mutable": {
                    "type": "boolean"
                  },
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string",
                    "enum": [
                      "sharedObject"
                    ]
                  }
                }
              }
            ],
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "object"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "pure"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/SuiJsonValue"
              },
              "valueType": {
                "default": null,
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        ]
      },
      "SuiCoinMetadata": {
        "type": "object",
        "required": [
          "decimals",
          "description",
          "name",
          "symbol"
        ],
        "properties": {
          "decimals": {
            "description": "Number of decimal places the coin uses.",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "description": {
            "description": "Description of the token",
            "type": "string"
          },
          "iconUrl": {
            "description": "URL for the token logo",
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "description": "Object id for the CoinMetadata object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "description": "Name for the token",
            "type": "string"
          },
          "symbol": {
            "description": "Symbol for the token",
            "type": "string"
          }
        }
      },
      "SuiExecutionResult": {
        "type": "object",
        "properties": {
          "mutableReferenceOutputs": {
            "description": "The value of any arguments that were mutably borrowed. Non-mut borrowed values are not included",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/SuiArgument"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                {
                  "$ref": "#/components/schemas/TypeTag"
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          },
          "returnValues": {
            "description": "The return values from the transaction",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                {
                  "$ref": "#/components/schemas/TypeTag"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "SuiJsonValue": {},
      "SuiMoveAbility": {
        "type": "string",
        "enum": [
          "Copy",
          "Drop",
          "Store",
          "Key"
        ]
      },
      "SuiMoveAbilitySet": {
        "type": "object",
        "required": [
          "abilities"
        ],
        "properties": {
          "abilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbility"
            }
          }
        }
      },
      "SuiMoveModuleId": {
        "type": "object",
        "required": [
          "address",
          "name"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SuiMoveNormalizedField": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SuiMoveNormalizedType"
          }
        }
      },
      "SuiMoveNormalizedFunction": {
        "type": "object",
        "required": [
          "isEntry",
          "parameters",
          "return",
          "typeParameters",
          "visibility"
        ],
        "properties": {
          "isEntry": {
            "type": "boolean"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "return": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "typeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbilitySet"
            }
          },
          "visibility": {
            "$ref": "#/components/schemas/SuiMoveVisibility"
          }
        }
      },
      "SuiMoveNormalizedModule": {
        "type": "object",
        "required": [
          "address",
          "exposedFunctions",
          "fileFormatVersion",
          "friends",
          "name",
          "structs"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "exposedFunctions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
            }
          },
          "fileFormatVersion": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveModuleId"
            }
          },
          "name": {
            "type": "string"
          },
          "structs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
            }
          }
        }
      },
      "SuiMoveNormalizedStruct": {
        "type": "object",
        "required": [
          "abilities",
          "fields",
          "typeParameters"
        ],
        "properties": {
          "abilities": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedField"
            }
          },
          "typeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveStructTypeParameter"
            }
          }
        }
      },
      "SuiMoveNormalizedType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Bool",
              "U8",
              "U16",
              "U32",
              "U64",
              "U128",
              "U256",
              "Address",
              "Signer"
            ]
          },
          {
            "type": "object",
            "required": [
              "Struct"
            ],
            "properties": {
              "Struct": {
                "type": "object",
                "required": [
                  "address",
                  "module",
                  "name",
                  "typeArguments"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "module": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "typeArguments": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiMoveNormalizedType"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Vector"
            ],
            "properties": {
              "Vector": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "TypeParameter"
            ],
            "properties": {
              "TypeParameter": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Reference"
            ],
            "properties": {
              "Reference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MutableReference"
            ],
            "properties": {
              "MutableReference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiMoveStructTypeParameter": {
        "type": "object",
        "required": [
          "constraints",
          "isPhantom"
        ],
        "properties": {
          "constraints": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "isPhantom": {
            "type": "boolean"
          }
        }
      },
      "SuiMoveVisibility": {
        "type": "string",
        "enum": [
          "Private",
          "Public",
          "Friend"
        ]
      },
      "SuiObjectDataFilter": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MatchAll"
            ],
            "properties": {
              "MatchAll": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SuiObjectDataFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MatchAny"
            ],
            "properties": {
              "MatchAny": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SuiObjectDataFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MatchNone"
            ],
            "properties": {
              "MatchNone": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SuiObjectDataFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by type a specified Package.",
            "type": "object",
            "required": [
              "Package"
            ],
            "properties": {
              "Package": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by type a specified Move module.",
            "type": "object",
            "required": [
              "MoveModule"
            ],
            "properties": {
              "MoveModule": {
                "type": "object",
                "required": [
                  "module",
                  "package"
                ],
                "properties": {
                  "module": {
                    "description": "the module name",
                    "type": "string"
                  },
                  "package": {
                    "description": "the Move package ID",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ObjectID"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by type",
            "type": "object",
            "required": [
              "StructType"
            ],
            "properties": {
              "StructType": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "AddressOwner"
            ],
            "properties": {
              "AddressOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ObjectOwner"
            ],
            "properties": {
              "ObjectOwner": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ObjectId"
            ],
            "properties": {
              "ObjectId": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ObjectIds"
            ],
            "properties": {
              "ObjectIds": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectID"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Version"
            ],
            "properties": {
              "Version": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiObjectResponse": {
        "type": "object",
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectData"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectResponseError"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "SuiProgrammableMoveCall": {
        "description": "The transaction for calling a Move function, either an entry function or a public function (which cannot return references).",
        "type": "object",
        "required": [
          "function",
          "module",
          "package"
        ],
        "properties": {
          "arguments": {
            "description": "The arguments to the function.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiArgument"
            }
          },
          "function": {
            "description": "The function to be called.",
            "type": "string"
          },
          "module": {
            "description": "The specific module in the package containing the function.",
            "type": "string"
          },
          "package": {
            "description": "The package containing the module and function.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "type_arguments": {
            "description": "The type arguments to the function.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SuiSystemStateSummary": {
        "description": "This is the JSON-RPC type for the SUI system state object. It flattens all fields to make them top-level fields such that it as minimum dependencies to the internal data structures of the SUI system state type.",
        "type": "object",
        "required": [
          "activeValidators",
          "atRiskValidators",
          "epoch",
          "epochDurationMs",
          "epochStartTimestampMs",
          "inactivePoolsId",
          "inactivePoolsSize",
          "maxValidatorCount",
          "minValidatorJoiningStake",
          "pendingActiveValidatorsId",
          "pendingActiveValidatorsSize",
          "pendingRemovals",
          "protocolVersion",
          "referenceGasPrice",
          "safeMode",
          "safeModeComputationRewards",
          "safeModeNonRefundableStorageFee",
          "safeModeStorageRebates",
          "safeModeStorageRewards",
          "stakeSubsidyBalance",
          "stakeSubsidyCurrentDistributionAmount",
          "stakeSubsidyDecreaseRate",
          "stakeSubsidyDistributionCounter",
          "stakeSubsidyPeriodLength",
          "stakeSubsidyStartEpoch",
          "stakingPoolMappingsId",
          "stakingPoolMappingsSize",
          "storageFundNonRefundableBalance",
          "storageFundTotalObjectStorageRebates",
          "systemStateVersion",
          "totalStake",
          "validatorCandidatesId",
          "validatorCandidatesSize",
          "validatorLowStakeGracePeriod",
          "validatorLowStakeThreshold",
          "validatorReportRecords",
          "validatorVeryLowStakeThreshold"
        ],
        "properties": {
          "activeValidators": {
            "description": "The list of active validators in the current epoch.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiValidatorSummary"
            }
          },
          "atRiskValidators": {
            "description": "Map storing the number of epochs for which each validator has been below the low stake threshold.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/SuiAddress"
                },
                {
                  "$ref": "#/components/schemas/BigInt_for_uint64"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "epoch": {
            "description": "The current epoch ID, starting from 0.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "epochDurationMs": {
            "description": "The duration of an epoch, in milliseconds.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "epochStartTimestampMs": {
            "description": "Unix timestamp of the current epoch start",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "inactivePoolsId": {
            "description": "ID of the object that maps from a staking pool ID to the inactive validator that has that pool as its staking pool.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "inactivePoolsSize": {
            "description": "Number of inactive staking pools.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "maxValidatorCount": {
            "description": "Maximum number of active validators at any moment. We do not allow the number of validators in any epoch to go above this.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "minValidatorJoiningStake": {
            "description": "Lower-bound on the amount of stake required to become a validator.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "pendingActiveValidatorsId": {
            "description": "ID of the object that contains the list of new validators that will join at the end of the epoch.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "pendingActiveValidatorsSize": {
            "description": "Number of new validators that will join at the end of the epoch.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "pendingRemovals": {
            "description": "Removal requests from the validators. Each element is an index pointing to `active_validators`.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BigInt_for_uint64"
            }
          },
          "protocolVersion": {
            "description": "The current protocol version, starting from 1.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "referenceGasPrice": {
            "description": "The reference gas price for the current epoch.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "safeMode": {
            "description": "Whether the system is running in a downgraded safe mode due to a non-recoverable bug. This is set whenever we failed to execute advance_epoch, and ended up executing advance_epoch_safe_mode. It can be reset once we are able to successfully execute advance_epoch.",
            "type": "boolean"
          },
          "safeModeComputationRewards": {
            "description": "Amount of computation rewards accumulated (and not yet distributed) during safe mode.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "safeModeNonRefundableStorageFee": {
            "description": "Amount of non-refundable storage fee accumulated during safe mode.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "safeModeStorageRebates": {
            "description": "Amount of storage rebates accumulated (and not yet burned) during safe mode.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "safeModeStorageRewards": {
            "description": "Amount of storage rewards accumulated (and not yet distributed) during safe mode.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "stakeSubsidyBalance": {
            "description": "Balance of SUI set aside for stake subsidies that will be drawn down over time.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "stakeSubsidyCurrentDistributionAmount": {
            "description": "The amount of stake subsidy to be drawn down per epoch. This amount decays and decreases over time.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "stakeSubsidyDecreaseRate": {
            "description": "The rate at which the distribution amount decays at the end of each period. Expressed in basis points.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "stakeSubsidyDistributionCounter": {
            "description": "This counter may be different from the current epoch number if in some epochs we decide to skip the subsidy.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "stakeSubsidyPeriodLength": {
            "description": "Number of distributions to occur before the distribution amount decays.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "stakeSubsidyStartEpoch": {
            "description": "The starting epoch in which stake subsidies start being paid out",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "stakingPoolMappingsId": {
            "description": "ID of the object that maps from staking pool's ID to the sui address of a validator.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "stakingPoolMappingsSize": {
            "description": "Number of staking pool mappings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "storageFundNonRefundableBalance": {
            "description": "The non-refundable portion of the storage fund coming from storage reinvestment, non-refundable storage rebates and any leftover staking rewards.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "storageFundTotalObjectStorageRebates": {
            "description": "The storage rebates of all the objects on-chain stored in the storage fund.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "systemStateVersion": {
            "description": "The current version of the system state data structure type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "totalStake": {
            "description": "Total amount of stake from all active validators at the beginning of the epoch.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "validatorCandidatesId": {
            "description": "ID of the object that stores preactive validators, mapping their addresses to their `Validator` structs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "validatorCandidatesSize": {
            "description": "Number of preactive validators.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "validatorLowStakeGracePeriod": {
            "description": "A validator can have stake below `validator_low_stake_threshold` for this many epochs before being kicked out.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "validatorLowStakeThreshold": {
            "description": "Validators with stake amount below `validator_low_stake_threshold` are considered to have low stake and will be escorted out of the validator set after being below this threshold for more than `validator_low_stake_grace_period` number of epochs.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "validatorReportRecords": {
            "description": "A map storing the records of validator reporting each other.",
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/SuiAddress"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuiAddress"
                  }
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "validatorVeryLowStakeThreshold": {
            "description": "Validators with stake below `validator_very_low_stake_threshold` will be removed immediately at epoch change, no grace period.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          }
        }
      },
      "SuiTransaction": {
        "description": "A single transaction in a programmable transaction block.",
        "oneOf": [
          {
            "description": "A call to either an entry or a public Move function",
            "type": "object",
            "required": [
              "MoveCall"
            ],
            "properties": {
              "MoveCall": {
                "$ref": "#/components/schemas/SuiProgrammableMoveCall"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "`(Vec<forall T:key+store. T>, address)` It sends n-objects to the specified address. These objects must have store (public transfer) and either the previous owner must be an address or the object must be newly created.",
            "type": "object",
            "required": [
              "TransferObjects"
            ],
            "properties": {
              "TransferObjects": {
                "type": "array",
                "items": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiArgument"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "description": "`(&mut Coin<T>, Vec<u64>)` -> `Vec<Coin<T>>` It splits off some amounts into a new coins with those amounts",
            "type": "object",
            "required": [
              "SplitCoins"
            ],
            "properties": {
              "SplitCoins": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiArgument"
                    }
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "description": "`(&mut Coin<T>, Vec<Coin<T>>)` It merges n-coins into the first coin",
            "type": "object",
            "required": [
              "MergeCoins"
            ],
            "properties": {
              "MergeCoins": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiArgument"
                    }
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Publishes a Move package. It takes the package bytes and a list of the package's transitive dependencies to link against on-chain.",
            "type": "object",
            "required": [
              "Publish"
            ],
            "properties": {
              "Publish": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectID"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Upgrades a Move package",
            "type": "object",
            "required": [
              "Upgrade"
            ],
            "properties": {
              "Upgrade": {
                "type": "array",
                "items": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ObjectID"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  {
                    "$ref": "#/components/schemas/SuiArgument"
                  }
                ],
                "maxItems": 3,
                "minItems": 3
              }
            },
            "additionalProperties": false
          },
          {
            "description": "`forall T: Vec<T> -> vector<T>` Given n-values of the same type, it constructs a vector. For non objects or an empty vector, the type tag must be specified.",
            "type": "object",
            "required": [
              "MakeMoveVec"
            ],
            "properties": {
              "MakeMoveVec": {
                "type": "array",
                "items": [
                  {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiArgument"
                    }
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiTransactionBlockBuilderMode": {
        "oneOf": [
          {
            "description": "Regular Sui Transactions that are committed on chain",
            "type": "string",
            "enum": [
              "Commit"
            ]
          },
          {
            "description": "Simulated transaction that allows calling any Move function with arbitrary values.",
            "type": "string",
            "enum": [
              "DevInspect"
            ]
          }
        ]
      },
      "SuiValidatorSummary": {
        "description": "This is the JSON-RPC type for the SUI validator. It flattens all inner structures to top-level fields so that they are decoupled from the internal definitions.",
        "type": "object",
        "required": [
          "commissionRate",
          "description",
          "exchangeRatesId",
          "exchangeRatesSize",
          "gasPrice",
          "imageUrl",
          "name",
          "netAddress",
          "networkPubkeyBytes",
          "nextEpochCommissionRate",
          "nextEpochGasPrice",
          "nextEpochStake",
          "operationCapId",
          "p2pAddress",
          "pendingPoolTokenWithdraw",
          "pendingStake",
          "pendingTotalSuiWithdraw",
          "poolTokenBalance",
          "primaryAddress",
          "projectUrl",
          "proofOfPossessionBytes",
          "protocolPubkeyBytes",
          "rewardsPool",
          "stakingPoolId",
          "stakingPoolSuiBalance",
          "suiAddress",
          "votingPower",
          "workerAddress",
          "workerPubkeyBytes"
        ],
        "properties": {
          "commissionRate": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "description": {
            "type": "string"
          },
          "exchangeRatesId": {
            "description": "ID of the exchange rate table object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "exchangeRatesSize": {
            "description": "Number of exchange rates in the table.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "gasPrice": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "imageUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "netAddress": {
            "type": "string"
          },
          "networkPubkeyBytes": {
            "$ref": "#/components/schemas/Base64"
          },
          "nextEpochCommissionRate": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "nextEpochGasPrice": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "nextEpochNetAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "nextEpochNetworkPubkeyBytes": {
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Base64"
              },
              {
                "type": "null"
              }
            ]
          },
          "nextEpochP2pAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "nextEpochPrimaryAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "nextEpochProofOfPossession": {
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Base64"
              },
              {
                "type": "null"
              }
            ]
          },
          "nextEpochProtocolPubkeyBytes": {
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Base64"
              },
              {
                "type": "null"
              }
            ]
          },
          "nextEpochStake": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "nextEpochWorkerAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "nextEpochWorkerPubkeyBytes": {
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Base64"
              },
              {
                "type": "null"
              }
            ]
          },
          "operationCapId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "p2pAddress": {
            "type": "string"
          },
          "pendingPoolTokenWithdraw": {
            "description": "Pending pool token withdrawn during the current epoch, emptied at epoch boundaries.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "pendingStake": {
            "description": "Pending stake amount for this epoch.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "pendingTotalSuiWithdraw": {
            "description": "Pending stake withdrawn during the current epoch, emptied at epoch boundaries.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "poolTokenBalance": {
            "description": "Total number of pool tokens issued by the pool.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "primaryAddress": {
            "type": "string"
          },
          "projectUrl": {
            "type": "string"
          },
          "proofOfPossessionBytes": {
            "$ref": "#/components/schemas/Base64"
          },
          "protocolPubkeyBytes": {
            "$ref": "#/components/schemas/Base64"
          },
          "rewardsPool": {
            "description": "The epoch stake rewards will be added here at the end of each epoch.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "stakingPoolActivationEpoch": {
            "description": "The epoch at which this pool became active.",
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "stakingPoolDeactivationEpoch": {
            "description": "The epoch at which this staking pool ceased to be active. `None` = {pre-active, active},",
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "stakingPoolId": {
            "description": "ID of the staking pool object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "stakingPoolSuiBalance": {
            "description": "The total number of SUI tokens in this pool.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            ]
          },
          "suiAddress": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "votingPower": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          },
          "workerAddress": {
            "type": "string"
          },
          "workerPubkeyBytes": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      },
      "Supply": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      },
      "TransactionBlock": {
        "type": "object",
        "required": [
          "data",
          "txSignatures"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TransactionBlockData"
          },
          "txSignatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericSignature"
            }
          }
        }
      },
      "TransactionBlockBytes": {
        "type": "object",
        "required": [
          "gas",
          "inputObjects",
          "txBytes"
        ],
        "properties": {
          "gas": {
            "description": "the gas objects to be used",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "inputObjects": {
            "description": "objects to be used in this transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputObjectKind"
            }
          },
          "txBytes": {
            "description": "BCS serialized transaction data bytes without its type tag, as base-64 encoded string.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          }
        }
      },
      "TransactionBlockData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "gasData",
              "messageVersion",
              "sender",
              "transaction"
            ],
            "properties": {
              "gasData": {
                "$ref": "#/components/schemas/GasData"
              },
              "messageVersion": {
                "type": "string",
                "enum": [
                  "v1"
                ]
              },
              "sender": {
                "$ref": "#/components/schemas/SuiAddress"
              },
              "transaction": {
                "$ref": "#/components/schemas/TransactionBlockKind"
              }
            }
          }
        ]
      },
      "TransactionBlockEffects": {
        "oneOf": [
          {
            "description": "The response from processing a transaction or a certified transaction",
            "type": "object",
            "required": [
              "executedEpoch",
              "gasObject",
              "gasUsed",
              "messageVersion",
              "status",
              "transactionDigest"
            ],
            "properties": {
              "created": {
                "description": "ObjectRef and owner of new objects created.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnedObjectRef"
                }
              },
              "deleted": {
                "description": "Object Refs of objects now deleted (the old refs).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              },
              "dependencies": {
                "description": "The set of transaction digests this transaction depends on.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionDigest"
                }
              },
              "eventsDigest": {
                "description": "The digest of the events emitted during execution, can be None if the transaction does not emit any event.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TransactionEventsDigest"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "executedEpoch": {
                "description": "The epoch when this transaction was executed.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BigInt_for_uint64"
                  }
                ]
              },
              "gasObject": {
                "description": "The updated gas object reference. Have a dedicated field for convenient access. It's also included in mutated.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnedObjectRef"
                  }
                ]
              },
              "gasUsed": {
                "$ref": "#/components/schemas/GasCostSummary"
              },
              "messageVersion": {
                "type": "string",
                "enum": [
                  "v1"
                ]
              },
              "modifiedAtVersions": {
                "description": "The version that every modified (mutated or deleted) object had before it was modified by this transaction.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionBlockEffectsModifiedAtVersions"
                }
              },
              "mutated": {
                "description": "ObjectRef and owner of mutated objects, including gas object.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnedObjectRef"
                }
              },
              "sharedObjects": {
                "description": "The object references of the shared objects used in this transaction. Empty if no shared objects were used.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              },
              "status": {
                "description": "The status of the execution",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExecutionStatus"
                  }
                ]
              },
              "transactionDigest": {
                "description": "The transaction digest",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionDigest"
                  }
                ]
              },
              "unwrapped": {
                "description": "ObjectRef and owner of objects that are unwrapped in this transaction. Unwrapped objects are objects that were wrapped into other objects in the past, and just got extracted out.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OwnedObjectRef"
                }
              },
              "unwrappedThenDeleted": {
                "description": "Object refs of objects previously wrapped in other objects but now deleted.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              },
              "wrapped": {
                "description": "Object refs of objects now wrapped in other objects.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              }
            }
          }
        ]
      },
      "TransactionBlockEffectsModifiedAtVersions": {
        "type": "object",
        "required": [
          "objectId",
          "sequenceNumber"
        ],
        "properties": {
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "sequenceNumber": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "TransactionBlockKind": {
        "oneOf": [
          {
            "description": "A system transaction that will update epoch information on-chain.",
            "type": "object",
            "required": [
              "computation_charge",
              "epoch",
              "epoch_start_timestamp_ms",
              "kind",
              "storage_charge",
              "storage_rebate"
            ],
            "properties": {
              "computation_charge": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              "epoch": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              "epoch_start_timestamp_ms": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "ChangeEpoch"
                ]
              },
              "storage_charge": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              "storage_rebate": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            }
          },
          {
            "description": "A system transaction used for initializing the initial state of the chain.",
            "type": "object",
            "required": [
              "kind",
              "objects"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "Genesis"
                ]
              },
              "objects": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectID"
                }
              }
            }
          },
          {
            "description": "A system transaction marking the start of a series of transactions scheduled as part of a checkpoint",
            "type": "object",
            "required": [
              "commit_timestamp_ms",
              "epoch",
              "kind",
              "round"
            ],
            "properties": {
              "commit_timestamp_ms": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              "epoch": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "ConsensusCommitPrologue"
                ]
              },
              "round": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            }
          },
          {
            "description": "A series of transactions where the results of one transaction can be used in future transactions",
            "type": "object",
            "required": [
              "inputs",
              "kind",
              "transactions"
            ],
            "properties": {
              "inputs": {
                "description": "Input objects or primitive values",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SuiCallArg"
                }
              },
              "kind": {
                "type": "string",
                "enum": [
                  "ProgrammableTransaction"
                ]
              },
              "transactions": {
                "description": "The transactions to be executed sequentially. A failure in any transaction will result in the failure of the entire programmable transaction block.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SuiTransaction"
                }
              }
            }
          }
        ]
      },
      "TransactionBlockResponse": {
        "type": "object",
        "required": [
          "digest"
        ],
        "properties": {
          "balanceChanges": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/BalanceChange"
            }
          },
          "checkpoint": {
            "description": "The checkpoint number when this transaction was included and hence finalized. This is only returned in the read api, not in the transaction execution api.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "confirmedLocalExecution": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "digest": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "effects": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionBlockEffects"
              },
              {
                "type": "null"
              }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "events": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "objectChanges": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ObjectChange"
            }
          },
          "rawTransaction": {
            "description": "BCS encoded [SenderSignedData] that includes input object references returns empty array if `show_raw_transaction` is false",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          },
          "timestampMs": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              },
              {
                "type": "null"
              }
            ]
          },
          "transaction": {
            "description": "Transaction input data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionBlock"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "TransactionBlockResponseOptions": {
        "type": "object",
        "properties": {
          "showBalanceChanges": {
            "description": "Whether to show balance_changes. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showEffects": {
            "description": "Whether to show transaction effects. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showEvents": {
            "description": "Whether to show transaction events. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showInput": {
            "description": "Whether to show transaction input data. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showObjectChanges": {
            "description": "Whether to show object_changes. Default to be False",
            "default": false,
            "type": "boolean"
          },
          "showRawInput": {
            "description": "Whether to show bcs-encoded transaction input data",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "TransactionBlockResponseQuery": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "If None, no filter will be applied",
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "options": {
            "description": "config which fields to include in the response, by default only digest is included",
            "default": null,
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionBlockResponseOptions"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "TransactionDigest": {
        "description": "A transaction will have a (unique) digest.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Digest"
          }
        ]
      },
      "TransactionEventsDigest": {
        "$ref": "#/components/schemas/Digest"
      },
      "TransactionFilter": {
        "oneOf": [
          {
            "description": "Query by checkpoint.",
            "type": "object",
            "required": [
              "Checkpoint"
            ],
            "properties": {
              "Checkpoint": {
                "$ref": "#/components/schemas/BigInt_for_uint64"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by move function.",
            "type": "object",
            "required": [
              "MoveFunction"
            ],
            "properties": {
              "MoveFunction": {
                "type": "object",
                "required": [
                  "package"
                ],
                "properties": {
                  "function": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "module": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "package": {
                    "$ref": "#/components/schemas/ObjectID"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by input object.",
            "type": "object",
            "required": [
              "InputObject"
            ],
            "properties": {
              "InputObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by changed object, including created, mutated and unwrapped objects.",
            "type": "object",
            "required": [
              "ChangedObject"
            ],
            "properties": {
              "ChangedObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by sender address.",
            "type": "object",
            "required": [
              "FromAddress"
            ],
            "properties": {
              "FromAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by recipient address.",
            "type": "object",
            "required": [
              "ToAddress"
            ],
            "properties": {
              "ToAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by sender and recipient address.",
            "type": "object",
            "required": [
              "FromAndToAddress"
            ],
            "properties": {
              "FromAndToAddress": {
                "type": "object",
                "required": [
                  "from",
                  "to"
                ],
                "properties": {
                  "from": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "to": {
                    "$ref": "#/components/schemas/SuiAddress"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by transaction kind",
            "type": "object",
            "required": [
              "TransactionKind"
            ],
            "properties": {
              "TransactionKind": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransferObjectParams": {
        "type": "object",
        "required": [
          "objectId",
          "recipient"
        ],
        "properties": {
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TypeOrigin": {
        "description": "Identifies a struct and the module it was defined in",
        "type": "object",
        "required": [
          "module_name",
          "package",
          "struct_name"
        ],
        "properties": {
          "module_name": {
            "type": "string"
          },
          "package": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "struct_name": {
            "type": "string"
          }
        }
      },
      "TypeTag": {
        "type": "string"
      },
      "UpgradeInfo": {
        "description": "Upgraded package info for the linkage table",
        "type": "object",
        "required": [
          "upgraded_id",
          "upgraded_version"
        ],
        "properties": {
          "upgraded_id": {
            "description": "ID of the upgraded packages",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "upgraded_version": {
            "description": "Version of the upgraded package",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ValidatorApy": {
        "type": "object",
        "required": [
          "address",
          "apy"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "apy": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ValidatorApys": {
        "type": "object",
        "required": [
          "apys",
          "epoch"
        ],
        "properties": {
          "apys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorApy"
            }
          },
          "epoch": {
            "$ref": "#/components/schemas/BigInt_for_uint64"
          }
        }
      }
    }
  }
}
