{
  "openrpc": "1.2.6",
  "info": {
    "title": "Sui JSON-RPC",
    "description": "Sui JSON-RPC API for interaction with the Sui network gateway.",
    "contact": {
      "name": "Mysten Labs",
      "url": "https://mystenlabs.com",
      "email": "build@mystenlabs.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"
    },
    "version": "0.6.1"
  },
  "methods": [
    {
      "name": "sui_batchTransaction",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned batched transaction.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "single_transaction_params",
          "description": "list of transaction request parameters",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RPCTransactionRequestParams"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      },
      "examples": [
        {
          "name": "Create unsigned batch transaction data.",
          "params": [
            {
              "name": "signer",
              "value": "0x9b07815f04497e2e05d22cac3aa061410b20868c"
            },
            {
              "name": "single_transaction_params",
              "value": [
                {
                  "moveCallRequestParams": {
                    "arguments": [
                      "Example NFT",
                      "An NFT created by the Sui Command Line Tool",
                      "ipfs://bafkreibngqhl3gaa7daob4i2vccziay2jjlp435cf66vhono7nrvww53ty"
                    ],
                    "function": "mint",
                    "module": "devnet_nft",
                    "packageObjectId": "0x0000000000000000000000000000000000000002",
                    "typeArguments": []
                  }
                },
                {
                  "transferObjectRequestParams": {
                    "objectId": "0xefef92cbf44b581f23222c10916b17a369b4da03",
                    "recipient": "0xc619154c42a1c61be9902717b24b8ec168fe4896"
                  }
                }
              ]
            },
            {
              "name": "gas",
              "value": "0xf5b70ccb10f1a705e061d0fdfa189618d28b0d44"
            },
            {
              "name": "gas_budget",
              "value": 1000
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "gas": {
                "digest": "awpBQDJ2Q3sl8P++iXz0dsB3fp0kb/OXSsXxs1CqFsQ=",
                "objectId": "0xf5b70ccb10f1a705e061d0fdfa189618d28b0d44",
                "version": 1
              },
              "inputObjects": [
                {
                  "MovePackage": "0x0000000000000000000000000000000000000002"
                },
                {
                  "ImmOrOwnedMoveObject": {
                    "digest": "+N7M88PFGPFG3pVU8D8nqD1bEYXznnHvNX4r2eE5YlE=",
                    "objectId": "0xefef92cbf44b581f23222c10916b17a369b4da03",
                    "version": 1
                  }
                },
                {
                  "ImmOrOwnedMoveObject": {
                    "digest": "awpBQDJ2Q3sl8P++iXz0dsB3fp0kb/OXSsXxs1CqFsQ=",
                    "objectId": "0xf5b70ccb10f1a705e061d0fdfa189618d28b0d44",
                    "version": 1
                  }
                }
              ],
              "txBytes": "VHJhbnNhY3Rpb25EYXRhOjoBAgIAAAAAAAAAAAAAAAAAAAAAAAAAAgEAAAAAAAAAIJ0HWVK1gDbyp7VhRGWSQDxnLw2+Ep8eORE/n2Fk6ihnCmRldm5ldF9uZnQEbWludAADAAtFeGFtcGxlIE5GVAArQW4gTkZUIGNyZWF0ZWQgYnkgdGhlIFN1aSBDb21tYW5kIExpbmUgVG9vbABCaXBmczovL2JhZmtyZWlibmdxaGwzZ2FhN2Rhb2I0aTJ2Y2N6aWF5MmpqbHA0MzVjZjY2dmhvbm83bnJ2d3c1M3R5AMYZFUxCocYb6ZAnF7JLjsFo/kiW7++Sy/RLWB8jIiwQkWsXo2m02gMBAAAAAAAAACD43szzw8UY8UbelVTwPyeoPVsRhfOece81fivZ4TliUZsHgV8ESX4uBdIsrDqgYUELIIaM9bcMyxDxpwXgYdD9+hiWGNKLDUQBAAAAAAAAACBrCkFAMnZDeyXw/76JfPR2wHd+nSRv85dKxfGzUKoWxAEAAAAAAAAA6AMAAAAAAAA="
            }
          }
        }
      ]
    },
    {
      "name": "sui_executeTransaction",
      "tags": [
        {
          "name": "Gateway Transaction Execution API"
        }
      ],
      "description": "Execute the transaction using the transaction data, signature and public key.",
      "params": [
        {
          "name": "tx_bytes",
          "description": "transaction data bytes, as base-64 encoded string",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "sig_scheme",
          "description": "Flag of the signature scheme that is used.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SignatureScheme"
          }
        },
        {
          "name": "signature",
          "description": "transaction signature, as base-64 encoded string",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "pub_key",
          "description": "signer's public key, as base-64 encoded string",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiTransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Execute an object transfer transaction",
          "params": [
            {
              "name": "tx_bytes",
              "value": "VHJhbnNhY3Rpb25EYXRhOjoAAENs56klSzDSU+RWfMr6XzbOhMgKqLyb5k4NWueWiEJ0rvMAWuZzOAkCAAAAAAAAACAyE4rjTSLmOXrzqaceTvofutFssM+v3lsohIWOg/pBRqB5d3G4/iYvpOg6GofMBk8jRD6NyOwdW4TdYonhk7n4jeSplDWMn4UCAAAAAAAAACBhNSNsPnWpJeHHesNBJ8i6776gk58VJHErTTegILKM3QEAAAAAAAAA6AMAAAAAAAA="
            },
            {
              "name": "sig_scheme",
              "value": "ED25519"
            },
            {
              "name": "signature",
              "value": "0Pu2s/M1xPeMArRmsLnIosKcqi9BWDFUJp6IVUHEtJlz7vp2wAv227n5gNn059Vm7FUfYs36P5eHrQ6IaW57BQ=="
            },
            {
              "name": "pub_key",
              "value": "i4VvPsULQhSm++R+hpszac5EOLnJbh02NAMScP/4+L0="
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "certificate": {
                "authSignInfo": {
                  "epoch": 0,
                  "signature": [],
                  "signers_map": [
                    58,
                    48,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                  ]
                },
                "data": {
                  "gasBudget": 1000,
                  "gasPayment": {
                    "digest": "YTUjbD51qSXhx3rDQSfIuu++oJOfFSRxK003oCCyjN0=",
                    "objectId": "0xc8ec1d5b84dd6289e193b9f88de4a994358c9f85",
                    "version": 2
                  },
                  "sender": "0xa0797771b8fe262fa4e83a1a87cc064f23443e8d",
                  "transactions": [
                    {
                      "TransferObject": {
                        "objectRef": {
                          "digest": "MhOK400i5jl686mnHk76H7rRbLDPr95bKISFjoP6QUY=",
                          "objectId": "0xa8bc9be64e0d5ae796884274aef3005ae6733809",
                          "version": 2
                        },
                        "recipient": "0x436ce7a9254b30d253e4567ccafa5f36ce84c80a"
                      }
                    }
                  ]
                },
                "transactionDigest": "3ZYtbN7kBODGlHCjuPQVVjwkGlt5Jwb7q1qYEPuF2to=",
                "txSignature": "AND7trPzNcT3jAK0ZrC5yKLCnKovQVgxVCaeiFVBxLSZc+76dsAL9tu5+YDZ9OfVZuxVH2LN+j+Xh60OiGluewWLhW8+xQtCFKb75H6GmzNpzkQ4ucluHTY0AxJw//j4vQ=="
              },
              "effects": {
                "events": [
                  {
                    "transferObject": {
                      "amount": 100,
                      "objectId": "0xa8bc9be64e0d5ae796884274aef3005ae6733809",
                      "packageId": "0x0000000000000000000000000000000000000002",
                      "recipient": {
                        "AddressOwner": "0x436ce7a9254b30d253e4567ccafa5f36ce84c80a"
                      },
                      "sender": "0xa0797771b8fe262fa4e83a1a87cc064f23443e8d",
                      "transactionModule": "native",
                      "type": "ToAddress",
                      "version": 2
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0xa0797771b8fe262fa4e83a1a87cc064f23443e8d"
                  },
                  "reference": {
                    "digest": "YTUjbD51qSXhx3rDQSfIuu++oJOfFSRxK003oCCyjN0=",
                    "objectId": "0xc8ec1d5b84dd6289e193b9f88de4a994358c9f85",
                    "version": 2
                  }
                },
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0xa0797771b8fe262fa4e83a1a87cc064f23443e8d"
                    },
                    "reference": {
                      "digest": "YTUjbD51qSXhx3rDQSfIuu++oJOfFSRxK003oCCyjN0=",
                      "objectId": "0xc8ec1d5b84dd6289e193b9f88de4a994358c9f85",
                      "version": 2
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0x436ce7a9254b30d253e4567ccafa5f36ce84c80a"
                    },
                    "reference": {
                      "digest": "MhOK400i5jl686mnHk76H7rRbLDPr95bKISFjoP6QUY=",
                      "objectId": "0xa8bc9be64e0d5ae796884274aef3005ae6733809",
                      "version": 2
                    }
                  }
                ],
                "status": {
                  "status": "success"
                },
                "transactionDigest": "w05NXKj399+qCDscEa9LhE/5Sz++9uNrUY2jrUxYVvo="
              },
              "parsed_data": null,
              "timestamp_ms": null
            }
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByModule",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events emitted in a specified Move module",
      "params": [
        {
          "name": "package",
          "description": "the Move package ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "description": "the module name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events emitted in a specified Move module",
          "params": [
            {
              "name": "package",
              "value": "0x0000000000000000000000000000000000000002"
            },
            {
              "name": "module",
              "value": "devnet_nft"
            },
            {
              "name": "count",
              "value": 5
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "event": {
                  "transferObject": {
                    "amount": 100,
                    "objectId": "0x2a017bf2fb0bd930d1ec22c06f1ee4e451ceab2e",
                    "packageId": "0x0000000000000000000000000000000000000002",
                    "recipient": {
                      "AddressOwner": "0x5473399fa6f5a7953a75dc632e696cabe6056052"
                    },
                    "sender": "0x0311f86eac9eff72a3dea3eed530cf009496a9e4",
                    "transactionModule": "native",
                    "type": "ToAddress",
                    "version": 2
                  }
                },
                "timestamp": 0,
                "txDigest": "qYkACgnFQpmVizagXLPddyKyaGnlCPMITa+ztbwtl10="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByMoveEventStructName",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events with the given move event struct name",
      "params": [
        {
          "name": "move_event_struct_name",
          "description": "the event struct name type, e.g. `0x2::devnet_nft::MintNFTEvent` or `0x2::SUI::test_foo<address, vector<u8>>` with type params",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events with the given move event struct name",
          "params": [
            {
              "name": "move_event_struct_name",
              "value": "0x2::devnet_nft::MintNFTEvent"
            },
            {
              "name": "count",
              "value": 5
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "event": {
                  "moveEvent": {
                    "bcs": "",
                    "packageId": "0x0000000000000000000000000000000000000002",
                    "sender": "0x9421e7ad826ba13aca8ae41316644f06759b4506",
                    "transactionModule": "devnet_nft",
                    "type": "0x2::devnet_nft::MintNFTEvent"
                  }
                },
                "timestamp": 0,
                "txDigest": "BdpX12YTcSdi2lT/nFiCVo6rjl/klChCPP16wmhK66c="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByObject",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events associated with the given object",
      "params": [
        {
          "name": "object",
          "description": "the object ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events associated with the given object",
          "params": [
            {
              "name": "object",
              "value": "0x50201d79d05c061f8dde264724ab51a21c752e81"
            },
            {
              "name": "count",
              "value": 2
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "event": {
                  "transferObject": {
                    "amount": 100,
                    "objectId": "0x50201d79d05c061f8dde264724ab51a21c752e81",
                    "packageId": "0x0000000000000000000000000000000000000002",
                    "recipient": {
                      "AddressOwner": "0x4ffd121168fea245f41987bb8ed5999079e1d0bc"
                    },
                    "sender": "0x88a7cf64770f8b94cc5a71565037e3aaecf24bcd",
                    "transactionModule": "native",
                    "type": "ToAddress",
                    "version": 2
                  }
                },
                "timestamp": 0,
                "txDigest": "YDXsyrmpWnDfSXvPH192lXyAd0XTWix9+dcxFisLce8="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByRecipient",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events associated with the given recipient",
      "params": [
        {
          "name": "recipient",
          "description": "the recipient",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Owner"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events associated with the given recipient",
          "params": [
            {
              "name": "recipient",
              "value": {
                "AddressOwner": "0x9152d2c2e86d8a9bdbd242b32564cd31a71cf983"
              }
            },
            {
              "name": "count",
              "value": 2
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "event": {
                  "transferObject": {
                    "amount": 100,
                    "objectId": "0x3609b111436d8f0f47b7f8b9927ec3f8975a1dcb",
                    "packageId": "0x0000000000000000000000000000000000000002",
                    "recipient": {
                      "AddressOwner": "0x9152d2c2e86d8a9bdbd242b32564cd31a71cf983"
                    },
                    "sender": "0xb2dd3cc1e697368c87b1bb38ca7546242ac59eac",
                    "transactionModule": "native",
                    "type": "ToAddress",
                    "version": 2
                  }
                },
                "timestamp": 0,
                "txDigest": "xgKBdSV4zz7DXX9L7i/TRRMZFkyjTWgmpNPG/yC73cY="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsBySender",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events associated with the given sender.",
      "params": [
        {
          "name": "sender",
          "description": "the sender's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events associated with the given sender",
          "params": [
            {
              "name": "sender",
              "value": "0xabf5b52e850e52cae100f0765761bb21b4d687b4"
            },
            {
              "name": "count",
              "value": 2
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "event": {
                  "transferObject": {
                    "amount": 100,
                    "objectId": "0xc952002a71ea08ffdb2fd0ea41696ca3ea204b35",
                    "packageId": "0x0000000000000000000000000000000000000002",
                    "recipient": {
                      "AddressOwner": "0x7cfa772baf3e837891413e94b1915b08fb41181b"
                    },
                    "sender": "0xabf5b52e850e52cae100f0765761bb21b4d687b4",
                    "transactionModule": "native",
                    "type": "ToAddress",
                    "version": 2
                  }
                },
                "timestamp": 0,
                "txDigest": "Gx6JFSMqjJva4TTaScnHMDdx3Er26p1CdrYvjPpCr8M="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByTimeRange",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events emitted in [start_time, end_time) interval",
      "params": [
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events emitted in [start_time, end_time) interval",
          "params": [
            {
              "name": "count",
              "value": 2
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "event": {
                  "transferObject": {
                    "amount": 100,
                    "objectId": "0xf96ef8bab1b6d79fbfa88548f44d295a385dc354",
                    "packageId": "0x0000000000000000000000000000000000000002",
                    "recipient": {
                      "AddressOwner": "0x0d4dc2f8623f7e6956c4b75a738cf80e869ecbcc"
                    },
                    "sender": "0xa7c56b2372da9e46391e0f3f53cbdd30ed72ee3c",
                    "transactionModule": "native",
                    "type": "ToAddress",
                    "version": 2
                  }
                },
                "timestamp": 0,
                "txDigest": "TJSX4MYLa32T+91YOzyyx9jRjPbCIwGk+OipYsV7ugs="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByTransaction",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events emitted by the given transaction.",
      "params": [
        {
          "name": "digest",
          "description": "digest of the transaction, as base-64 encoded string",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events emitted by a transaction",
          "params": [
            {
              "name": "digest",
              "value": "fnN9Rpq0f28g7c7/DQpu7TZZ8h7/Ijko92rEfCW8HaI="
            },
            {
              "name": "count",
              "value": 2
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "event": {
                  "transferObject": {
                    "amount": 100,
                    "objectId": "0xa76be9ec0b5d72879b091d6d6d8f832ef94830cb",
                    "packageId": "0x0000000000000000000000000000000000000002",
                    "recipient": {
                      "AddressOwner": "0xdd9c66a2024b544c7623b91b0c1f72234f841e8e"
                    },
                    "sender": "0x7f01739d485f16f1e5c26732d96f70a2805d3107",
                    "transactionModule": "native",
                    "type": "ToAddress",
                    "version": 2
                  }
                },
                "timestamp": 0,
                "txDigest": "fnN9Rpq0f28g7c7/DQpu7TZZ8h7/Ijko92rEfCW8HaI="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getMoveFunctionArgTypes",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return the argument types of a Move function, based on normalized Type.",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Vec<MoveFunctionArgType>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MoveFunctionArgType"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveFunction",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return a structured representation of Move function",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedFunction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModule",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return a structured representation of Move module",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedModule",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedModule"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModulesByPackage",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return structured representations of all modules in the given package",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "BTreeMap<String,SuiMoveNormalizedModule>",
        "required": true,
        "schema": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/SuiMoveNormalizedModule"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveStruct",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return a structured representation of Move struct",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "struct_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedStruct",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
        }
      }
    },
    {
      "name": "sui_getObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the object information for a specified object",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "GetObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Object data",
          "params": [
            {
              "name": "object_id",
              "value": "0x686464524a876b463d1297603568c40e814d9d53"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "details": {
                "data": {
                  "dataType": "moveObject",
                  "fields": {
                    "balance": 10000,
                    "id": {
                      "id": "0x686464524a876b463d1297603568c40e814d9d53"
                    }
                  },
                  "has_public_transfer": true,
                  "type": "0x2::coin::Coin<0x2::coin::Coin<0x2::sui::SUI>>"
                },
                "owner": {
                  "AddressOwner": "0x96d23087a0fd641e91e0e00df6c012cded9ef9ba"
                },
                "previousTransaction": "XlvwQkZLXKZIi4l8AFsuF/APwLyOftPyq1nWB7DjWGs=",
                "reference": {
                  "digest": "2hzaTkK0FFsm+jXqGdJYsRPY4+EryiqmErME7OWyWYg=",
                  "objectId": "0x686464524a876b463d1297603568c40e814d9d53",
                  "version": 1
                },
                "storageRebate": 100
              },
              "status": "Exists"
            }
          }
        }
      ]
    },
    {
      "name": "sui_getObjectsOwnedByAddress",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the list of objects owned by an address.",
      "params": [
        {
          "name": "address",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiObjectInfo>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectInfo"
          }
        }
      },
      "examples": [
        {
          "name": "Get objects owned by an address",
          "params": [
            {
              "name": "address",
              "value": "0x818dd7234e049913233eb918c11638af89d575be"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "digest": "M0XOXxK+qf/gR0jWaWwwYxc1GTrqlbj5CCwQYgwNbj8=",
                "object_id": "0xb99003d30a245ac74a02e26e45cb80ee1b9c00a9",
                "owner": {
                  "AddressOwner": "0x818dd7234e049913233eb918c11638af89d575be"
                },
                "previous_transaction": "yVlrRTjQ3CS+w3G7PkY0Vh+IkuYEAhq5a2Mur6Ip7D0=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "version": 0
              },
              {
                "digest": "GrDoMod9YoIz4+HWT3a3GoDsTzMvTRpnQsU38rsyRzs=",
                "object_id": "0xd885442b44972526c4e8ce25a0416c3955d818bb",
                "owner": {
                  "AddressOwner": "0x818dd7234e049913233eb918c11638af89d575be"
                },
                "previous_transaction": "AbHcscqslCcipHh7sYXkeRkWkm5f2yXdhC9zarlz6H8=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "version": 0
              },
              {
                "digest": "gn7AgY4A3kspfwR8O+2kPW6fmxsbxEzfzjV05/fwst4=",
                "object_id": "0x53b4857842789a1dd59167629b3c5cabe47dbf48",
                "owner": {
                  "AddressOwner": "0x818dd7234e049913233eb918c11638af89d575be"
                },
                "previous_transaction": "IyOgbrw1a61hRyazE9gRAS1L5yN1VocSCnxt8jicNzw=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "version": 0
              },
              {
                "digest": "Vk2mienaduFDDRkfvJN9QvdBBKopGHH0udEg92WDodo=",
                "object_id": "0x8fbe06bda7a61120652668dd5687fee73fac7a2c",
                "owner": {
                  "AddressOwner": "0x818dd7234e049913233eb918c11638af89d575be"
                },
                "previous_transaction": "XREj8rigrGBrlApm5C79eCr1IDESMxrcLtb0Atyjlr8=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "version": 0
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getObjectsOwnedByObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the list of objects owned by an object.",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the owner object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiObjectInfo>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectInfo"
          }
        }
      },
      "examples": [
        {
          "name": "Get objects owned by an object",
          "params": [
            {
              "name": "object_id",
              "value": "0xe6dfa3ac8a57ea08860870fd515cf7ca6afb887d"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "digest": "COTrIpxEy5V9Kc9zcK+KG5xULUmzyDz7nGg/t9BSbik=",
                "object_id": "0xd1e09be8e451cd3c364076623c0231898be0722c",
                "owner": {
                  "ObjectOwner": "0xe6dfa3ac8a57ea08860870fd515cf7ca6afb887d"
                },
                "previous_transaction": "136J57/v1Pc62j0ZrIfUU1HwGWqIC5XD6iRN0GDStlM=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "version": 0
              },
              {
                "digest": "oUxrgSuU/mE8W867XusdRJ4lFhZtV9cf3rFU0Nyezbc=",
                "object_id": "0x8196d048b7a6d04c8edc89579d86fd3fc90c52f9",
                "owner": {
                  "ObjectOwner": "0xe6dfa3ac8a57ea08860870fd515cf7ca6afb887d"
                },
                "previous_transaction": "swBX0KkyaEysNSzcGj6JgCnQJO7B1Exq9eL6ze2E0Ds=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "version": 0
              },
              {
                "digest": "iwy/N3eS4gbmuA1NXupk4ucFY7FYkCbE43+UGkUe+CA=",
                "object_id": "0x5373514f16e3d66e0008105164bb73a1ed58b2c1",
                "owner": {
                  "ObjectOwner": "0xe6dfa3ac8a57ea08860870fd515cf7ca6afb887d"
                },
                "previous_transaction": "mg+/vxtUmyuya46u4IiVFG3ye8PPJhDBSy4nwe7VbDM=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "version": 0
              },
              {
                "digest": "i8Fgx0zYRPkiYj+ljN1u8tBTHONZ8y6L0M1fnhxO14U=",
                "object_id": "0xb579034150ea46bccf7653e00b6f24b63bd04da6",
                "owner": {
                  "ObjectOwner": "0xe6dfa3ac8a57ea08860870fd515cf7ca6afb887d"
                },
                "previous_transaction": "YCsUTXmIN9uwFHTINWbFsqU1QQ3aod0/xK8yGNdsx6o=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "version": 0
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getRawObject",
      "tags": [
        {
          "name": "BCS API"
        }
      ],
      "description": "Return the raw BCS serialized move object bytes for a specified object.",
      "params": [
        {
          "name": "object_id",
          "description": "the id of the object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "GetRawObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Raw Object data",
          "params": [
            {
              "name": "object_id",
              "value": "0x6be18004e5e38cb35ccaf18b7f1a4e3dc7b1e7ff"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "details": {
                "data": {
                  "bcs_bytes": "a+GABOXjjLNcyvGLfxpOPcex5/8QJwAAAAAAAA==",
                  "dataType": "moveObject",
                  "has_public_transfer": true,
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "version": 1
                },
                "owner": {
                  "AddressOwner": "0xd3dbd682f600d1f62dc0921f7f7dbfca95055adc"
                },
                "previousTransaction": "XhR6Hu4u3SNxRHRERonJRvaaWFkkuRxLiubUzW4eAvY=",
                "reference": {
                  "digest": "ZY0hvOm4i9zu4SlBRO7EfPOTiLtoD2m3QmvFKSlpL9w=",
                  "objectId": "0x6be18004e5e38cb35ccaf18b7f1a4e3dc7b1e7ff",
                  "version": 1
                },
                "storageRebate": 100
              },
              "status": "Exists"
            }
          }
        }
      ]
    },
    {
      "name": "sui_getRecentTransactions",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return list of recent transaction digest.",
      "params": [
        {
          "name": "count",
          "description": "maximum size of the result",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<(GatewayTxSeqNumber,TransactionDigest)>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "examples": [
        {
          "name": "Get recent transactions",
          "params": [
            {
              "name": "count",
              "value": 5
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              [
                5,
                "fS/zdMP4cPNvtyirQYeDEgbRUYH/fFB3JBdYapNjOCk="
              ],
              [
                6,
                "/LptbgzLE9Pb/nYUuB6nayVeXUNQMs2FlfN+uPwA/80="
              ],
              [
                7,
                "oAr8XqnjnLLyMlJc3O6jWkM6ew9Q6N+y4hukl8VKswo="
              ],
              [
                8,
                "PZrcB8FCnE1rvsr5RXya93qR9jF2CFOTTTg2NLz3wyY="
              ],
              [
                9,
                "VQCaYfHeDq5CCi5K4bt3KrLdXVp9+pScDvBpCOelSQA="
              ]
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getTotalTransactionNumber",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the total number of transactions known to the server.",
      "params": [],
      "result": {
        "name": "u64",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "examples": [
        {
          "name": "Get total number of transactions",
          "params": [],
          "result": {
            "name": "Result",
            "value": 100
          }
        }
      ]
    },
    {
      "name": "sui_getTransaction",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the transaction response object.",
      "params": [
        {
          "name": "digest",
          "description": "the digest of the queried transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiTransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Return the transaction response object for specified transaction digest",
          "params": [
            {
              "name": "digest",
              "value": "tA5+oGAYFPJS8Ev8AICzLCRV/nD/MaNXVu438gUH1is="
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "certificate": {
                "authSignInfo": {
                  "epoch": 0,
                  "signature": [],
                  "signers_map": [
                    58,
                    48,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                  ]
                },
                "data": {
                  "gasBudget": 1000,
                  "gasPayment": {
                    "digest": "n5D3+GbMKd+x2mNzzpT52V3KWkD04XaZGO6/n7rgC9M=",
                    "objectId": "0xa9124e5f2f38ce739eaacbb6600688804e078448",
                    "version": 2
                  },
                  "sender": "0xd072251ac17dcb63c90fed870ca4ae4b331231e2",
                  "transactions": [
                    {
                      "TransferObject": {
                        "objectRef": {
                          "digest": "jleHL0UiRGjh/BfIFHCJ3EMY/dQA22c2TvNQyVJnbYU=",
                          "objectId": "0xd9504e96a1108a178ef76f56c399633a2eb310bc",
                          "version": 2
                        },
                        "recipient": "0x3af5c8070112f808648b36efbf8dee8a1a82de46"
                      }
                    }
                  ]
                },
                "transactionDigest": "tA5+oGAYFPJS8Ev8AICzLCRV/nD/MaNXVu438gUH1is=",
                "txSignature": "AD+5IA6G0fwZm2vYgm/l22kzvxtmFr0BwBWKmbPrB5cyA82RA4TsfCBN69PqmcsFHCGFsSNQpRr+NBI25hpUHQB32W8jzj+yMVuycjaqVu09/50TQiKFNa5hyO5xmV/Ymw=="
              },
              "effects": {
                "events": [
                  {
                    "transferObject": {
                      "amount": 100,
                      "objectId": "0xd9504e96a1108a178ef76f56c399633a2eb310bc",
                      "packageId": "0x0000000000000000000000000000000000000002",
                      "recipient": {
                        "AddressOwner": "0x3af5c8070112f808648b36efbf8dee8a1a82de46"
                      },
                      "sender": "0xd072251ac17dcb63c90fed870ca4ae4b331231e2",
                      "transactionModule": "native",
                      "type": "ToAddress",
                      "version": 2
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "0xd072251ac17dcb63c90fed870ca4ae4b331231e2"
                  },
                  "reference": {
                    "digest": "n5D3+GbMKd+x2mNzzpT52V3KWkD04XaZGO6/n7rgC9M=",
                    "objectId": "0xa9124e5f2f38ce739eaacbb6600688804e078448",
                    "version": 2
                  }
                },
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "0xd072251ac17dcb63c90fed870ca4ae4b331231e2"
                    },
                    "reference": {
                      "digest": "n5D3+GbMKd+x2mNzzpT52V3KWkD04XaZGO6/n7rgC9M=",
                      "objectId": "0xa9124e5f2f38ce739eaacbb6600688804e078448",
                      "version": 2
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "0x3af5c8070112f808648b36efbf8dee8a1a82de46"
                    },
                    "reference": {
                      "digest": "jleHL0UiRGjh/BfIFHCJ3EMY/dQA22c2TvNQyVJnbYU=",
                      "objectId": "0xd9504e96a1108a178ef76f56c399633a2eb310bc",
                      "version": 2
                    }
                  }
                ],
                "status": {
                  "status": "success"
                },
                "transactionDigest": "fcN/rn2TKYoSRcMbQgaIwWhstNE1bRcYDdguk6SDxas="
              },
              "parsed_data": null,
              "timestamp_ms": null
            }
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsByInputObject",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return list of transactions for a specified input object.",
      "params": [
        {
          "name": "object",
          "description": "the ID of the input object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "Vec<(GatewayTxSeqNumber,TransactionDigest)>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified input object",
          "params": [
            {
              "name": "object",
              "value": "0x8e83f6e198d2d7d17ba91ddc7e717cf708c93706"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              [
                5,
                "XwGimIeh2V5bVIthbaY7DOB9gW6J73uaOCF3tEIruqI="
              ],
              [
                6,
                "f35iXqMZqgoYSGZv/tIpGuJKP4F3NToFIg12XKnEIaM="
              ],
              [
                7,
                "aAg/GP5HLzlVfcQqrv7rjBVNfdxFa4rqoxMsdANTHck="
              ]
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsByMoveFunction",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return list of transactions for a specified move function.",
      "params": [
        {
          "name": "package",
          "description": "the Move package ID, e.g. `0x2`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "description": "the Move module name, e.g. `devnet_nft`",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "description": "the move function name, e.g. `mint`",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Vec<(GatewayTxSeqNumber,TransactionDigest)>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified input object",
          "params": [
            {
              "name": "package",
              "value": "0x0000000000000000000000000000000000000002"
            },
            {
              "name": "module",
              "value": "devnet_nft"
            },
            {
              "name": "function",
              "value": "function"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              [
                6,
                "DwQEhzbsM/sXRtmZpeWM1cZ37YBPgvHIWHuY1kwAv7Q="
              ],
              [
                7,
                "bDhDvYv2zPp8ZahhOGmM0f3Kw9zo2MfOhj8xPaPb2So="
              ],
              [
                8,
                "g+8m0Si4j+Zr8m4ODQnNr3J9HYTMyql6Asw6mAQWcOE="
              ],
              [
                9,
                "YJ23FOmFjJbp5GmFXxzzv9+X6GWxDABG4pPAjOwPQHg="
              ]
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsByMutatedObject",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return list of transactions for a specified mutated object.",
      "params": [
        {
          "name": "object",
          "description": "the ID of the mutated object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "Vec<(GatewayTxSeqNumber,TransactionDigest)>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified mutated object",
          "params": [
            {
              "name": "object",
              "value": "0x6cf1b9f2ec8481a26ca7d81169559794028b8f02"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              [
                5,
                "PZrEv0q7TX+CBkf9hdGRg97nx/+VVpf+K3BMlUCjhG4="
              ],
              [
                6,
                "kpi3Xbclwe4wJ7eD6mieGjjrR2xu/ETttc09/jL0v2w="
              ],
              [
                7,
                "PorELu8TheAUA+SaSylq3LIuon08kuTOIlasZFy6vcM="
              ]
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsFromAddress",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return list of transactions for a specified sender's Sui address.",
      "params": [
        {
          "name": "addr",
          "description": "the sender's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<(GatewayTxSeqNumber,TransactionDigest)>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified sender address",
          "params": [
            {
              "name": "addr",
              "value": "0xa22521eea933b8899efb20735a4f6aec82136eff"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              [
                5,
                "5DAqVZXYiJpnxtMcbJcOVn8D72fYEaT4Q2ZbjePygvo="
              ],
              [
                6,
                "SLPgEDupu+1qBhU7n8SG4QHw6eJwOshmbQauzE3ffnk="
              ],
              [
                7,
                "JqNhlwxlpbEsQ4BdDW9UAqetDaW97FScfN6ga8Sh0zk="
              ]
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsInRange",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return list of transaction digests within the queried range.",
      "params": [
        {
          "name": "start",
          "description": "the matching transactions' sequence number will be greater than or equals to the starting sequence number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end",
          "description": "the matching transactions' sequence number will be less than the ending sequence number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<(GatewayTxSeqNumber,TransactionDigest)>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest in range",
          "params": [
            {
              "name": "start",
              "value": 5
            },
            {
              "name": "end",
              "value": 8
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              [
                5,
                "c+aBnHN3fSsxRAWdEJYzYFOryNDoQ3EipycU+/EOvBc="
              ],
              [
                6,
                "AzxbTJGYkm3c1gMNwsHZkAgLQVgjWMbUFXCCHtL4i9w="
              ],
              [
                7,
                "k07o0WLNcF2h36DN6mjskM8fdWdamzhfR5/qfC3a0Lc="
              ]
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsToAddress",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return list of transactions for a specified recipient's Sui address.",
      "params": [
        {
          "name": "addr",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<(GatewayTxSeqNumber,TransactionDigest)>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified recipient address",
          "params": [
            {
              "name": "addr",
              "value": "0xb4c693a4640ee862b96bef84fa98d2fceeb4b958"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              [
                5,
                "e3WANqdP22/b6kaj68d3nEXj4UFVeTUsEotNGi9C/fs="
              ],
              [
                6,
                "ycWnOkQRk+matswqkvfTeUiJgpLXBCBBi4RQLlBnlCI="
              ],
              [
                7,
                "f4lyN3ZN3o15oBqyEEv3QqJ3oqvgNcpBxVa3IoeLmuY="
              ]
            ]
          }
        }
      ]
    },
    {
      "name": "sui_mergeCoins",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to merge multiple coins into one coin.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "primary_coin",
          "description": "the coin object to merge into, this coin will remain after the transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "coin_to_merge",
          "description": "the coin object to be merged, this coin will be destroyed, the balance will be added to `primary_coin`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_moveCall",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to execute a Move call on the network, by calling the specified function in the module of a given package.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "package_object_id",
          "description": "the Move package ID, e.g. `0x2`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "description": "the Move module name, e.g. `devnet_nft`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "description": "the move function name, e.g. `mint`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "type_arguments",
          "description": "the type arguments of the Move function",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        },
        {
          "name": "arguments",
          "description": "the arguments to be passed into the Move function, in [SuiJson](https://docs.sui.io/build/sui-json) format",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_publish",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to publish Move module.",
      "params": [
        {
          "name": "sender",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "compiled_modules",
          "description": "the compiled bytes of a move module, the",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoin",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_amounts",
          "description": "the amounts to split out from the coin",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoinEqual",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple equal-size coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_count",
          "description": "the number of coins to split into",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_subscribeEvent",
      "tags": [
        {
          "name": "Event Subscription"
        },
        {
          "name": "Websocket"
        },
        {
          "name": "PubSub"
        }
      ],
      "description": "Subscribe to a stream of Sui event",
      "params": [
        {
          "name": "filter",
          "description": "the filter criteria of the event stream, see the [Sui docs](https://docs.sui.io/build/pubsub#event-filters) for detailed examples.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventFilter"
          }
        }
      ],
      "result": {
        "name": "SuiEventEnvelope",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/EventEnvelope"
        }
      }
    },
    {
      "name": "sui_syncAccountState",
      "tags": [
        {
          "name": "Wallet Sync API"
        }
      ],
      "description": "Synchronize client state with validators.",
      "params": [
        {
          "name": "address",
          "description": "the Sui address to be synchronized",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "()",
        "required": true,
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "sui_transferObject",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to transfer an object from one address to another. The object's type must allow public transfers",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "object_id",
          "description": "the ID of the object to be transferred",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_transferSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to send SUI coin object to a Sui address. The SUI object is also used as the gas object.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "sui_object_id",
          "description": "the Sui coin object to be used in this transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "amount",
          "description": "the amount to be split out and transferred",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "AuthorityQuorumSignInfo": {
        "description": "Represents at least a quorum (could be more) of authority signatures. STRONG_THRESHOLD indicates whether to use the quorum threshold for quorum check. When STRONG_THRESHOLD is true, the quorum is valid when the total stake is at least the quorum threshold (2f+1) of the committee; when STRONG_THRESHOLD is false, the quorum is valid when the total stake is at least the validity threshold (f+1) of the committee.",
        "type": "object",
        "required": [
          "epoch",
          "signature",
          "signers_map"
        ],
        "properties": {
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "signature": {
            "$ref": "#/components/schemas/Base64"
          },
          "signers_map": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      },
      "Base64": {
        "type": "string"
      },
      "CertifiedTransaction": {
        "type": "object",
        "required": [
          "authSignInfo",
          "data",
          "transactionDigest",
          "txSignature"
        ],
        "properties": {
          "authSignInfo": {
            "description": "authority signature information, if available, is signed by an authority, applied on `data`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorityQuorumSignInfo"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TransactionData"
          },
          "transactionDigest": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "txSignature": {
            "description": "tx_signature is signed by the transaction sender, applied on `data`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Signature"
              }
            ]
          }
        }
      },
      "Data": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bcs_bytes",
              "dataType",
              "has_public_transfer",
              "type",
              "version"
            ],
            "properties": {
              "bcs_bytes": {
                "$ref": "#/components/schemas/Base64"
              },
              "child_count": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "moveObject"
                ]
              },
              "has_public_transfer": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dataType",
              "id",
              "module_map"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "package"
                ]
              },
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "module_map": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Base64"
                }
              }
            }
          }
        ]
      },
      "Ed25519SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "Event": {
        "oneOf": [
          {
            "description": "Move-specific event",
            "type": "object",
            "required": [
              "moveEvent"
            ],
            "properties": {
              "moveEvent": {
                "type": "object",
                "required": [
                  "bcs",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "type"
                ],
                "properties": {
                  "bcs": {
                    "$ref": "#/components/schemas/Base64"
                  },
                  "fields": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/MoveStruct"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Module published",
            "type": "object",
            "required": [
              "publish"
            ],
            "properties": {
              "publish": {
                "type": "object",
                "required": [
                  "packageId",
                  "sender"
                ],
                "properties": {
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transfer objects to new address / wrap in another object / coin",
            "type": "object",
            "required": [
              "transferObject"
            ],
            "properties": {
              "transferObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "packageId",
                  "recipient",
                  "sender",
                  "transactionModule",
                  "type",
                  "version"
                ],
                "properties": {
                  "amount": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "recipient": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "type": {
                    "$ref": "#/components/schemas/TransferType"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Delete object",
            "type": "object",
            "required": [
              "deleteObject"
            ],
            "properties": {
              "deleteObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "packageId",
                  "sender",
                  "transactionModule"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "New object creation",
            "type": "object",
            "required": [
              "newObject"
            ],
            "properties": {
              "newObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "packageId",
                  "recipient",
                  "sender",
                  "transactionModule"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "recipient": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Epoch change",
            "type": "object",
            "required": [
              "epochChange"
            ],
            "properties": {
              "epochChange": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "New checkpoint",
            "type": "object",
            "required": [
              "checkpoint"
            ],
            "properties": {
              "checkpoint": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventEnvelope": {
        "type": "object",
        "required": [
          "event",
          "timestamp"
        ],
        "properties": {
          "event": {
            "description": "Specific event type",
            "allOf": [
              {
                "$ref": "#/components/schemas/Event"
              }
            ]
          },
          "timestamp": {
            "description": "UTC timestamp in milliseconds since epoch (1/1/1970)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "txDigest": {
            "description": "Transaction digest of associated transaction, if any",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "EventFilter": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Package"
            ],
            "properties": {
              "Package": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Module"
            ],
            "properties": {
              "Module": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Move StructTag string value of the event type e.g. `0x2::devnet_nft::MintNFTEvent`",
            "type": "object",
            "required": [
              "MoveEventType"
            ],
            "properties": {
              "MoveEventType": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MoveEventField"
            ],
            "properties": {
              "MoveEventField": {
                "type": "object",
                "required": [
                  "path",
                  "value"
                ],
                "properties": {
                  "path": {
                    "type": "string"
                  },
                  "value": true
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SenderAddress"
            ],
            "properties": {
              "SenderAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "EventType"
            ],
            "properties": {
              "EventType": {
                "$ref": "#/components/schemas/EventType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ObjectId"
            ],
            "properties": {
              "ObjectId": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "All"
            ],
            "properties": {
              "All": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Any"
            ],
            "properties": {
              "Any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "And"
            ],
            "properties": {
              "And": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Or"
            ],
            "properties": {
              "Or": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventType": {
        "description": "Auto-generated discriminant enum variants",
        "type": "string",
        "enum": [
          "MoveEvent",
          "Publish",
          "TransferObject",
          "DeleteObject",
          "NewObject",
          "EpochChange",
          "Checkpoint"
        ]
      },
      "ExecutionStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "success"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error",
              "status"
            ],
            "properties": {
              "error": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "failure"
                ]
              }
            }
          }
        ]
      },
      "GasCostSummary": {
        "type": "object",
        "required": [
          "computationCost",
          "storageCost",
          "storageRebate"
        ],
        "properties": {
          "computationCost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageCost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageRebate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "Hex": {
        "type": "string"
      },
      "InputObjectKind": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MovePackage"
            ],
            "properties": {
              "MovePackage": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ImmOrOwnedMoveObject"
            ],
            "properties": {
              "ImmOrOwnedMoveObject": {
                "$ref": "#/components/schemas/ObjectRef"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SharedMoveObject"
            ],
            "properties": {
              "SharedMoveObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MoveCall": {
        "type": "object",
        "required": [
          "function",
          "module",
          "package"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "package": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "typeArguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MoveCallParams": {
        "type": "object",
        "required": [
          "arguments",
          "function",
          "module",
          "packageObjectId"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "packageObjectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "typeArguments": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        }
      },
      "MoveFunctionArgType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Pure"
            ]
          },
          {
            "type": "object",
            "required": [
              "Object"
            ],
            "properties": {
              "Object": {
                "$ref": "#/components/schemas/ObjectValueKind"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MovePackage": {
        "type": "object",
        "required": [
          "disassembled"
        ],
        "properties": {
          "disassembled": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "MoveStruct": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "object",
            "required": [
              "fields",
              "type"
            ],
            "properties": {
              "fields": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/MoveValue"
                }
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MoveValue"
            }
          }
        ]
      },
      "MoveValue": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/SuiAddress"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "$ref": "#/components/schemas/Base64"
          },
          {
            "type": "string"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            }
          },
          {
            "$ref": "#/components/schemas/MoveStruct"
          },
          {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MoveValue"
              },
              {
                "type": "null"
              }
            ]
          }
        ]
      },
      "Object": {
        "type": "object",
        "required": [
          "data",
          "owner",
          "previousTransaction",
          "reference",
          "storageRebate"
        ],
        "properties": {
          "data": {
            "description": "The meat of the object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Data"
              }
            ]
          },
          "owner": {
            "description": "The owner that unlocks this object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              }
            ]
          },
          "previousTransaction": {
            "description": "The digest of the transaction that created or last mutated this object",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ]
          },
          "reference": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "storageRebate": {
            "description": "The amount of SUI we would rebate if this object gets deleted. This number is re-calculated each time the object is mutated based on the present storage gas price.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "ObjectDigest": {
        "$ref": "#/components/schemas/Base64"
      },
      "ObjectID": {
        "$ref": "#/components/schemas/Hex"
      },
      "ObjectInfo": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "owner",
          "previousTransaction",
          "type",
          "version"
        ],
        "properties": {
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "previousTransaction": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "ObjectRead": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/Object"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Exists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "status": {
                "type": "string",
                "enum": [
                  "NotExists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectRef"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Deleted"
                ]
              }
            }
          }
        ]
      },
      "ObjectRef": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "version"
        ],
        "properties": {
          "digest": {
            "description": "Base64 string representing the object digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectDigest"
              }
            ]
          },
          "objectId": {
            "description": "Hex code as string representing the object id",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "version": {
            "description": "Object version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ObjectValueKind": {
        "type": "string",
        "enum": [
          "ByImmutableReference",
          "ByMutableReference",
          "ByValue"
        ]
      },
      "Owner": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Shared",
              "Immutable"
            ]
          },
          {
            "description": "Object is exclusively owned by a single address, and is mutable.",
            "type": "object",
            "required": [
              "AddressOwner"
            ],
            "properties": {
              "AddressOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is exclusively owned by a single object, and is mutable. The object ID is converted to SuiAddress as SuiAddress is universal.",
            "type": "object",
            "required": [
              "ObjectOwner"
            ],
            "properties": {
              "ObjectOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RPCTransactionRequestParams": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "transferObjectRequestParams"
            ],
            "properties": {
              "transferObjectRequestParams": {
                "$ref": "#/components/schemas/TransferObjectParams"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "moveCallRequestParams"
            ],
            "properties": {
              "moveCallRequestParams": {
                "$ref": "#/components/schemas/MoveCallParams"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Secp256k1SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "SequenceNumber": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "Signature": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519SuiSignature"
            ],
            "properties": {
              "Ed25519SuiSignature": {
                "$ref": "#/components/schemas/Ed25519SuiSignature"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1SuiSignature"
            ],
            "properties": {
              "Secp256k1SuiSignature": {
                "$ref": "#/components/schemas/Secp256k1SuiSignature"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SignatureScheme": {
        "type": "string",
        "enum": [
          "ED25519",
          "Secp256k1"
        ]
      },
      "SuiAddress": {
        "$ref": "#/components/schemas/Hex"
      },
      "SuiChangeEpoch": {
        "type": "object",
        "required": [
          "computation_charge",
          "epoch",
          "storage_charge"
        ],
        "properties": {
          "computation_charge": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storage_charge": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "SuiJsonValue": {},
      "SuiMoveAbility": {
        "type": "string",
        "enum": [
          "Copy",
          "Drop",
          "Store",
          "Key"
        ]
      },
      "SuiMoveAbilitySet": {
        "type": "object",
        "required": [
          "abilities"
        ],
        "properties": {
          "abilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbility"
            }
          }
        }
      },
      "SuiMoveModuleId": {
        "type": "object",
        "required": [
          "address",
          "name"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SuiMoveNormalizedField": {
        "type": "object",
        "required": [
          "name",
          "type_"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type_": {
            "$ref": "#/components/schemas/SuiMoveNormalizedType"
          }
        }
      },
      "SuiMoveNormalizedFunction": {
        "type": "object",
        "required": [
          "is_entry",
          "parameters",
          "return_",
          "type_parameters",
          "visibility"
        ],
        "properties": {
          "is_entry": {
            "type": "boolean"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "return_": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "type_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbilitySet"
            }
          },
          "visibility": {
            "$ref": "#/components/schemas/SuiMoveVisibility"
          }
        }
      },
      "SuiMoveNormalizedModule": {
        "type": "object",
        "required": [
          "address",
          "exposed_functions",
          "file_format_version",
          "friends",
          "name",
          "structs"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "exposed_functions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
            }
          },
          "file_format_version": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveModuleId"
            }
          },
          "name": {
            "type": "string"
          },
          "structs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
            }
          }
        }
      },
      "SuiMoveNormalizedStruct": {
        "type": "object",
        "required": [
          "abilities",
          "fields",
          "type_parameters"
        ],
        "properties": {
          "abilities": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedField"
            }
          },
          "type_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveStructTypeParameter"
            }
          }
        }
      },
      "SuiMoveNormalizedType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Bool",
              "U8",
              "U64",
              "U128",
              "Address",
              "Signer"
            ]
          },
          {
            "type": "object",
            "required": [
              "Struct"
            ],
            "properties": {
              "Struct": {
                "type": "object",
                "required": [
                  "address",
                  "module",
                  "name",
                  "type_arguments"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "module": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type_arguments": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiMoveNormalizedType"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Vector"
            ],
            "properties": {
              "Vector": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "TypeParameter"
            ],
            "properties": {
              "TypeParameter": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Reference"
            ],
            "properties": {
              "Reference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MutableReference"
            ],
            "properties": {
              "MutableReference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiMoveStructTypeParameter": {
        "type": "object",
        "required": [
          "constraints",
          "is_phantom"
        ],
        "properties": {
          "constraints": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "is_phantom": {
            "type": "boolean"
          }
        }
      },
      "SuiMoveVisibility": {
        "type": "string",
        "enum": [
          "Private",
          "Public",
          "Friend"
        ]
      },
      "SuiParsedMergeCoinResponse": {
        "type": "object",
        "required": [
          "updatedCoin",
          "updatedGas"
        ],
        "properties": {
          "updatedCoin": {
            "description": "The updated original coin object after merge",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "updatedGas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "SuiParsedPublishResponse": {
        "type": "object",
        "required": [
          "createdObjects",
          "package",
          "updatedGas"
        ],
        "properties": {
          "createdObjects": {
            "description": "List of Move objects created as part of running the module initializers in the package",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object"
            }
          },
          "package": {
            "description": "The newly published package object reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectRef"
              }
            ]
          },
          "updatedGas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "SuiParsedSplitCoinResponse": {
        "type": "object",
        "required": [
          "newCoins",
          "updatedCoin",
          "updatedGas"
        ],
        "properties": {
          "newCoins": {
            "description": "All the newly created coin objects generated from the split",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object"
            }
          },
          "updatedCoin": {
            "description": "The updated original coin object after split",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "updatedGas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "SuiParsedTransactionResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Publish"
            ],
            "properties": {
              "Publish": {
                "$ref": "#/components/schemas/SuiParsedPublishResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MergeCoin"
            ],
            "properties": {
              "MergeCoin": {
                "$ref": "#/components/schemas/SuiParsedMergeCoinResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SplitCoin"
            ],
            "properties": {
              "SplitCoin": {
                "$ref": "#/components/schemas/SuiParsedSplitCoinResponse"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiTransactionResponse": {
        "type": "object",
        "required": [
          "certificate",
          "effects"
        ],
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/CertifiedTransaction"
          },
          "effects": {
            "$ref": "#/components/schemas/TransactionEffects"
          },
          "parsed_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SuiParsedTransactionResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp_ms": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "TransactionBytes": {
        "type": "object",
        "required": [
          "gas",
          "inputObjects",
          "txBytes"
        ],
        "properties": {
          "gas": {
            "description": "the gas object to be used",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectRef"
              }
            ]
          },
          "inputObjects": {
            "description": "objects to be used in this transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputObjectKind"
            }
          },
          "txBytes": {
            "description": "transaction data bytes, as base-64 encoded string",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          }
        }
      },
      "TransactionData": {
        "type": "object",
        "required": [
          "gasBudget",
          "gasPayment",
          "sender",
          "transactions"
        ],
        "properties": {
          "gasBudget": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gasPayment": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "sender": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionKind"
            }
          }
        }
      },
      "TransactionDigest": {
        "description": "A transaction will have a (unique) digest.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base64"
          }
        ]
      },
      "TransactionEffects": {
        "description": "The response from processing a transaction or a certified transaction",
        "type": "object",
        "required": [
          "gasObject",
          "gasUsed",
          "status",
          "transactionDigest"
        ],
        "properties": {
          "created": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "dependencies": {
            "description": "The set of transaction digests this transaction depends on.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          },
          "events": {
            "description": "The events emitted during execution. Note that only successful transactions emit events",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "gasObject": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "gasUsed": {
            "$ref": "#/components/schemas/GasCostSummary"
          },
          "mutated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "sharedObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionStatus"
          },
          "transactionDigest": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "unwrapped": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "wrapped": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        }
      },
      "TransactionKind": {
        "oneOf": [
          {
            "description": "Initiate an object transfer between addresses",
            "type": "object",
            "required": [
              "TransferObject"
            ],
            "properties": {
              "TransferObject": {
                "$ref": "#/components/schemas/TransferObject"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Publish a new Move module",
            "type": "object",
            "required": [
              "Publish"
            ],
            "properties": {
              "Publish": {
                "$ref": "#/components/schemas/MovePackage"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Call a function in a published Move module",
            "type": "object",
            "required": [
              "Call"
            ],
            "properties": {
              "Call": {
                "$ref": "#/components/schemas/MoveCall"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Initiate a SUI coin transfer between addresses",
            "type": "object",
            "required": [
              "TransferSui"
            ],
            "properties": {
              "TransferSui": {
                "$ref": "#/components/schemas/TransferSui"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A system transaction that will update epoch information on-chain.",
            "type": "object",
            "required": [
              "ChangeEpoch"
            ],
            "properties": {
              "ChangeEpoch": {
                "$ref": "#/components/schemas/SuiChangeEpoch"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransferObject": {
        "type": "object",
        "required": [
          "objectRef",
          "recipient"
        ],
        "properties": {
          "objectRef": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TransferObjectParams": {
        "type": "object",
        "required": [
          "objectId",
          "recipient"
        ],
        "properties": {
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TransferSui": {
        "type": "object",
        "required": [
          "recipient"
        ],
        "properties": {
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TransferType": {
        "type": "string",
        "enum": [
          "Coin",
          "ToAddress",
          "ToObject"
        ]
      },
      "TypeTag": {
        "type": "string"
      }
    }
  }
}
