# Copyright (c) Mysten Labs, Inc.
# SPDX-License-Identifier: Apache-2.0

# GraphQL Schema Draft
# --------------------
#
# This is a draft design of the schema used by the second iteration of
# the RPC service.  Note that some elements may not be complete, and
# others may exist in this schema but may not appear in the production
# design initially, or ever.
#
# The source of truth for the actual schema is accessed by querying
# the GraphQL server for its `__schema`.

schema {
  query: Query
  subscription: Subscription
  mutation: Mutation
}

type Query {
  # First four bytes of the network's genesis checkpoint digest
  # (uniquely defines the network)
  chainIdentifier: String!

  # Range of checkpoints that the RPC has data available for (for data
  # that can be tied to a particular checkpoint).
  availableRange: AvailableRange!

  # Simulate running a transaction to inspect its effects without
  # committing to them on-chain.
  #
  # `txBytes` either a `TransactionData` struct or a `TransactionKind`
  #     struct, BCS-encoded and then Base64-encoded.  The expected
  #     type is controlled by the presence or absence of `txMeta`: If
  #     present, `txBytes` is assumed to be a `TransactionKind`, if
  #     absent, then `TransactionData`.
  #
  # `txMeta` the data that is missing from a `TransactionKind` to make
  #     a `TransactionData` (sender address and gas information).  All
  #     its fields are nullable: `sender` defaults to `0x0`, if
  #     `gasObjects` is not present, or is an empty list, it is
  #     substituted with a mock Coin object, and `gasPrice` defaults to
  #     the reference gas price.
  #
  # `skipChecks` optional flag to disable the usual verification
  #     checks that prevent access to objects that are owned by
  #     addresses other than the sender, and calling non-public,
  #     non-entry functions.  Defaults to false.
  #
  # `epoch` the epoch to simulate executing the transaction in.
  #     Defaults to the current epoch.
  dryRunTransactionBlock(
    txBytes: Base64!,
    txMeta: TransactionMetadata,
    skipChecks: Boolean,
    epoch: Int
  ): DryRunResult

  owner(address: SuiAddress!): Owner
  object(address: SuiAddress!, version: Int): Object
  address(address: SuiAddress!): Address

  # `epochId` defaults to the latest epoch.
  epoch(epochId: Int): Epoch

  # `protocolVersion` defaults to the latest protocol version.
  protocolConfig(protocolVersion: Int): ProtocolConfig

  # If no `id` is provided, fetch the latest available checkpoint.
  checkpoint(id: CheckpointID): Checkpoint

  # Find a transaction block either by its transaction digest or its
  # effects digest.
  transactionBlock(filter: TransactionBlockID!): TransactionBlock

  coinMetadata(coinType: String!): CoinMetadata

  checkpointConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): CheckpointConnection

  transactionBlockConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    filter: TransactionBlockFilter,
  ): TransactionBlockConnection

  eventConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    filter: EventFilter,
  ): EventConnection

  objectConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    filter: ObjectFilter,
  ): ObjectConnection

  resolveNameServiceAddress(name: String!): Address

  # NB. Will be moved into a private, explorer-specific extension.
  networkMetrics: NetworkMetrics
  moveCallMetrics: MoveCallMetrics

  allEpochAddressMetricsConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): AddressMetricsConnection
}

# NB. Add after MVP has stabilised.
#
# Subscriptions use a "push-pull" system: Subscribers are notified
# when there is new data by being sent the cursor pointing after that
# new data.  To actually fetch the data, a call must be made to the
# equivalent Connection API:
#
# e.g. When subscription `subscribe { events(filter: F) }` pushes
# cursor `E`.  Then
#
#     query { eventsConnection(before: E, filter: F) }
#
# Will start paginating events up to the new data (multiple calls may
# be required if there are multiple pages of information between the
# start and the latest).  If the client has already processed some
# prefix, up to cursor `P`, then they can resume with:
#
#    query { eventsConnection(after: P, before: E, filter: F) }
#
# The API for transactions is similar.
type Subscription {
  events(filter: EventFilter): String!
  transactions(filter: TransactionBlockFilter): String!
}

type Mutation {
  # Execute a transaction, committing its effects on chain.
  #
  # `txBytes` is a `TransactionData` struct that has been BCS-encoded
  #     and then Base64-encoded.
  # `signatures` are a list of `flag || signature || pubkey` bytes,
  #     Base64-encoded.
  #
  # Waits until the transaction has been finalised on chain and an
  # effects digest is available, and returns that.  If the
  # transaction could not be finalised, returns the errors that
  # prevented it, instead.
  executeTransactionBlock(
    txBytes: Base64!,
    signatures: [Base64!]!,
  ): ExecutionResult
}

# String containing 32B hex-encoded address
scalar SuiAddress

# String representation of an arbitrary width, possibly signed integer
scalar BigInt

# String containing Base64-encoded binary data.
scalar Base64

# ISO-8601 Date and Time
scalar DateTime

# The extra data required to turn a `TransactionKind` into a
# `TransactionData` in a dry-run.
input TransactionMetadata {
  sender: SuiAddress
  gasPrice: BigInt
  gasObjects: [SuiAddress!]
}

# Filter either by the digest, or the sequence number, or neither, to
# get the latest checkpoint.
input CheckpointID {
  digest: String
  sequenceNumber: Int
}

# TODO: Do we want to support querying by effects digest at all?
# Find a transaction block either by its transaction digest, or its
# effects digest (can't be both, can't be neither).
input TransactionBlockID {
  transactionDigest: String
  effectsDigest: String
}

input ObjectFilter {
  # Cascading (type requires module requires package)
  package: SuiAddress
  module: String
  type: String

  owner: SuiAddress
  objectIds: [SuiAddress!]
  objectKeys: [ObjectKey!]

  # Enhancement (post-MVP), compound filters.  Compound filters are
  # exclusive (must be the only filter set if they are used).
  any: [ObjectFilter]
  all: [ObjectFilter]
  not: ObjectFilter
}

input ObjectKey {
  objectId: SuiAddress!
  version: Int!
}

input EventFilter {
  sender: SuiAddress
  transactionDigest: String
  # Enhancement (post-MVP), requires compound filters to be useful.
  afterCheckpoint: Int
  beforeCheckpoint: Int

  # Cascading (module requires package)
  emittingPackage: SuiAddress
  emittingModule: String

  # Cascading (type requires module requires package)
  eventPackage: SuiAddress
  eventModule: String
  eventType: String

  # Enhancement (post-MVP), requires compound filters to be useful.
  startTime: DateTime
  endTime: DateTime

  # Enhancement (post-MVP), compound filters.  Compound filters are
  # exclusive (must be the only filter set if they are used).
  any: [EventFilter]
  all: [EventFilter]
  not: EventFilter
}

input TransactionBlockFilter {
  # Cascading (function requires module requires package)
  package: SuiAddress
  module: String
  function: String

  kind: TransactionBlockKindInput
  afterCheckpoint: Int
  beforeCheckpoint: Int

  signAddress: SuiAddress
  sentAddress: SuiAddress
  recvAddress: SuiAddress
  paidAddress: SuiAddress

  inputObject: SuiAddress
  changedObject: SuiAddress

  transactionIDs: [TransactionBlockID!]

  # Enhancement (post-MVP), consistency with EventFilter -- timestamp
  # comes from checkpoint timestamp.
  startTime: DateTime
  endTime: DateTime

  # Enhancement (post-MVP), compound filters.  Compound filters are
  # exclusive (must be the only filter set if they are used).
  any: [TransactionBlockFilter]
  all: [TransactionBlockFilter]
  not: TransactionBlockFilter
}

input DynamicFieldFilter {
  # Cascading (type requires module requires package)
  namePackage: SuiAddress
  nameModule: String
  nameType: String

  # Cascading (type requires module requires package)
  valuePackage: SuiAddress
  valueModule: String
  valueType: String
}

type AvailableRange {
  first: Checkpoint
  last: Checkpoint
}

interface ObjectOwner {
  location: SuiAddress!

  objectConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    # Enhancement (post-MVP) relies on compound filters.
    filter: ObjectFilter,
  ): ObjectConnection

  balance(type: String!): Balance
  balanceConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): BalanceConnection

  # `type` defaults to `0x2::sui::SUI`.
  coinConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    type: String,
  ): CoinConnection

  stakeConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): StakeConnection

  defaultNameServiceName: String
  nameServiceNameConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): NameServiceNameConnection
}

# Returned by Object.owner, where we can't disambiguate between
# Address and Object.
type Owner implements ObjectOwner {
  asAddress: Address
  asObject: Object
}

type Address implements ObjectOwner {
  transactionBlockConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    relation: AddressTransactionBlockRelationship,
    # Enhancement (post-MVP) relies on compound filters.
    filter: TransactionBlockFilter,
  ): TransactionBlockConnection
}

enum AddressTransactionBlockRelationship {
  SIGN # Transactions this address has signed
  SENT # Transactions that transferred objects from this address
  RECV # Transactions that received objects into this address
  PAID # Transactions that were paid for by this address
}

enum ObjectKind {
  OWNED
  CHILD
  SHARED
  IMMUTABLE
}

type Object implements ObjectOwner {
  id: ID!
  version: Int!
  digest: String!
  owner: Owner
  kind: ObjectKind

  previousTransactionBlock: TransactionBlock
  storageRebate: BigInt

  display: [DisplayEntry!]

  asMoveObject: MoveObject
  asMovePackage: MovePackage

  # Transaction Blocks that sent objects to this object
  receivedTransactionBlockConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    # Enhancement (post-MVP) relies on compound filters.
    filter: TransactionBlockFilter,
  ): TransactionBlockConnection

  dynamicField(dynamicFieldName: DynamicFieldName!): DynamicField
  dynamicFieldConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    # Enhancement (post-MVP) to filter dynamic fields by type.
    filter: DynamicFieldFilter,
  ): DynamicFieldConnection

  bcs: Base64
}

type DisplayEntry {
  key: String!
  value: String!
}

type Epoch {
  epochId: Int!
  systemStateVersion: Int
  protocolConfigs: ProtocolConfigs
  referenceGasPrice: BigInt

  systemParameters: SystemParameters
  stakeSubsidy: StakeSubsidy
  validatorSet: ValidatorSet
  storageFund: StorageFund
  safeMode: SafeMode

  startTimestamp: DateTime
  endTimestamp: DateTime

  # TODO: Identify non-duplicate fields in `EndOfEpochInfo`

  checkpointConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): CheckpointConnection

  transactionBlockConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    # Enhancement (post-MVP) relies on compound filters.
    filter: TransactionBlockFilter,
  ): TransactionBlockConnection
}

type ProtocolConfigs {
  protocolVersion: Int!
  featureFlags: [ProtocolConfigFeatureFlag]
  configs: [ProtocolConfigAttr]
  config(key: String!): ProtocolConfigAttr
  featureFlag(key: String!): ProtocolConfigFeatureFlag
}

type ProtocolConfigAttr {
  key: String!
  value: String!
}

type ProtocolConfigFeatureFlag {
  key: String!
  value: Boolean!
}

type SystemParameters {
  durationMs: BigInt
  stakeSubsidyStartEpoch: Int

  minValidatorCount: Int
  maxValidatorCount: Int

  minValidatorJoiningStake: BigInt
  validatorLowStakeThreshold: BigInt
  validatorVeryLowStakeThreshold: BigInt
  validatorLowStakeGracePeriod: Int
}

type StakeSubsidy {
  balance: BigInt
  distributionCounter: Int
  currentDistributionAmount: BigInt
  periodLength: Int
  decreaseRate: Int
}

type ValidatorSet {
  totalStake: BigInt

  activeValidators: [Validator]

  # Indices into `activeValidators`
  pendingRemovals: [Int]

  pendingActiveValidators: MoveObject
  pendingActiveValidatorsSize: Int

  stakePoolMappings: MoveObject
  stakePoolMappingsSize: Int

  inactivePools: MoveObject
  inactivePoolsSize: Int

  validatorCandidates: MoveObject
  validatorCandidatesSize: Int
}

type Validator {
  address: Address!

  credentials: ValidatorCredentials
  nextEpochCredentials: ValidatorCredentials

  name: String
  description: String
  imageUrl: String
  projectUrl: String

  operationCap: MoveObject
  stakingPool: MoveObject

  exchangeRates: MoveObject
  exchangeRatesSize: Int

  stakingPoolActivationEpoch: Int
  stakingPoolSuiBalance: BigInt
  rewardsPool: BigInt
  poolTokenBalance: BigInt
  pendingStake: BigInt
  pendingTotalSuiWithdraw: BigInt
  pendingPoolTokenWithdraw: BigInt

  votingPower: Int
  stakeUnits: Int
  gasPrice: BigInt
  commissionRate: Int
  nextEpochStake: BigInt
  nextEpochGasPrice: BigInt
  nextEpochCommissionRate: Int

  # The number of epochs for which this validator has been below the
  # low stake threshold.
  atRisk: Int

  # The other validators this validator has reported
  reportRecords: [SuiAddress]

  apy: Int
}

type ValidatorCredentials {
  protocolPubKey: Base64
  networkPubKey: Base64
  workerPubKey: Base64
  proofOfPossession: Base64

  netAddress: String
  p2pAddreess: String
  primaryAddress: String
  workerAddress: String
}

type StorageFund {
  totalObjectStorageRebates: BigInt
  nonRefundableBalance: BigInt
}

type SafeMode {
  enabled: Boolean
  gasSummary: GasCostSummary
}

type Checkpoint {
  id: ID!
  digest: String!
  sequenceNumber: Int!

  timestamp: DateTime
  validatorSignature: Base64

  # Commitments
  previousCheckpointDigest: String
  liveObjectSetDigest: String

  networkTotalTransactions: Int
  rollingGasSummary: GasCostSummary

  epoch: Epoch

  # Only available on the final checkpoint in an epoch
  endOfEpoch: EndOfEpochData

  transactionConnection(first: Int, after: String, last: Int, before: String): TransactionBlockConnection

  # NB. Will be moved into a private, explorer-specific extension.
  addressMetrics: AddressMetrics
}

type EndOfEpochData {
  newCommittee: [CommitteeMember]
  nextProtocolVersion: Int
}

type CommitteeMember {
  authorityName: String
  stakeUnit: Int
}

type TransactionBlock {
  id: ID!
  digest: String!

  sender: Address
  gasInput: GasInput
  kind: TransactionBlockKind
  signatures: [TransactionSignature]
  effects: TransactionBlockEffects

  expiration: Epoch

  bcs: Base64
}

enum TransactionBlockKindInput {
  PROGRAMMABLE_TX
  SYSTEM_TX
}

union TransactionBlockKind =
    ConsensusCommitPrologueTransaction
  | GenesisTransaction
  | ChangeEpochTransaction
  | ProgrammableTransactionBlock

type ConsensusCommitPrologueTransaction {
  epoch: Epoch
  # TODO: This is the "leader round" -- does this line up with
  # checkpoints? In which case, it may suffice to have a `Checkpoint`
  # here.
  round: Int
  timestamp: DateTime
}

type GenesisTransaction {
  objects: [Object]
}

type ChangeEpochTransaction {
  epoch: Epoch
  timestamp: DateTime

  storageCharge: BigInt
  computationCharge: BigInt
  storageRebate: BigInt
}

type ProgrammableTransactionBlock {
  inputs: [TransactionInput]
  transactions: [ProgrammableTransaction]
}

union TransactionInput = MovePackage | MoveObject | SharedInput

type SharedInput {
  id: SuiAddress
  initialSharedVersion: Int
  mutable: Boolean
}

union TransactionArgument = GasCoin | Input | Result

type GasCoin
type Input   { ix: Int }
type Result  { cmd: Int, ix: Int }

union ProgrammableTransaction =
    MoveCallTransaction
  | TransferObjectsTransaction
  | SplitCoinTransaction
  | MergeCoinsTransaction
  | PublishTransaction
  | UpgradeTransaction
  | MakeMoveVecTransaction

type MoveCallTransaction {
  function: MoveFunction
  typeArguments: [MoveType]
  arguments: [TransactionArgument]
}

type TransferObjectsTransaction {
  objects: [TransactionArgument]
  address: TransactionArgument
}

type SplitCoinTransaction {
  coin: TransactionArgument
  amounts: [TransactionArgument]
}

type MergeCoinsTransaction {
  coin: TransactionArgument
  coins: [TransactionArgument]
}

type PublishTransaction {
  dependencies: [MovePackage]
}

type UpgradeTransaction {
  dependencies: [MovePackage]
  currentPackage: MovePackage
  upgradeTicket: TransactionArgument
}

type MakeMoveVecTransaction {
  type: MoveType
  elements: [TransactionArgument]
}

# Omitting for brevity -- there's a lot of structure here, but it's
# not very "connected" (i.e. no edges to other types).
type TransactionSignature

type TransactionBlockEffects {
  digest: String!
  status: ExecutionStatus!

  errors: String
  transactionBlock: TransactionBlock
  dependencies: [TransactionBlock]

  lamportVersion: Int
  gasEffects: GasEffects
  objectReads: [Object]
  objectChanges: [ObjectChange]
  balanceChanges: [BalanceChange]

  epoch: Epoch
  checkpoint: Checkpoint

  eventConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
    # Extension (post-MVP) relies on compound filters
    filter: EventFilter,
  ): EventConnection

  bcs: Base64
}

enum ExecutionStatus {
  SUCCESS
  FAILURE
}

type GasInput {
  gasSponsor: Address
  gasPayment: [Object!]

  gasPrice: BigInt
  gasBudget: BigInt
}

type GasEffects {
  gasObject: Coin
  gasSummary: GasCostSummary
}

type GasCostSummary {
  computationCost: BigInt
  storageCost: BigInt
  storageRebate: BigInt
  nonRefundableStorageFee: BigInt
}

type ObjectChange {
  inputState: Object
  outputState: Object

  idCreated: Boolean
  idDeleted: Boolean
}

type BalanceChange {
  owner: Owner
  coinType: MoveType
  amount: BigInt
}

type Event {
  id: ID!

  # Module that the event was emitted by
  sendingModuleId: MoveModuleId

  # Type of the event being sent
  eventType: MoveType

  sender: Address
  timestamp: DateTime

  json: String
  bcs: Base64
}

type Balance {
  id: ID!
  coinType: MoveType
  coinObjectCount: Int
  totalBalance: BigInt
}

type Coin {
  id: ID!
  balance: BigInt
  asMoveObject: MoveObject!
}

type StakedSui {
  status: StakeStatus
  requestEpoch: Epoch
  activeEpoch: Epoch
  principal: BigInt

  # Only available if status is `ACTIVE`.
  estimatedReward: BigInt

  asMoveObject: MoveObject!
}

enum StakeStatus {
  PENDING
  ACTIVE
  UNSTAKED
}

type CoinMetadata {
  decimals: Int
  name: String
  symbol: String
  description: String
  iconURL: String
  supply: BigInt

  asMoveObject: MoveObject!
}

input DynamicFieldName {
  type: String!
  bcs: Base64!
}

type DynamicField {
  id: ID!
  name: MoveValue
  value: DynamicFieldValue
}

union DynamicFieldValue = MoveObject | MoveValue

type MoveObject {
  contents: MoveValue
  hasPublicTransfer: Boolean

  asCoin: Coin
  asStakedSui: StakedSui
  asObject: Object!
}

type MovePackage {
  module(name: String!): MoveModule
  moduleConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): MoveModuleConnection

  asObject: Object!
}

type MoveModuleId {
  package: MovePackage!
  name: String!
}

enum MoveAbility {
  COPY
  DROP
  STORE
  KEY
}

enum MoveVisibility {
  PUBLIC
  PRIVATE
  FRIEND
}

enum MoveReference {
  IMMUT
  MUT
}

type MoveStructTypeParameterDecl {
  constraints: [MoveAbility]
  isPhantom: Boolean
}

type MoveFunctionTypeParameterDecl {
  constraints: [MoveAbility]
}

type MoveModule {
  id: ID!
  fileFormatVersion: Int!

  moduleId: MoveModuleId!
  friends: [MoveModuleId]

  struct(name: String!): MoveStructDecl
  structConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): MoveStructConnection

  function(name: String!): MoveFunction
  functionConnection(
    first: Int,
    after: String,
    last: Int,
    before: String,
  ): MoveFunctionConnection

  bytes: Base64
  disassembly: String
}

type MoveStructDecl {
  id : ID!
  module: MoveModule!
  name: String!
  abilities: [MoveAbility]
  typeParameters: [MoveStructTypeParameterDecl]
  fields: [MoveField]
}

type MoveField {
  name: String
  type: OpenMoveType
}

type MoveFunction {
  id: ID!
  module: MoveModule!
  name: String!

  visibility: MoveVisibility
  isEntry: Boolean

  typeParameters: [MoveFunctionTypeParameterDecl]
  parameters: [OpenMoveType]
  return: [OpenMoveType]
}

type MoveValue {
  type: MoveType!
  data: MoveData

  bcs: Base64
}

union MoveData =
    MoveNumber
  | MoveBool
  | MoveAddress
  | MoveUID
  | MoveString
  | MoveVector
  | MoveOption
  | MoveStruct

type MoveNumber  { number: String! }
type MoveBool    { bool: Boolean! }
type MoveAddress { address: SuiAddress! }
type MoveUID     { uid: SuiAddress! }
type MoveString  { string: String! }
type MoveVector  { elements: [MoveValue!]! }
type MoveOption  { element: MoveValue }
type MoveStruct  { fields: [MoveField!]! }

type MoveField {
  name: String!
  value: MoveValue!
}

type MoveTypeName {
  # Fully qualified type name.  Primitive types have no `moduleId`, or
  # `struct`.
  moduleId: MoveModuleId
  name: String!
  struct: MoveStructDecl!
}

# Represents concrete types (no type parameters, no references)
type MoveType {
  # Scalar representation of the type instantiation (type and type
  # parameters)
  repr: String!
  typeName: MoveTypeName!
  typeParameters: [MoveType]
}

# Represents types that could contain unbound type parameters, or
# references. Such types can appear as function parameters, or fields
# in structs.
type OpenMoveType {
  repr: String!
  ref: MoveReference
  type: OpenMoveTypeBody
}

union OpenMoveTypeBody = MoveTypeApplication | MoveTypeParameter

type MoveTypeApplication {
  name: MoveTypeName!
  typeParameters: [OpenMoveType]
}

type MoveTypeParameter {
  index: Int!
}

# Metrics (omitted for brevity)
type NetworkMetrics
type MoveCallMetrics
type AddressMetrics {
  id: ID!
}

# Execution

type ExecutionResult {
  effectsDigest: String
  errors: String
}

type DryRunResult {
  transaction: TransactionBlock
  errors: String

  events: [Event!]
  results: [DryRunEffect!]
}

type DryRunEffect {
  # Changes made to arguments that were mutably borrowed by this
  # transaction
  mutatedReferences: [DryRunMutation!]

  # Results of this transaction
  returnValues: [DryRunReturn!]
}

type DryRunMutation {
  input: TransactionInput
  type: MoveType
  bcs: Base64
}

type DryRunReturn {
  type: MoveType
  bcs: Base64
}

# Connections

# Pagination
type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

# Checkpoints
type CheckpointConnection {
  edges: [CheckpointEdge!]!
  pageInfo: PageInfo!
}

type CheckpointEdge {
  cursor: String
  node: Checkpoint!
}

# Balance
type BalanceConnection {
  edges: [BalanceEdge!]!
  pageInfo: PageInfo!
}

type BalanceEdge {
  cursor: String
  node: Balance!
}

# Coin
type CoinConnection {
  edges: [CoinEdge!]!
  pageInfo: PageInfo!
}

type CoinEdge {
  cursor: String
  node: Coin!
}

# DynamicField
type DynamicFieldConnection {
  edges: [DynamicFieldEdge!]!
  pageInfo: PageInfo!
}

type DynamicFieldEdge {
  cursor: String
  node: DynamicField!
}

# Object
type ObjectConnection {
  edges: [ObjectEdge!]!
  pageInfo: PageInfo!
}

type ObjectEdge {
  cursor: String
  node: Object!
}

# Event
type EventConnection {
  edges: [EventEdge!]!
  pageInfo: PageInfo!
}

type EventEdge {
  cursor: String
  node: Event!
}

# MoveFunction
type MoveFunctionConnection {
  edges: [MoveFunctionEdge!]!
  pageInfo: PageInfo!
}

type MoveFunctionEdge {
  cursor: String
  node: MoveFunction!
}

# MoveStructDeclConnection
type MoveStructConnection {
  edges: [MoveStructEdge!]!
  pageInfo: PageInfo!
}

type MoveStructEdge {
  cursor: String
  node: MoveStructDecl!
}

# TransactionBlockConnection
type TransactionBlockConnection {
  totalTransactionBlocks: Int
  edges: [TransactionBlockEdge!]!
  pageInfo: PageInfo!
}

type TransactionBlockEdge {
  cursor: String
  node: TransactionBlock!
}

# MoveModuleConnection
type MoveModuleConnection {
  edges: [MoveModuleEdge!]!
  pageInfo: PageInfo!
}

type MoveModuleEdge {
  cursor: String
  node: MoveModule!
}

# NameServiceNameConnection
type NameServiceNameConnection {
  edges: [NameServiceNameEdge!]!
  pageInfo: PageInfo!
}

type NameServiceNameEdge {
  cursor: String
  node: String!  # is this correct?
}

# AddressMetricsConnection
type AddressMetricsConnection {
  edges: [AddressMetricEdge!]!
  pageInfo: PageInfo!
}

type AddressMetricEdge {
  cursor: String
  node: AddressMetrics!
}

# StakeConnection
type StakeConnection {
  edges: [StakeEdge!]!
  pageInfo: PageInfo!
}

type StakeEdge {
  cursor: String
  node: StakedSui!
}
